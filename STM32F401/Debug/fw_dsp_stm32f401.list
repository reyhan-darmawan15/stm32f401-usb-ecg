
fw_dsp_stm32f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080097a0  080097a0  000197a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bec  08009bec  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf4  08009bf4  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08009bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000200c  20000358  08009f54  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002364  08009f54  00022364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f75  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab5  00000000  00000000  000472fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0004bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0004d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af9d  00000000  00000000  0004e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022871  00000000  00000000  0006943d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f50  00000000  00000000  0008bcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ebfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000454c  00000000  00000000  0011ec54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00015602  00000000  00000000  001231a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009784 	.word	0x08009784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	08009784 	.word	0x08009784

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f50:	b510      	push	{r4, lr}
 8000f52:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f54:	2400      	movs	r4, #0
 8000f56:	9401      	str	r4, [sp, #4]
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_DMA_Init+0x40>)
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f6c:	4622      	mov	r2, r4
 8000f6e:	4621      	mov	r1, r4
 8000f70:	203a      	movs	r0, #58	; 0x3a
 8000f72:	f001 f935 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f76:	203a      	movs	r0, #58	; 0x3a
 8000f78:	f001 f966 	bl	8002248 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	4621      	mov	r1, r4
 8000f80:	2046      	movs	r0, #70	; 0x46
 8000f82:	f001 f92d 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f86:	2046      	movs	r0, #70	; 0x46
 8000f88:	f001 f95e 	bl	8002248 <HAL_NVIC_EnableIRQ>

}
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd10      	pop	{r4, pc}
 8000f90:	40023800 	.word	0x40023800

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2200      	movs	r2, #0
 8000f98:	9201      	str	r2, [sp, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_GPIO_Init+0x48>)
 8000f9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f9e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000fa2:	6319      	str	r1, [r3, #48]	; 0x30
 8000fa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fa6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000faa:	9101      	str	r1, [sp, #4]
 8000fac:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	9202      	str	r2, [sp, #8]
 8000fb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fb2:	f041 0101 	orr.w	r1, r1, #1
 8000fb6:	6319      	str	r1, [r3, #48]	; 0x30
 8000fb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fba:	f001 0101 	and.w	r1, r1, #1
 8000fbe:	9102      	str	r1, [sp, #8]
 8000fc0:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	9203      	str	r2, [sp, #12]
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f042 0202 	orr.w	r2, r2, #2
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	9303      	str	r3, [sp, #12]
 8000fd4:	9b03      	ldr	r3, [sp, #12]

}
 8000fd6:	b004      	add	sp, #16
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_UART_RxCpltCallback>:
 * @retval	Tidak ada
 *
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	if((huart->Instance == USART1) && (isDataReady == 0))
 8000fe0:	6802      	ldr	r2, [r0, #0]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_UART_RxCpltCallback+0x4c>)
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d000      	beq.n	8000fea <HAL_UART_RxCpltCallback+0xa>
		{
			DSP_ECGInputData[i] = (float)(AFE_ADCRawData[i]) * DSP_ADCToMillivoltScale;
		}
		isDataReady = 1;
	}
}
 8000fe8:	4770      	bx	lr
	if((huart->Instance == USART1) && (isDataReady == 0))
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_RxCpltCallback+0x50>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b1d3      	cbz	r3, 8001026 <HAL_UART_RxCpltCallback+0x46>
 8000ff0:	4770      	bx	lr
			DSP_ECGInputData[i] = (float)(AFE_ADCRawData[i]) * DSP_ADCToMillivoltScale;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_UART_RxCpltCallback+0x54>)
 8000ff4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_UART_RxCpltCallback+0x58>)
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_UART_RxCpltCallback+0x5c>)
 800100e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001012:	edc3 7a00 	vstr	s15, [r3]
		for(int8_t i=0; i<8; i++)
 8001016:	3201      	adds	r2, #1
 8001018:	b252      	sxtb	r2, r2
 800101a:	2a07      	cmp	r2, #7
 800101c:	dde9      	ble.n	8000ff2 <HAL_UART_RxCpltCallback+0x12>
		isDataReady = 1;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_UART_RxCpltCallback+0x50>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
}
 8001024:	e7e0      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0x8>
		for(int8_t i=0; i<8; i++)
 8001026:	2200      	movs	r2, #0
 8001028:	e7f7      	b.n	800101a <HAL_UART_RxCpltCallback+0x3a>
 800102a:	bf00      	nop
 800102c:	40011000 	.word	0x40011000
 8001030:	20000374 	.word	0x20000374
 8001034:	20001374 	.word	0x20001374
 8001038:	20000000 	.word	0x20000000
 800103c:	200005b0 	.word	0x200005b0

08001040 <HAL_TIM_PeriodElapsedCallback>:
 * 			Ubah ARR untuk mengubah periode sampling
 * @retval  Tidak ada
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	if(htim->Instance == TIM9)
 8001040:	6802      	ldr	r2, [r0, #0]
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001044:	429a      	cmp	r2, r3
 8001046:	d000      	beq.n	800104a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001048:	4770      	bx	lr
{
 800104a:	b510      	push	{r4, lr}
	{
		// Aktifkan DMA Rx
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)AFE_ADCRawData, 16);
 800104c:	4c09      	ldr	r4, [pc, #36]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800104e:	2210      	movs	r2, #16
 8001050:	4909      	ldr	r1, [pc, #36]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001052:	4620      	mov	r0, r4
 8001054:	f003 ff34 	bl	8004ec0 <HAL_UART_Receive_DMA>

		// Kirim command via DMA, supaya DSP tidak perlu menunggu proses kirim selesai
		afeCmd.command = (uint8_t)CMD_ADC;
 8001058:	4908      	ldr	r1, [pc, #32]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800105a:	2341      	movs	r3, #65	; 0x41
 800105c:	700b      	strb	r3, [r1, #0]
		afeCmd.value = 0x0003;
 800105e:	2303      	movs	r3, #3
 8001060:	704b      	strb	r3, [r1, #1]
 8001062:	2300      	movs	r3, #0
 8001064:	708b      	strb	r3, [r1, #2]
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&afeCmd, 4);
 8001066:	2204      	movs	r2, #4
 8001068:	4620      	mov	r0, r4
 800106a:	f003 fc0f 	bl	800488c <HAL_UART_Transmit_DMA>
	}
}
 800106e:	bd10      	pop	{r4, pc}
 8001070:	40014000 	.word	0x40014000
 8001074:	20001568 	.word	0x20001568
 8001078:	20001374 	.word	0x20001374
 800107c:	200005ac 	.word	0x200005ac

08001080 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001082:	e7fe      	b.n	8001082 <Error_Handler+0x2>

08001084 <SystemClock_Config>:
{
 8001084:	b500      	push	{lr}
 8001086:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001088:	2230      	movs	r2, #48	; 0x30
 800108a:	2100      	movs	r1, #0
 800108c:	a808      	add	r0, sp, #32
 800108e:	f005 fea1 	bl	8006dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001092:	2300      	movs	r3, #0
 8001094:	9303      	str	r3, [sp, #12]
 8001096:	9304      	str	r3, [sp, #16]
 8001098:	9305      	str	r3, [sp, #20]
 800109a:	9306      	str	r3, [sp, #24]
 800109c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <SystemClock_Config+0xa8>)
 80010a2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80010a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010a8:	6411      	str	r1, [r2, #64]	; 0x40
 80010aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010ac:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <SystemClock_Config+0xac>)
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010e2:	2319      	movs	r3, #25
 80010e4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010ea:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f0:	2307      	movs	r3, #7
 80010f2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	a808      	add	r0, sp, #32
 80010f6:	f002 f9cf 	bl	8003498 <HAL_RCC_OscConfig>
 80010fa:	b990      	cbnz	r0, 8001122 <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2102      	movs	r1, #2
 8001102:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	a803      	add	r0, sp, #12
 8001112:	f002 fc13 	bl	800393c <HAL_RCC_ClockConfig>
 8001116:	b930      	cbnz	r0, 8001126 <SystemClock_Config+0xa2>
  HAL_RCC_EnableCSS();
 8001118:	f002 fbba 	bl	8003890 <HAL_RCC_EnableCSS>
}
 800111c:	b015      	add	sp, #84	; 0x54
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001122:	f7ff ffad 	bl	8001080 <Error_Handler>
    Error_Handler();
 8001126:	f7ff ffab 	bl	8001080 <Error_Handler>
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000
 8001134:	00000000 	.word	0x00000000

08001138 <main>:
{
 8001138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_Init();
 800113c:	f000 fffe 	bl	800213c <HAL_Init>
  SystemClock_Config();
 8001140:	f7ff ffa0 	bl	8001084 <SystemClock_Config>
  MX_GPIO_Init();
 8001144:	f7ff ff26 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f7ff ff02 	bl	8000f50 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800114c:	f000 ff06 	bl	8001f5c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001150:	f000 fdde 	bl	8001d10 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001154:	f000 fe52 	bl	8001dfc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001158:	f000 feaa 	bl	8001eb0 <MX_TIM3_Init>
  MX_TIM9_Init();
 800115c:	f000 fce2 	bl	8001b24 <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 8001160:	f005 fb78 	bl	8006854 <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	489a      	ldr	r0, [pc, #616]	; (80013d0 <main+0x298>)
 8001168:	f003 f880 	bl	800426c <HAL_TIM_PWM_Start>
  TIM2->CCR3 = 0;
 800116c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
 8001174:	e2bd      	b.n	80016f2 <main+0x5ba>
				hpFilter[i].w1 = hpFilter[i].w0;
 8001176:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <main+0x29c>)
 8001178:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
				hpFilter[i].w0 = hpFilter[i].x - hpFilter[i].a1*hpFilter[i].w1;
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ed93 7a06 	vldr	s14, [r3, #24]
 8001188:	edd3 6a03 	vldr	s13, [r3, #12]
 800118c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001194:	edc3 7a02 	vstr	s15, [r3, #8]
				hpFilter[i].y  = hpFilter[i].b0*hpFilter[i].w0 + hpFilter[i].b1*hpFilter[i].w1;
 8001198:	edd3 7a04 	vldr	s15, [r3, #16]
 800119c:	ed93 7a02 	vldr	s14, [r3, #8]
 80011a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80011a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80011ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	edc3 7a01 	vstr	s15, [r3, #4]
 80011b8:	e197      	b.n	80014ea <main+0x3b2>
				plFilter[i].DBuffer[plFilter[i].Ptr] = plFilter[i].x;
 80011ba:	460f      	mov	r7, r1
 80011bc:	f44f 768a 	mov.w	r6, #276	; 0x114
 80011c0:	fb06 1604 	mla	r6, r6, r4, r1
 80011c4:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80011c8:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
 80011cc:	eb04 1a04 	add.w	sl, r4, r4, lsl #4
 80011d0:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 80011d4:	4453      	add	r3, sl
 80011d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80011da:	601a      	str	r2, [r3, #0]
				plFilter[i].Kf += 0.1 * (plFilter[i].DBuffer[(plFilter[i].Ptr-4) & 31] - plFilter[i].DBuffer[(plFilter[i].Ptr-14) & 31]);
 80011dc:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80011e0:	3b04      	subs	r3, #4
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	4453      	add	r3, sl
 80011e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80011f4:	3b0e      	subs	r3, #14
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	4453      	add	r3, sl
 80011fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	ee17 0a90 	vmov	r0, s15
 800120c:	f7ff f9a4 	bl	8000558 <__aeabi_f2d>
 8001210:	a36b      	add	r3, pc, #428	; (adr r3, 80013c0 <main+0x288>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f9f7 	bl	8000608 <__aeabi_dmul>
 800121a:	4680      	mov	r8, r0
 800121c:	4689      	mov	r9, r1
 800121e:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
 8001222:	f7ff f999 	bl	8000558 <__aeabi_f2d>
 8001226:	4642      	mov	r2, r8
 8001228:	464b      	mov	r3, r9
 800122a:	f7ff f837 	bl	800029c <__adddf3>
 800122e:	f7ff fcc3 	bl	8000bb8 <__aeabi_d2f>
 8001232:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
				plFilter[i].BBuffer[(plFilter[i].Ptr-4) & 31] = plFilter[i].DBuffer[(plFilter[i].Ptr-9) & 31] - plFilter[i].Kf;
 8001236:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 800123a:	3b09      	subs	r3, #9
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	4453      	add	r3, sl
 8001242:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ed96 7a40 	vldr	s14, [r6, #256]	; 0x100
 800124e:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 8001252:	3b04      	subs	r3, #4
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800125c:	4453      	add	r3, sl
 800125e:	3320      	adds	r3, #32
 8001260:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001264:	edc3 7a00 	vstr	s15, [r3]
				plFilter[i].Df = plFilter[i].DBuffer[(plFilter[i].Ptr-19) & 31] - 2.0*plFilter[i].DBuffer[(plFilter[i].Ptr-9) & 31] + plFilter[i].DBuffer[plFilter[i].Ptr];
 8001268:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 800126c:	3b13      	subs	r3, #19
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	4453      	add	r3, sl
 8001274:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f7ff f96d 	bl	8000558 <__aeabi_f2d>
 800127e:	4680      	mov	r8, r0
 8001280:	4689      	mov	r9, r1
 8001282:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 8001286:	3b09      	subs	r3, #9
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	4453      	add	r3, sl
 800128e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f7ff f960 	bl	8000558 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	f7fe fffe 	bl	800029c <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4640      	mov	r0, r8
 80012a6:	4649      	mov	r1, r9
 80012a8:	f7fe fff6 	bl	8000298 <__aeabi_dsub>
 80012ac:	4680      	mov	r8, r0
 80012ae:	4689      	mov	r9, r1
 80012b0:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80012b4:	449a      	add	sl, r3
 80012b6:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 80012ba:	6838      	ldr	r0, [r7, #0]
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4640      	mov	r0, r8
 80012c6:	4649      	mov	r1, r9
 80012c8:	f7fe ffe8 	bl	800029c <__adddf3>
 80012cc:	f7ff fc74 	bl	8000bb8 <__aeabi_d2f>
 80012d0:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
				plFilter[i].Df *= plFilter[i].Df;
 80012d4:	ed96 7a41 	vldr	s14, [r6, #260]	; 0x104
 80012d8:	edd6 7a41 	vldr	s15, [r6, #260]	; 0x104
 80012dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e0:	edc6 7a41 	vstr	s15, [r6, #260]	; 0x104
				if(plFilter[i].Df < 0.24)
 80012e4:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
 80012e8:	f7ff f936 	bl	8000558 <__aeabi_f2d>
 80012ec:	a336      	add	r3, pc, #216	; (adr r3, 80013c8 <main+0x290>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fbfb 	bl	8000aec <__aeabi_dcmplt>
 80012f6:	b350      	cbz	r0, 800134e <main+0x216>
					plFilter[i].y = plFilter[i].DBuffer[(plFilter[i].Ptr-9) & 31] - plFilter[i].BBuffer[(plFilter[i].Ptr-4) & 31];
 80012f8:	4837      	ldr	r0, [pc, #220]	; (80013d8 <main+0x2a0>)
 80012fa:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80012fe:	3b09      	subs	r3, #9
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8001308:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800130c:	4413      	add	r3, r2
 800130e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 800131a:	3b04      	subs	r3, #4
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	441a      	add	r2, r3
 8001322:	3220      	adds	r2, #32
 8001324:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001328:	ed92 7a00 	vldr	s14, [r2]
 800132c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001330:	edc6 7a43 	vstr	s15, [r6, #268]	; 0x10c
				plFilter[i].Ptr = (plFilter[i].Ptr + 1) & 31;
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <main+0x2a0>)
 8001336:	f44f 728a 	mov.w	r2, #276	; 0x114
 800133a:	fb02 3204 	mla	r2, r2, r4, r3
 800133e:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8001342:	3301      	adds	r3, #1
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
 800134c:	e18d      	b.n	800166a <main+0x532>
					plFilter[i].BBuffer[(plFilter[i].Ptr-4) & 31] = plFilter[i].BBuffer[(plFilter[i].Ptr-14) & 31];
 800134e:	4822      	ldr	r0, [pc, #136]	; (80013d8 <main+0x2a0>)
 8001350:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001354:	fb01 0104 	mla	r1, r1, r4, r0
 8001358:	f891 2110 	ldrb.w	r2, [r1, #272]	; 0x110
 800135c:	3a0e      	subs	r2, #14
 800135e:	f002 021f 	and.w	r2, r2, #31
 8001362:	f891 3110 	ldrb.w	r3, [r1, #272]	; 0x110
 8001366:	3b04      	subs	r3, #4
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	eb04 1604 	add.w	r6, r4, r4, lsl #4
 8001370:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8001374:	4432      	add	r2, r6
 8001376:	3220      	adds	r2, #32
 8001378:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	4433      	add	r3, r6
 8001380:	3320      	adds	r3, #32
 8001382:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001386:	601a      	str	r2, [r3, #0]
					plFilter[i].y = plFilter[i].DBuffer[(plFilter[i].Ptr-9) & 31] - plFilter[i].BBuffer[(plFilter[i].Ptr-14) & 31];
 8001388:	f891 3110 	ldrb.w	r3, [r1, #272]	; 0x110
 800138c:	3b09      	subs	r3, #9
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	4433      	add	r3, r6
 8001394:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	f891 3110 	ldrb.w	r3, [r1, #272]	; 0x110
 80013a0:	3b0e      	subs	r3, #14
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	441e      	add	r6, r3
 80013a8:	3620      	adds	r6, #32
 80013aa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80013ae:	ed96 7a00 	vldr	s14, [r6]
 80013b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b6:	edc1 7a43 	vstr	s15, [r1, #268]	; 0x10c
 80013ba:	e7bb      	b.n	8001334 <main+0x1fc>
 80013bc:	f3af 8000 	nop.w
 80013c0:	9999999a 	.word	0x9999999a
 80013c4:	3fb99999 	.word	0x3fb99999
 80013c8:	eb851eb8 	.word	0xeb851eb8
 80013cc:	3fceb851 	.word	0x3fceb851
 80013d0:	20001460 	.word	0x20001460
 80013d4:	200005d0 	.word	0x200005d0
 80013d8:	200008b4 	.word	0x200008b4
			DSP_ECGOutputData[(txUsbBufferCount * 8) + i] = (int16_t)(plFilter[i].y * DSP_MillivoltToADCScale) + 4096U;
 80013dc:	4acb      	ldr	r2, [pc, #812]	; (800170c <main+0x5d4>)
 80013de:	f44f 738a 	mov.w	r3, #276	; 0x114
 80013e2:	fb03 2304 	mla	r3, r3, r4, r2
 80013e6:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80013ea:	4bc9      	ldr	r3, [pc, #804]	; (8001710 <main+0x5d8>)
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4ac5      	ldr	r2, [pc, #788]	; (8001714 <main+0x5dc>)
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8001406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140a:	b29b      	uxth	r3, r3
 800140c:	4ac2      	ldr	r2, [pc, #776]	; (8001718 <main+0x5e0>)
 800140e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for(int8_t i=0; i<8; i++)
 8001412:	3501      	adds	r5, #1
 8001414:	b26d      	sxtb	r5, r5
 8001416:	2d07      	cmp	r5, #7
 8001418:	f300 8151 	bgt.w	80016be <main+0x586>
			stFilter[i].x = DSP_ECGInputData[i];
 800141c:	462c      	mov	r4, r5
 800141e:	4bbf      	ldr	r3, [pc, #764]	; (800171c <main+0x5e4>)
 8001420:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800142a:	4abd      	ldr	r2, [pc, #756]	; (8001720 <main+0x5e8>)
 800142c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001430:	6019      	str	r1, [r3, #0]
			stFilter[i].b0 = STFilt_b0;
 8001432:	4abc      	ldr	r2, [pc, #752]	; (8001724 <main+0x5ec>)
 8001434:	611a      	str	r2, [r3, #16]
			stFilter[i].b1 = STFilt_b1;
 8001436:	4abc      	ldr	r2, [pc, #752]	; (8001728 <main+0x5f0>)
 8001438:	615a      	str	r2, [r3, #20]
			stFilter[i].a1 = STFilt_a1;
 800143a:	4abc      	ldr	r2, [pc, #752]	; (800172c <main+0x5f4>)
 800143c:	619a      	str	r2, [r3, #24]
			stFilter[i].w1 = stFilter[i].w0;
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
			stFilter[i].w0 = stFilter[i].x - stFilter[i].a1*stFilter[i].w1;
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed93 7a06 	vldr	s14, [r3, #24]
 800144a:	edd3 6a03 	vldr	s13, [r3, #12]
 800144e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001456:	edc3 7a02 	vstr	s15, [r3, #8]
			stFilter[i].y  = stFilter[i].b0*stFilter[i].w0 + stFilter[i].b1*stFilter[i].w1;
 800145a:	edd3 7a04 	vldr	s15, [r3, #16]
 800145e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	ed93 7a05 	vldr	s14, [r3, #20]
 800146a:	edd3 6a03 	vldr	s13, [r3, #12]
 800146e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001476:	edc3 7a01 	vstr	s15, [r3, #4]
			if(stFilter[i].y > 5.000) stFilter[i].y = 5.000;
 800147a:	ed93 7a01 	vldr	s14, [r3, #4]
 800147e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8001482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	dd06      	ble.n	800149a <main+0x362>
 800148c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001490:	4aa3      	ldr	r2, [pc, #652]	; (8001720 <main+0x5e8>)
 8001492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001496:	edc3 7a01 	vstr	s15, [r3, #4]
			if(stFilter[i].y < -5.000) stFilter[i].y = -5.000;
 800149a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800149e:	4aa0      	ldr	r2, [pc, #640]	; (8001720 <main+0x5e8>)
 80014a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80014a8:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80014ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	d505      	bpl.n	80014c2 <main+0x38a>
 80014b6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80014ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014be:	edc3 7a01 	vstr	s15, [r3, #4]
			hpFilter[i].x = stFilter[i].y;
 80014c2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80014c6:	4a96      	ldr	r2, [pc, #600]	; (8001720 <main+0x5e8>)
 80014c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4b98      	ldr	r3, [pc, #608]	; (8001730 <main+0x5f8>)
 80014d0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80014d4:	601a      	str	r2, [r3, #0]
			if(hpFilter[i].isFilterOn == 1)
 80014d6:	7f1b      	ldrb	r3, [r3, #28]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	f43f ae4b 	beq.w	8001176 <main+0x3e>
				hpFilter[i].y = hpFilter[i].x;
 80014e0:	4b93      	ldr	r3, [pc, #588]	; (8001730 <main+0x5f8>)
 80014e2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
			if(hpFilter[i].y > 5.000) hpFilter[i].y = 5.000;
 80014ea:	4b91      	ldr	r3, [pc, #580]	; (8001730 <main+0x5f8>)
 80014ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80014f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014f4:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80014f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	dd04      	ble.n	800150c <main+0x3d4>
 8001502:	4b8b      	ldr	r3, [pc, #556]	; (8001730 <main+0x5f8>)
 8001504:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8001508:	edc3 7a01 	vstr	s15, [r3, #4]
			if(hpFilter[i].y < -5.000) hpFilter[i].y = -5.000;
 800150c:	4b88      	ldr	r3, [pc, #544]	; (8001730 <main+0x5f8>)
 800150e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8001512:	ed93 7a01 	vldr	s14, [r3, #4]
 8001516:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 800151a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d504      	bpl.n	800152e <main+0x3f6>
 8001524:	4b82      	ldr	r3, [pc, #520]	; (8001730 <main+0x5f8>)
 8001526:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800152a:	edc3 7a01 	vstr	s15, [r3, #4]
			lpFilter[i].x = hpFilter[i].y;
 800152e:	4b80      	ldr	r3, [pc, #512]	; (8001730 <main+0x5f8>)
 8001530:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800153a:	4a7e      	ldr	r2, [pc, #504]	; (8001734 <main+0x5fc>)
 800153c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001540:	6019      	str	r1, [r3, #0]
			lpFilter[i].w12 = lpFilter[i].w11;
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	619a      	str	r2, [r3, #24]
			lpFilter[i].w11 = lpFilter[i].w10;
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
			lpFilter[i].w10 = lpFilter[i].x*lpFilter[i].K1 - lpFilter[i].w11*lpFilter[i].a11 - lpFilter[i].w12*lpFilter[i].a12;
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	ed93 7a05 	vldr	s14, [r3, #20]
 800155a:	edd3 6a07 	vldr	s13, [r3, #28]
 800155e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001566:	ed93 7a06 	vldr	s14, [r3, #24]
 800156a:	edd3 6a08 	vldr	s13, [r3, #32]
 800156e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001576:	edc3 7a04 	vstr	s15, [r3, #16]
			lpFilter[i].y1 = lpFilter[i].w10 + 2*lpFilter[i].w11 + lpFilter[i].w12;
 800157a:	edd3 7a04 	vldr	s15, [r3, #16]
 800157e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001582:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158a:	ed93 7a06 	vldr	s14, [r3, #24]
 800158e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001592:	edc3 7a01 	vstr	s15, [r3, #4]
			lpFilter[i].w22 = lpFilter[i].w21;
 8001596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
			lpFilter[i].w21 = lpFilter[i].w20;
 800159a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
			lpFilter[i].w20 = lpFilter[i].y1*lpFilter[i].K2 - lpFilter[i].w21*lpFilter[i].a21 - lpFilter[i].w22*lpFilter[i].a22;
 800159e:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015ae:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80015b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80015b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ba:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80015be:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80015c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80015c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			lpFilter[i].y2 = lpFilter[i].w20 + 2*lpFilter[i].w21 + lpFilter[i].w22;
 80015ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015d2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015d6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80015e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015e6:	edc3 7a02 	vstr	s15, [r3, #8]
			if(lpFilter[i].y2 > 5.000) lpFilter[i].y2 = 5.000;
 80015ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80015ee:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80015f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	dd06      	ble.n	800160a <main+0x4d2>
 80015fc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <main+0x5fc>)
 8001602:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001606:	edc3 7a02 	vstr	s15, [r3, #8]
			if(lpFilter[i].y2 < -5.000) lpFilter[i].y2 = -5.000;
 800160a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800160e:	4a49      	ldr	r2, [pc, #292]	; (8001734 <main+0x5fc>)
 8001610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001614:	ed93 7a02 	vldr	s14, [r3, #8]
 8001618:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d505      	bpl.n	8001632 <main+0x4fa>
 8001626:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800162a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800162e:	edc3 7a02 	vstr	s15, [r3, #8]
			plFilter[i].x = lpFilter[i].y2;
 8001632:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001636:	4a3f      	ldr	r2, [pc, #252]	; (8001734 <main+0x5fc>)
 8001638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	4933      	ldr	r1, [pc, #204]	; (800170c <main+0x5d4>)
 8001640:	f44f 738a 	mov.w	r3, #276	; 0x114
 8001644:	fb03 1304 	mla	r3, r3, r4, r1
 8001648:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if(plFilter[i].isFilterOn == 1)
 800164c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	f43f adb1 	beq.w	80011ba <main+0x82>
				plFilter[i].y = plFilter[i].x;
 8001658:	4a2c      	ldr	r2, [pc, #176]	; (800170c <main+0x5d4>)
 800165a:	f44f 738a 	mov.w	r3, #276	; 0x114
 800165e:	fb03 2304 	mla	r3, r3, r4, r2
 8001662:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001666:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if(plFilter[i].y > 5.000) plFilter[i].y = 5.000;
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <main+0x5d4>)
 800166c:	f44f 738a 	mov.w	r3, #276	; 0x114
 8001670:	fb03 2304 	mla	r3, r3, r4, r2
 8001674:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8001678:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800167c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	dd05      	ble.n	8001692 <main+0x55a>
 8001686:	f44f 738a 	mov.w	r3, #276	; 0x114
 800168a:	fb03 2304 	mla	r3, r3, r4, r2
 800168e:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
			if(plFilter[i].y < -5.000) plFilter[i].y = -5.000;
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <main+0x5d4>)
 8001694:	f44f 738a 	mov.w	r3, #276	; 0x114
 8001698:	fb03 2304 	mla	r3, r3, r4, r2
 800169c:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 80016a0:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	f57f ae96 	bpl.w	80013dc <main+0x2a4>
 80016b0:	f44f 738a 	mov.w	r3, #276	; 0x114
 80016b4:	fb03 2304 	mla	r3, r3, r4, r2
 80016b8:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
 80016bc:	e68e      	b.n	80013dc <main+0x2a4>
		if(txUsbBufferCount == 19)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <main+0x5dc>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b13      	cmp	r3, #19
 80016c6:	d01b      	beq.n	8001700 <main+0x5c8>
		txUsbBufferCount = (txUsbBufferCount + 1) % 20;
 80016c8:	4912      	ldr	r1, [pc, #72]	; (8001714 <main+0x5dc>)
 80016ca:	780a      	ldrb	r2, [r1, #0]
 80016cc:	3201      	adds	r2, #1
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <main+0x600>)
 80016d0:	fb83 0302 	smull	r0, r3, r3, r2
 80016d4:	10db      	asrs	r3, r3, #3
 80016d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016da:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	700b      	strb	r3, [r1, #0]
		isDataReady = 0;
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <main+0x604>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
	if(usbCmd->updated == 0x01)
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <main+0x608>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	791a      	ldrb	r2, [r3, #4]
 80016ee:	2a01      	cmp	r2, #1
 80016f0:	d028      	beq.n	8001744 <main+0x60c>
	if(isDataReady == 1)
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <main+0x604>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d1f5      	bne.n	80016e8 <main+0x5b0>
		for(int8_t i=0; i<8; i++)
 80016fc:	2500      	movs	r5, #0
 80016fe:	e68a      	b.n	8001416 <main+0x2de>
			CDC_Transmit_FS((uint8_t*)DSP_ECGOutputData, 320);
 8001700:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <main+0x5e0>)
 8001706:	f005 f93f 	bl	8006988 <CDC_Transmit_FS>
 800170a:	e7dd      	b.n	80016c8 <main+0x590>
 800170c:	200008b4 	.word	0x200008b4
 8001710:	20000004 	.word	0x20000004
 8001714:	20000375 	.word	0x20000375
 8001718:	20001154 	.word	0x20001154
 800171c:	200005b0 	.word	0x200005b0
 8001720:	20001294 	.word	0x20001294
 8001724:	3f7feb6b 	.word	0x3f7feb6b
 8001728:	bf7feb6b 	.word	0xbf7feb6b
 800172c:	bf7fd6d6 	.word	0xbf7fd6d6
 8001730:	200005d0 	.word	0x200005d0
 8001734:	200006d4 	.word	0x200006d4
 8001738:	66666667 	.word	0x66666667
 800173c:	20000374 	.word	0x20000374
 8001740:	200005a8 	.word	0x200005a8
		switch(usbCmd->command)
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	3a48      	subs	r2, #72	; 0x48
 8001748:	2a0a      	cmp	r2, #10
 800174a:	f200 80f1 	bhi.w	8001930 <main+0x7f8>
 800174e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001752:	0040      	.short	0x0040
 8001754:	00ef00ef 	.word	0x00ef00ef
 8001758:	00aa00ef 	.word	0x00aa00ef
 800175c:	00ef00ef 	.word	0x00ef00ef
 8001760:	00ca00ef 	.word	0x00ca00ef
 8001764:	00cc00ef 	.word	0x00cc00ef
					if(usbCmd->value == 1)	// HPF 0.25 Hz
 8001768:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800176c:	2901      	cmp	r1, #1
 800176e:	d012      	beq.n	8001796 <main+0x65e>
					if(usbCmd->value == 2)	// HPF 0.5 Hz
 8001770:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 8001774:	2902      	cmp	r1, #2
 8001776:	d01d      	beq.n	80017b4 <main+0x67c>
				for(int8_t i=7; i>-1; i--)
 8001778:	3a01      	subs	r2, #1
 800177a:	b252      	sxtb	r2, r2
 800177c:	2a00      	cmp	r2, #0
 800177e:	f2c0 80d7 	blt.w	8001930 <main+0x7f8>
					if(usbCmd->value == 0)	// Nonaktifkan HPF
 8001782:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 8001786:	2900      	cmp	r1, #0
 8001788:	d1ee      	bne.n	8001768 <main+0x630>
						hpFilter[i].isFilterOn = 0;
 800178a:	496b      	ldr	r1, [pc, #428]	; (8001938 <main+0x800>)
 800178c:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 8001790:	2000      	movs	r0, #0
 8001792:	7708      	strb	r0, [r1, #28]
 8001794:	e7e8      	b.n	8001768 <main+0x630>
						hpFilter[i].isFilterOn = 1;
 8001796:	4968      	ldr	r1, [pc, #416]	; (8001938 <main+0x800>)
 8001798:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 800179c:	2001      	movs	r0, #1
 800179e:	7708      	strb	r0, [r1, #28]
						hpFilter[i].w0 = 0.0;
 80017a0:	2000      	movs	r0, #0
 80017a2:	6088      	str	r0, [r1, #8]
						hpFilter[i].w1 = 0.0;
 80017a4:	60c8      	str	r0, [r1, #12]
						hpFilter[i].b0 = HPF_b0_025Hz;
 80017a6:	4865      	ldr	r0, [pc, #404]	; (800193c <main+0x804>)
 80017a8:	6108      	str	r0, [r1, #16]
						hpFilter[i].b1 = HPF_b1_025Hz;
 80017aa:	4865      	ldr	r0, [pc, #404]	; (8001940 <main+0x808>)
 80017ac:	6148      	str	r0, [r1, #20]
						hpFilter[i].a1 = HPF_a1_025Hz;
 80017ae:	4865      	ldr	r0, [pc, #404]	; (8001944 <main+0x80c>)
 80017b0:	6188      	str	r0, [r1, #24]
 80017b2:	e7dd      	b.n	8001770 <main+0x638>
						hpFilter[i].isFilterOn = 1;
 80017b4:	4960      	ldr	r1, [pc, #384]	; (8001938 <main+0x800>)
 80017b6:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 80017ba:	2001      	movs	r0, #1
 80017bc:	7708      	strb	r0, [r1, #28]
						hpFilter[i].w0 = 0.0;
 80017be:	2000      	movs	r0, #0
 80017c0:	6088      	str	r0, [r1, #8]
						hpFilter[i].w1 = 0.0;
 80017c2:	60c8      	str	r0, [r1, #12]
						hpFilter[i].b0 = HPF_b0_050Hz;
 80017c4:	4860      	ldr	r0, [pc, #384]	; (8001948 <main+0x810>)
 80017c6:	6108      	str	r0, [r1, #16]
						hpFilter[i].b1 = HPF_b1_050Hz;
 80017c8:	4860      	ldr	r0, [pc, #384]	; (800194c <main+0x814>)
 80017ca:	6148      	str	r0, [r1, #20]
						hpFilter[i].a1 = HPF_a1_050Hz;
 80017cc:	4860      	ldr	r0, [pc, #384]	; (8001950 <main+0x818>)
 80017ce:	6188      	str	r0, [r1, #24]
 80017d0:	e7d2      	b.n	8001778 <main+0x640>
		switch(usbCmd->command)
 80017d2:	2207      	movs	r2, #7
 80017d4:	e7d2      	b.n	800177c <main+0x644>
					if(usbCmd->value == 1)	// LPF 75 Hz
 80017d6:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 80017da:	2901      	cmp	r1, #1
 80017dc:	d029      	beq.n	8001832 <main+0x6fa>
					if(usbCmd->value == 2)	// LPF 150 Hz
 80017de:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 80017e2:	2902      	cmp	r1, #2
 80017e4:	d042      	beq.n	800186c <main+0x734>
				for(int8_t i=7; i>-1; i--)
 80017e6:	3a01      	subs	r2, #1
 80017e8:	b252      	sxtb	r2, r2
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	f2c0 80a0 	blt.w	8001930 <main+0x7f8>
					if(usbCmd->value == 0)	// LPF 40 Hz
 80017f0:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 80017f4:	2900      	cmp	r1, #0
 80017f6:	d1ee      	bne.n	80017d6 <main+0x69e>
						lpFilter[i].w10 = 0.0;
 80017f8:	4c56      	ldr	r4, [pc, #344]	; (8001954 <main+0x81c>)
 80017fa:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80017fe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001802:	2000      	movs	r0, #0
 8001804:	6108      	str	r0, [r1, #16]
						lpFilter[i].w11 = 0.0;
 8001806:	6148      	str	r0, [r1, #20]
						lpFilter[i].w12 = 0.0;
 8001808:	6188      	str	r0, [r1, #24]
						lpFilter[i].w20 = 0.0;
 800180a:	6288      	str	r0, [r1, #40]	; 0x28
						lpFilter[i].w21 = 0.0;
 800180c:	62c8      	str	r0, [r1, #44]	; 0x2c
						lpFilter[i].w22 = 0.0;
 800180e:	6308      	str	r0, [r1, #48]	; 0x30
						lpFilter[i].K1  = LPF_K_40Hz[0];
 8001810:	4851      	ldr	r0, [pc, #324]	; (8001958 <main+0x820>)
 8001812:	60c8      	str	r0, [r1, #12]
						lpFilter[i].K2  = LPF_K_40Hz[1];
 8001814:	4851      	ldr	r0, [pc, #324]	; (800195c <main+0x824>)
 8001816:	6248      	str	r0, [r1, #36]	; 0x24
						lpFilter[i].a11 = LPF_a1_40Hz[1];
 8001818:	4851      	ldr	r0, [pc, #324]	; (8001960 <main+0x828>)
 800181a:	61c8      	str	r0, [r1, #28]
						lpFilter[i].a12 = LPF_a1_40Hz[2];
 800181c:	4851      	ldr	r0, [pc, #324]	; (8001964 <main+0x82c>)
 800181e:	6208      	str	r0, [r1, #32]
						lpFilter[i].a21 = LPF_a2_40Hz[1];
 8001820:	4851      	ldr	r0, [pc, #324]	; (8001968 <main+0x830>)
 8001822:	6348      	str	r0, [r1, #52]	; 0x34
						lpFilter[i].a22 = LPF_a2_40Hz[2];
 8001824:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8001828:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800182c:	494f      	ldr	r1, [pc, #316]	; (800196c <main+0x834>)
 800182e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001830:	e7d1      	b.n	80017d6 <main+0x69e>
						lpFilter[i].w10 = 0.0;
 8001832:	4c48      	ldr	r4, [pc, #288]	; (8001954 <main+0x81c>)
 8001834:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8001838:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800183c:	2000      	movs	r0, #0
 800183e:	6108      	str	r0, [r1, #16]
						lpFilter[i].w11 = 0.0;
 8001840:	6148      	str	r0, [r1, #20]
						lpFilter[i].w12 = 0.0;
 8001842:	6188      	str	r0, [r1, #24]
						lpFilter[i].w20 = 0.0;
 8001844:	6288      	str	r0, [r1, #40]	; 0x28
						lpFilter[i].w21 = 0.0;
 8001846:	62c8      	str	r0, [r1, #44]	; 0x2c
						lpFilter[i].w22 = 0.0;
 8001848:	6308      	str	r0, [r1, #48]	; 0x30
						lpFilter[i].K1  = LPF_K_75Hz[0];
 800184a:	4849      	ldr	r0, [pc, #292]	; (8001970 <main+0x838>)
 800184c:	60c8      	str	r0, [r1, #12]
						lpFilter[i].K2  = LPF_K_75Hz[1];
 800184e:	4849      	ldr	r0, [pc, #292]	; (8001974 <main+0x83c>)
 8001850:	6248      	str	r0, [r1, #36]	; 0x24
						lpFilter[i].a11 = LPF_a1_75Hz[1];
 8001852:	4849      	ldr	r0, [pc, #292]	; (8001978 <main+0x840>)
 8001854:	61c8      	str	r0, [r1, #28]
						lpFilter[i].a12 = LPF_a1_75Hz[2];
 8001856:	4849      	ldr	r0, [pc, #292]	; (800197c <main+0x844>)
 8001858:	6208      	str	r0, [r1, #32]
						lpFilter[i].a21 = LPF_a2_75Hz[1];
 800185a:	4849      	ldr	r0, [pc, #292]	; (8001980 <main+0x848>)
 800185c:	6348      	str	r0, [r1, #52]	; 0x34
						lpFilter[i].a22 = LPF_a2_75Hz[2];
 800185e:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8001862:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001866:	4947      	ldr	r1, [pc, #284]	; (8001984 <main+0x84c>)
 8001868:	63a1      	str	r1, [r4, #56]	; 0x38
 800186a:	e7b8      	b.n	80017de <main+0x6a6>
						lpFilter[i].w10 = 0.0;
 800186c:	4c39      	ldr	r4, [pc, #228]	; (8001954 <main+0x81c>)
 800186e:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8001872:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001876:	2000      	movs	r0, #0
 8001878:	6108      	str	r0, [r1, #16]
						lpFilter[i].w11 = 0.0;
 800187a:	6148      	str	r0, [r1, #20]
						lpFilter[i].w12 = 0.0;
 800187c:	6188      	str	r0, [r1, #24]
						lpFilter[i].w20 = 0.0;
 800187e:	6288      	str	r0, [r1, #40]	; 0x28
						lpFilter[i].w21 = 0.0;
 8001880:	62c8      	str	r0, [r1, #44]	; 0x2c
						lpFilter[i].w22 = 0.0;
 8001882:	6308      	str	r0, [r1, #48]	; 0x30
						lpFilter[i].K1  = LPF_K_150Hz[0];
 8001884:	4840      	ldr	r0, [pc, #256]	; (8001988 <main+0x850>)
 8001886:	60c8      	str	r0, [r1, #12]
						lpFilter[i].K2  = LPF_K_150Hz[1];
 8001888:	4840      	ldr	r0, [pc, #256]	; (800198c <main+0x854>)
 800188a:	6248      	str	r0, [r1, #36]	; 0x24
						lpFilter[i].a11 = LPF_a1_150Hz[1];
 800188c:	4840      	ldr	r0, [pc, #256]	; (8001990 <main+0x858>)
 800188e:	61c8      	str	r0, [r1, #28]
						lpFilter[i].a12 = LPF_a1_150Hz[2];
 8001890:	4840      	ldr	r0, [pc, #256]	; (8001994 <main+0x85c>)
 8001892:	6208      	str	r0, [r1, #32]
						lpFilter[i].a21 = LPF_a2_150Hz[1];
 8001894:	4840      	ldr	r0, [pc, #256]	; (8001998 <main+0x860>)
 8001896:	6348      	str	r0, [r1, #52]	; 0x34
						lpFilter[i].a22 = LPF_a2_150Hz[2];
 8001898:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 800189c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80018a0:	493e      	ldr	r1, [pc, #248]	; (800199c <main+0x864>)
 80018a2:	63a1      	str	r1, [r4, #56]	; 0x38
 80018a4:	e79f      	b.n	80017e6 <main+0x6ae>
		switch(usbCmd->command)
 80018a6:	2207      	movs	r2, #7
 80018a8:	e79f      	b.n	80017ea <main+0x6b2>
					if(usbCmd->value == 1)	// Powerline filter on
 80018aa:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 80018ae:	2901      	cmp	r1, #1
 80018b0:	d010      	beq.n	80018d4 <main+0x79c>
				for (int8_t i=7; i>-1; i--)
 80018b2:	3a01      	subs	r2, #1
 80018b4:	b252      	sxtb	r2, r2
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	db3a      	blt.n	8001930 <main+0x7f8>
					if(usbCmd->value == 0)	// Powerline filter off
 80018ba:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 80018be:	2900      	cmp	r1, #0
 80018c0:	d1f3      	bne.n	80018aa <main+0x772>
						plFilter[i].isFilterOn = 0;
 80018c2:	4837      	ldr	r0, [pc, #220]	; (80019a0 <main+0x868>)
 80018c4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80018c8:	fb01 0102 	mla	r1, r1, r2, r0
 80018cc:	2000      	movs	r0, #0
 80018ce:	f881 0111 	strb.w	r0, [r1, #273]	; 0x111
 80018d2:	e7ea      	b.n	80018aa <main+0x772>
						plFilter[i].isFilterOn = 1;
 80018d4:	4832      	ldr	r0, [pc, #200]	; (80019a0 <main+0x868>)
 80018d6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80018da:	fb01 0102 	mla	r1, r1, r2, r0
 80018de:	2001      	movs	r0, #1
 80018e0:	f881 0111 	strb.w	r0, [r1, #273]	; 0x111
 80018e4:	e7e5      	b.n	80018b2 <main+0x77a>
		switch(usbCmd->command)
 80018e6:	2207      	movs	r2, #7
 80018e8:	e7e5      	b.n	80018b6 <main+0x77e>
				if(usbCmd->value != 0)
 80018ea:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 80018ee:	b1da      	cbz	r2, 8001928 <main+0x7f0>
					TIM2->CCR3 = 299;
 80018f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f4:	f240 112b 	movw	r1, #299	; 0x12b
 80018f8:	63d1      	str	r1, [r2, #60]	; 0x3c
					if(usbCmd->value > 4999)
 80018fa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 80018fe:	f241 3187 	movw	r1, #4999	; 0x1387
 8001902:	428a      	cmp	r2, r1
 8001904:	d903      	bls.n	800190e <main+0x7d6>
						TIM2->ARR = 4999;	// Minimum 24 bpm
 8001906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800190c:	e010      	b.n	8001930 <main+0x7f8>
					else if(usbCmd->value < 331)
 800190e:	f5b2 7fa5 	cmp.w	r2, #330	; 0x14a
 8001912:	d805      	bhi.n	8001920 <main+0x7e8>
						TIM2->ARR = 331;   // Maksimum 360 bpm
 8001914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001918:	f240 114b 	movw	r1, #331	; 0x14b
 800191c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800191e:	e007      	b.n	8001930 <main+0x7f8>
						TIM2->ARR = usbCmd->value;
 8001920:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001924:	62ca      	str	r2, [r1, #44]	; 0x2c
 8001926:	e003      	b.n	8001930 <main+0x7f8>
					TIM2->CCR3 = 0;
 8001928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192c:	2100      	movs	r1, #0
 800192e:	63d1      	str	r1, [r2, #60]	; 0x3c
		usbCmd->updated = 0x00;
 8001930:	2200      	movs	r2, #0
 8001932:	711a      	strb	r2, [r3, #4]
 8001934:	e6dd      	b.n	80016f2 <main+0x5ba>
 8001936:	bf00      	nop
 8001938:	200005d0 	.word	0x200005d0
 800193c:	3f7f9938 	.word	0x3f7f9938
 8001940:	bf7f9938 	.word	0xbf7f9938
 8001944:	bf7f326f 	.word	0xbf7f326f
 8001948:	3f7f32c2 	.word	0x3f7f32c2
 800194c:	bf7f32c2 	.word	0xbf7f32c2
 8001950:	bf7e6583 	.word	0xbf7e6583
 8001954:	200006d4 	.word	0x200006d4
 8001958:	3d55e41d 	.word	0x3d55e41d
 800195c:	3d2f4cf5 	.word	0x3d2f4cf5
 8001960:	bfbd6a0d 	.word	0xbfbd6a0d
 8001964:	3f304d22 	.word	0x3f304d22
 8001968:	bf9b3d6d 	.word	0xbf9b3d6d
 800196c:	3ec49c31 	.word	0x3ec49c31
 8001970:	3e2128cd 	.word	0x3e2128cd
 8001974:	3df18efc 	.word	0x3df18efc
 8001978:	bf65cce9 	.word	0xbf65cce9
 800197c:	3f06f5b8 	.word	0x3f06f5b8
 8001980:	bf2c38c0 	.word	0xbf2c38c0
 8001984:	3e140108 	.word	0x3e140108
 8001988:	3ef5b05e 	.word	0x3ef5b05e
 800198c:	3eb26047 	.word	0x3eb26047
 8001990:	3ee7ff48 	.word	0x3ee7ff48
 8001994:	3eeec23a 	.word	0x3eeec23a
 8001998:	3ea86f80 	.word	0x3ea86f80
 800199c:	3d844688 	.word	0x3d844688
 80019a0:	200008b4 	.word	0x200008b4

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2100      	movs	r1, #0
 80019a8:	9100      	str	r1, [sp, #0]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_MspInit+0x34>)
 80019ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
 80019b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	9101      	str	r1, [sp, #4]
 80019c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	b002      	add	sp, #8
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80019de:	f002 f885 	bl	8003aec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <NMI_Handler+0x6>

080019e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <HardFault_Handler>

080019e6 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <MemManage_Handler>

080019e8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <BusFault_Handler>

080019ea <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <UsageFault_Handler>

080019ec <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	4770      	bx	lr

080019f0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f0:	4770      	bx	lr

080019f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 fbbc 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bd08      	pop	{r3, pc}
	...

080019fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001a00:	f002 f992 	bl	8003d28 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a06:	f002 f98f 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a0a:	bd08      	pop	{r3, pc}
 8001a0c:	200013d0 	.word	0x200013d0
 8001a10:	20001418 	.word	0x20001418

08001a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <USART1_IRQHandler+0xc>)
 8001a18:	f003 f868 	bl	8004aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a1c:	bd08      	pop	{r3, pc}
 8001a1e:	bf00      	nop
 8001a20:	20001568 	.word	0x20001568

08001a24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <DMA2_Stream2_IRQHandler+0xc>)
 8001a28:	f000 fdbc 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a2c:	bd08      	pop	{r3, pc}
 8001a2e:	bf00      	nop
 8001a30:	20001508 	.word	0x20001508

08001a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <OTG_FS_IRQHandler+0xc>)
 8001a38:	f001 f93c 	bl	8002cb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a3c:	bd08      	pop	{r3, pc}
 8001a3e:	bf00      	nop
 8001a40:	20001f4c 	.word	0x20001f4c

08001a44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a46:	4802      	ldr	r0, [pc, #8]	; (8001a50 <DMA2_Stream7_IRQHandler+0xc>)
 8001a48:	f000 fdac 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a4c:	bd08      	pop	{r3, pc}
 8001a4e:	bf00      	nop
 8001a50:	200014a8 	.word	0x200014a8

08001a54 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a54:	2001      	movs	r0, #1
 8001a56:	4770      	bx	lr

08001a58 <_kill>:

int _kill(int pid, int sig)
{
 8001a58:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a5a:	f005 f991 	bl	8006d80 <__errno>
 8001a5e:	2316      	movs	r3, #22
 8001a60:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295
 8001a66:	bd08      	pop	{r3, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6e:	f7ff fff3 	bl	8001a58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0xa>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	460c      	mov	r4, r1
 8001a78:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	42b5      	cmp	r5, r6
 8001a7e:	da07      	bge.n	8001a90 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001a80:	f3af 8000 	nop.w
 8001a84:	4621      	mov	r1, r4
 8001a86:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	e7f5      	b.n	8001a7c <_read+0x8>
	}

return len;
}
 8001a90:	4630      	mov	r0, r6
 8001a92:	bd70      	pop	{r4, r5, r6, pc}

08001a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	460c      	mov	r4, r1
 8001a98:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2500      	movs	r5, #0
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	da05      	bge.n	8001aac <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001aa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001aa4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	3501      	adds	r5, #1
 8001aaa:	e7f7      	b.n	8001a9c <_write+0x8>
	}
	return len;
}
 8001aac:	4630      	mov	r0, r6
 8001aae:	bd70      	pop	{r4, r5, r6, pc}

08001ab0 <_close>:

int _close(int file)
{
	return -1;
}
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001abc:	2000      	movs	r0, #0
 8001abe:	4770      	bx	lr

08001ac0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	4770      	bx	lr

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <_sbrk+0x38>)
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <_sbrk+0x40>)
 8001ad2:	6800      	ldr	r0, [r0, #0]
 8001ad4:	b140      	cbz	r0, 8001ae8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <_sbrk+0x40>)
 8001ad8:	6800      	ldr	r0, [r0, #0]
 8001ada:	4403      	add	r3, r0
 8001adc:	1a52      	subs	r2, r2, r1
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d806      	bhi.n	8001af0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <_sbrk+0x40>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001ae6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ae8:	4807      	ldr	r0, [pc, #28]	; (8001b08 <_sbrk+0x40>)
 8001aea:	4c08      	ldr	r4, [pc, #32]	; (8001b0c <_sbrk+0x44>)
 8001aec:	6004      	str	r4, [r0, #0]
 8001aee:	e7f2      	b.n	8001ad6 <_sbrk+0xe>
    errno = ENOMEM;
 8001af0:	f005 f946 	bl	8006d80 <__errno>
 8001af4:	230c      	movs	r3, #12
 8001af6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	e7f3      	b.n	8001ae6 <_sbrk+0x1e>
 8001afe:	bf00      	nop
 8001b00:	20010000 	.word	0x20010000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000378 	.word	0x20000378
 8001b0c:	20002368 	.word	0x20002368

08001b10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <SystemInit+0x10>)
 8001b12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <MX_TIM9_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001b24:	b500      	push	{lr}
 8001b26:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <MX_TIM9_Init+0x50>)
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <MX_TIM9_Init+0x54>)
 8001b36:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 83;
 8001b38:	2253      	movs	r2, #83	; 0x53
 8001b3a:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 1999;
 8001b3e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b42:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b44:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001b4a:	f002 f9f9 	bl	8003f40 <HAL_TIM_Base_Init>
 8001b4e:	b950      	cbnz	r0, 8001b66 <MX_TIM9_Init+0x42>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001b56:	4669      	mov	r1, sp
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_TIM9_Init+0x50>)
 8001b5a:	f002 faf5 	bl	8004148 <HAL_TIM_ConfigClockSource>
 8001b5e:	b928      	cbnz	r0, 8001b6c <MX_TIM9_Init+0x48>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001b60:	b005      	add	sp, #20
 8001b62:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b66:	f7ff fa8b 	bl	8001080 <Error_Handler>
 8001b6a:	e7f1      	b.n	8001b50 <MX_TIM9_Init+0x2c>
    Error_Handler();
 8001b6c:	f7ff fa88 	bl	8001080 <Error_Handler>
}
 8001b70:	e7f6      	b.n	8001b60 <MX_TIM9_Init+0x3c>
 8001b72:	bf00      	nop
 8001b74:	20001418 	.word	0x20001418
 8001b78:	40014000 	.word	0x40014000

08001b7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b7c:	b500      	push	{lr}
 8001b7e:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 8001b80:	6803      	ldr	r3, [r0, #0]
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <HAL_TIM_Base_MspInit+0xa8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00b      	beq.n	8001ba0 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8c:	d01c      	beq.n	8001bc8 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8001b8e:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_TIM_Base_MspInit+0xac>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d026      	beq.n	8001be2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8001b94:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <HAL_TIM_Base_MspInit+0xb0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d030      	beq.n	8001bfc <HAL_TIM_Base_MspInit+0x80>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001b9a:	b005      	add	sp, #20
 8001b9c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	9200      	str	r2, [sp, #0]
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_TIM_Base_MspInit+0xb4>)
 8001ba6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ba8:	f041 0101 	orr.w	r1, r1, #1
 8001bac:	6459      	str	r1, [r3, #68]	; 0x44
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2018      	movs	r0, #24
 8001bbc:	f000 fb10 	bl	80021e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001bc0:	2018      	movs	r0, #24
 8001bc2:	f000 fb41 	bl	8002248 <HAL_NVIC_EnableIRQ>
 8001bc6:	e7e8      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_TIM_Base_MspInit+0xb4>)
 8001bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	9b01      	ldr	r3, [sp, #4]
 8001be0:	e7db      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_TIM_Base_MspInit+0xb4>)
 8001be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bea:	f042 0202 	orr.w	r2, r2, #2
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	9b02      	ldr	r3, [sp, #8]
 8001bfa:	e7ce      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	9203      	str	r2, [sp, #12]
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_TIM_Base_MspInit+0xb4>)
 8001c02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c04:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001c08:	6459      	str	r1, [r3, #68]	; 0x44
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	9303      	str	r3, [sp, #12]
 8001c12:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8001c14:	2102      	movs	r1, #2
 8001c16:	2018      	movs	r0, #24
 8001c18:	f000 fae2 	bl	80021e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c1c:	2018      	movs	r0, #24
 8001c1e:	f000 fb13 	bl	8002248 <HAL_NVIC_EnableIRQ>
}
 8001c22:	e7ba      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x1e>
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b500      	push	{lr}
 8001c36:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	9304      	str	r3, [sp, #16]
 8001c3e:	9305      	str	r3, [sp, #20]
 8001c40:	9306      	str	r3, [sp, #24]
 8001c42:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8001c44:	6803      	ldr	r3, [r0, #0]
 8001c46:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <HAL_TIM_MspPostInit+0xc8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d008      	beq.n	8001c5e <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_MspPostInit+0x60>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8001c52:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_TIM_MspPostInit+0xcc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d037      	beq.n	8001cc8 <HAL_TIM_MspPostInit+0x94>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c58:	b009      	add	sp, #36	; 0x24
 8001c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8001c66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c68:	f041 0101 	orr.w	r1, r1, #1
 8001c6c:	6311      	str	r1, [r2, #48]	; 0x30
 8001c6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c70:	f002 0201 	and.w	r2, r2, #1
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWR_PWM_A_Pin|PWR_PWM_B_Pin;
 8001c78:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c7c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2202      	movs	r2, #2
 8001c80:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	a903      	add	r1, sp, #12
 8001c8c:	481d      	ldr	r0, [pc, #116]	; (8001d04 <HAL_TIM_MspPostInit+0xd0>)
 8001c8e:	f000 fd77 	bl	8002780 <HAL_GPIO_Init>
 8001c92:	e7e1      	b.n	8001c58 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_TIM_MspPostInit+0xd4>)
 8001c9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c9c:	f041 0102 	orr.w	r1, r1, #2
 8001ca0:	6311      	str	r1, [r2, #48]	; 0x30
 8001ca2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca4:	f002 0202 	and.w	r2, r2, #2
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	a903      	add	r1, sp, #12
 8001cc0:	4812      	ldr	r0, [pc, #72]	; (8001d0c <HAL_TIM_MspPostInit+0xd8>)
 8001cc2:	f000 fd5d 	bl	8002780 <HAL_GPIO_Init>
 8001cc6:	e7c7      	b.n	8001c58 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8001cd0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cd2:	f041 0102 	orr.w	r1, r1, #2
 8001cd6:	6311      	str	r1, [r2, #48]	; 0x30
 8001cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cda:	f002 0202 	and.w	r2, r2, #2
 8001cde:	9202      	str	r2, [sp, #8]
 8001ce0:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = ECG_PWM_OUT_Pin;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cee:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(ECG_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	a903      	add	r1, sp, #12
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <HAL_TIM_MspPostInit+0xd8>)
 8001cf4:	f000 fd44 	bl	8002780 <HAL_GPIO_Init>
}
 8001cf8:	e7ae      	b.n	8001c58 <HAL_TIM_MspPostInit+0x24>
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400

08001d10 <MX_TIM1_Init>:
{
 8001d10:	b510      	push	{r4, lr}
 8001d12:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d14:	2400      	movs	r4, #0
 8001d16:	9412      	str	r4, [sp, #72]	; 0x48
 8001d18:	9413      	str	r4, [sp, #76]	; 0x4c
 8001d1a:	9414      	str	r4, [sp, #80]	; 0x50
 8001d1c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	9410      	str	r4, [sp, #64]	; 0x40
 8001d20:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	9409      	str	r4, [sp, #36]	; 0x24
 8001d24:	940a      	str	r4, [sp, #40]	; 0x28
 8001d26:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d28:	940c      	str	r4, [sp, #48]	; 0x30
 8001d2a:	940d      	str	r4, [sp, #52]	; 0x34
 8001d2c:	940e      	str	r4, [sp, #56]	; 0x38
 8001d2e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d30:	2220      	movs	r2, #32
 8001d32:	4621      	mov	r1, r4
 8001d34:	a801      	add	r0, sp, #4
 8001d36:	f005 f84d 	bl	8006dd4 <memset>
  htim1.Instance = TIM1;
 8001d3a:	482e      	ldr	r0, [pc, #184]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <MX_TIM1_Init+0xe8>)
 8001d3e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001d40:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 416;
 8001d44:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001d48:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d4c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d52:	f002 f8f5 	bl	8003f40 <HAL_TIM_Base_Init>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d13a      	bne.n	8001dd0 <MX_TIM1_Init+0xc0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d60:	a912      	add	r1, sp, #72	; 0x48
 8001d62:	4824      	ldr	r0, [pc, #144]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001d64:	f002 f9f0 	bl	8004148 <HAL_TIM_ConfigClockSource>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d134      	bne.n	8001dd6 <MX_TIM1_Init+0xc6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d6c:	4821      	ldr	r0, [pc, #132]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001d6e:	f002 f913 	bl	8003f98 <HAL_TIM_PWM_Init>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d132      	bne.n	8001ddc <MX_TIM1_Init+0xcc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d7c:	a910      	add	r1, sp, #64	; 0x40
 8001d7e:	481d      	ldr	r0, [pc, #116]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001d80:	f002 fbf0 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d12c      	bne.n	8001de2 <MX_TIM1_Init+0xd2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2360      	movs	r3, #96	; 0x60
 8001d8a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 208;
 8001d8c:	23d0      	movs	r3, #208	; 0xd0
 8001d8e:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	2200      	movs	r2, #0
 8001d92:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d94:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d96:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d98:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9c:	a909      	add	r1, sp, #36	; 0x24
 8001d9e:	4815      	ldr	r0, [pc, #84]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001da0:	f002 f958 	bl	8004054 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	bb00      	cbnz	r0, 8001de8 <MX_TIM1_Init+0xd8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001daa:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dac:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 32;
 8001dae:	2220      	movs	r2, #32
 8001db0:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db2:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db8:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dba:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dbc:	a901      	add	r1, sp, #4
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001dc0:	f002 fc0c 	bl	80045dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc4:	b998      	cbnz	r0, 8001dee <MX_TIM1_Init+0xde>
  HAL_TIM_MspPostInit(&htim1);
 8001dc6:	480b      	ldr	r0, [pc, #44]	; (8001df4 <MX_TIM1_Init+0xe4>)
 8001dc8:	f7ff ff34 	bl	8001c34 <HAL_TIM_MspPostInit>
}
 8001dcc:	b016      	add	sp, #88	; 0x58
 8001dce:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001dd0:	f7ff f956 	bl	8001080 <Error_Handler>
 8001dd4:	e7c1      	b.n	8001d5a <MX_TIM1_Init+0x4a>
    Error_Handler();
 8001dd6:	f7ff f953 	bl	8001080 <Error_Handler>
 8001dda:	e7c7      	b.n	8001d6c <MX_TIM1_Init+0x5c>
    Error_Handler();
 8001ddc:	f7ff f950 	bl	8001080 <Error_Handler>
 8001de0:	e7c9      	b.n	8001d76 <MX_TIM1_Init+0x66>
    Error_Handler();
 8001de2:	f7ff f94d 	bl	8001080 <Error_Handler>
 8001de6:	e7cf      	b.n	8001d88 <MX_TIM1_Init+0x78>
    Error_Handler();
 8001de8:	f7ff f94a 	bl	8001080 <Error_Handler>
 8001dec:	e7db      	b.n	8001da6 <MX_TIM1_Init+0x96>
    Error_Handler();
 8001dee:	f7ff f947 	bl	8001080 <Error_Handler>
 8001df2:	e7e8      	b.n	8001dc6 <MX_TIM1_Init+0xb6>
 8001df4:	200013d0 	.word	0x200013d0
 8001df8:	40010000 	.word	0x40010000

08001dfc <MX_TIM2_Init>:
{
 8001dfc:	b500      	push	{lr}
 8001dfe:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e00:	2300      	movs	r3, #0
 8001e02:	930a      	str	r3, [sp, #40]	; 0x28
 8001e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e06:	930c      	str	r3, [sp, #48]	; 0x30
 8001e08:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	9308      	str	r3, [sp, #32]
 8001e0c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	9303      	str	r3, [sp, #12]
 8001e14:	9304      	str	r3, [sp, #16]
 8001e16:	9305      	str	r3, [sp, #20]
 8001e18:	9306      	str	r3, [sp, #24]
 8001e1a:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001e1c:	4823      	ldr	r0, [pc, #140]	; (8001eac <MX_TIM2_Init+0xb0>)
 8001e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e22:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 41999;
 8001e24:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001e28:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1999;
 8001e2c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e30:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e38:	f002 f882 	bl	8003f40 <HAL_TIM_Base_Init>
 8001e3c:	bb38      	cbnz	r0, 8001e8e <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e42:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e44:	a90a      	add	r1, sp, #40	; 0x28
 8001e46:	4819      	ldr	r0, [pc, #100]	; (8001eac <MX_TIM2_Init+0xb0>)
 8001e48:	f002 f97e 	bl	8004148 <HAL_TIM_ConfigClockSource>
 8001e4c:	bb10      	cbnz	r0, 8001e94 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e4e:	4817      	ldr	r0, [pc, #92]	; (8001eac <MX_TIM2_Init+0xb0>)
 8001e50:	f002 f8a2 	bl	8003f98 <HAL_TIM_PWM_Init>
 8001e54:	bb08      	cbnz	r0, 8001e9a <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5c:	a908      	add	r1, sp, #32
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <MX_TIM2_Init+0xb0>)
 8001e60:	f002 fb80 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001e64:	b9e0      	cbnz	r0, 8001ea0 <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e66:	2360      	movs	r3, #96	; 0x60
 8001e68:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 299;
 8001e6a:	f240 132b 	movw	r3, #299	; 0x12b
 8001e6e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e70:	2300      	movs	r3, #0
 8001e72:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e74:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e76:	2208      	movs	r2, #8
 8001e78:	a901      	add	r1, sp, #4
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <MX_TIM2_Init+0xb0>)
 8001e7c:	f002 f8ea 	bl	8004054 <HAL_TIM_PWM_ConfigChannel>
 8001e80:	b988      	cbnz	r0, 8001ea6 <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <MX_TIM2_Init+0xb0>)
 8001e84:	f7ff fed6 	bl	8001c34 <HAL_TIM_MspPostInit>
}
 8001e88:	b00f      	add	sp, #60	; 0x3c
 8001e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001e8e:	f7ff f8f7 	bl	8001080 <Error_Handler>
 8001e92:	e7d4      	b.n	8001e3e <MX_TIM2_Init+0x42>
    Error_Handler();
 8001e94:	f7ff f8f4 	bl	8001080 <Error_Handler>
 8001e98:	e7d9      	b.n	8001e4e <MX_TIM2_Init+0x52>
    Error_Handler();
 8001e9a:	f7ff f8f1 	bl	8001080 <Error_Handler>
 8001e9e:	e7da      	b.n	8001e56 <MX_TIM2_Init+0x5a>
    Error_Handler();
 8001ea0:	f7ff f8ee 	bl	8001080 <Error_Handler>
 8001ea4:	e7df      	b.n	8001e66 <MX_TIM2_Init+0x6a>
    Error_Handler();
 8001ea6:	f7ff f8eb 	bl	8001080 <Error_Handler>
 8001eaa:	e7ea      	b.n	8001e82 <MX_TIM2_Init+0x86>
 8001eac:	20001460 	.word	0x20001460

08001eb0 <MX_TIM3_Init>:
{
 8001eb0:	b500      	push	{lr}
 8001eb2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8001eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001eba:	930c      	str	r3, [sp, #48]	; 0x30
 8001ebc:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	9308      	str	r3, [sp, #32]
 8001ec0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	9304      	str	r3, [sp, #16]
 8001eca:	9305      	str	r3, [sp, #20]
 8001ecc:	9306      	str	r3, [sp, #24]
 8001ece:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8001ed0:	4820      	ldr	r0, [pc, #128]	; (8001f54 <MX_TIM3_Init+0xa4>)
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <MX_TIM3_Init+0xa8>)
 8001ed4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8001ed6:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 255;
 8001eda:	22ff      	movs	r2, #255	; 0xff
 8001edc:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee4:	f002 f82c 	bl	8003f40 <HAL_TIM_Base_Init>
 8001ee8:	bb28      	cbnz	r0, 8001f36 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eee:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ef0:	a90a      	add	r1, sp, #40	; 0x28
 8001ef2:	4818      	ldr	r0, [pc, #96]	; (8001f54 <MX_TIM3_Init+0xa4>)
 8001ef4:	f002 f928 	bl	8004148 <HAL_TIM_ConfigClockSource>
 8001ef8:	bb00      	cbnz	r0, 8001f3c <MX_TIM3_Init+0x8c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001efa:	4816      	ldr	r0, [pc, #88]	; (8001f54 <MX_TIM3_Init+0xa4>)
 8001efc:	f002 f84c 	bl	8003f98 <HAL_TIM_PWM_Init>
 8001f00:	b9f8      	cbnz	r0, 8001f42 <MX_TIM3_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f08:	a908      	add	r1, sp, #32
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <MX_TIM3_Init+0xa4>)
 8001f0c:	f002 fb2a 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	b9d0      	cbnz	r0, 8001f48 <MX_TIM3_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f12:	2360      	movs	r3, #96	; 0x60
 8001f14:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1a:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f1e:	2208      	movs	r2, #8
 8001f20:	a901      	add	r1, sp, #4
 8001f22:	480c      	ldr	r0, [pc, #48]	; (8001f54 <MX_TIM3_Init+0xa4>)
 8001f24:	f002 f896 	bl	8004054 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	b988      	cbnz	r0, 8001f4e <MX_TIM3_Init+0x9e>
  HAL_TIM_MspPostInit(&htim3);
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <MX_TIM3_Init+0xa4>)
 8001f2c:	f7ff fe82 	bl	8001c34 <HAL_TIM_MspPostInit>
}
 8001f30:	b00f      	add	sp, #60	; 0x3c
 8001f32:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f36:	f7ff f8a3 	bl	8001080 <Error_Handler>
 8001f3a:	e7d6      	b.n	8001eea <MX_TIM3_Init+0x3a>
    Error_Handler();
 8001f3c:	f7ff f8a0 	bl	8001080 <Error_Handler>
 8001f40:	e7db      	b.n	8001efa <MX_TIM3_Init+0x4a>
    Error_Handler();
 8001f42:	f7ff f89d 	bl	8001080 <Error_Handler>
 8001f46:	e7dc      	b.n	8001f02 <MX_TIM3_Init+0x52>
    Error_Handler();
 8001f48:	f7ff f89a 	bl	8001080 <Error_Handler>
 8001f4c:	e7e1      	b.n	8001f12 <MX_TIM3_Init+0x62>
    Error_Handler();
 8001f4e:	f7ff f897 	bl	8001080 <Error_Handler>
 8001f52:	e7ea      	b.n	8001f2a <MX_TIM3_Init+0x7a>
 8001f54:	20001388 	.word	0x20001388
 8001f58:	40000400 	.word	0x40000400

08001f5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f5c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <MX_USART1_UART_Init+0x30>)
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_USART1_UART_Init+0x34>)
 8001f62:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 1000000;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART1_UART_Init+0x38>)
 8001f66:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001f6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f70:	60c2      	str	r2, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f72:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f74:	220c      	movs	r2, #12
 8001f76:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f78:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7c:	f002 fc56 	bl	800482c <HAL_UART_Init>
 8001f80:	b900      	cbnz	r0, 8001f84 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f82:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f84:	f7ff f87c 	bl	8001080 <Error_Handler>
}
 8001f88:	e7fb      	b.n	8001f82 <MX_USART1_UART_Init+0x26>
 8001f8a:	bf00      	nop
 8001f8c:	20001568 	.word	0x20001568
 8001f90:	40011000 	.word	0x40011000
 8001f94:	000f4240 	.word	0x000f4240

08001f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f98:	b530      	push	{r4, r5, lr}
 8001f9a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	9304      	str	r3, [sp, #16]
 8001fa2:	9305      	str	r3, [sp, #20]
 8001fa4:	9306      	str	r3, [sp, #24]
 8001fa6:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001fa8:	6802      	ldr	r2, [r0, #0]
 8001faa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fae:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fb6:	b009      	add	sp, #36	; 0x24
 8001fb8:	bd30      	pop	{r4, r5, pc}
 8001fba:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbc:	2500      	movs	r5, #0
 8001fbe:	9501      	str	r5, [sp, #4]
 8001fc0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
 8001fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fce:	f002 0210 	and.w	r2, r2, #16
 8001fd2:	9201      	str	r2, [sp, #4]
 8001fd4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	9502      	str	r5, [sp, #8]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	f042 0202 	orr.w	r2, r2, #2
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	a903      	add	r1, sp, #12
 8001ffe:	4822      	ldr	r0, [pc, #136]	; (8002088 <HAL_UART_MspInit+0xf0>)
 8002000:	f000 fbbe 	bl	8002780 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002004:	4821      	ldr	r0, [pc, #132]	; (800208c <HAL_UART_MspInit+0xf4>)
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_UART_MspInit+0xf8>)
 8002008:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800200a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800200e:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002010:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002012:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002018:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201a:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201c:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800201e:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002024:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002026:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002028:	f000 f9c4 	bl	80023b4 <HAL_DMA_Init>
 800202c:	bb28      	cbnz	r0, 800207a <HAL_UART_MspInit+0xe2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_UART_MspInit+0xf4>)
 8002030:	63a3      	str	r3, [r4, #56]	; 0x38
 8002032:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002034:	4817      	ldr	r0, [pc, #92]	; (8002094 <HAL_UART_MspInit+0xfc>)
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_UART_MspInit+0x100>)
 8002038:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800203a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800203e:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204c:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204e:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002052:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002054:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002058:	6202      	str	r2, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800205c:	f000 f9aa 	bl	80023b4 <HAL_DMA_Init>
 8002060:	b970      	cbnz	r0, 8002080 <HAL_UART_MspInit+0xe8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_UART_MspInit+0xfc>)
 8002064:	6363      	str	r3, [r4, #52]	; 0x34
 8002066:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2101      	movs	r1, #1
 800206c:	2025      	movs	r0, #37	; 0x25
 800206e:	f000 f8b7 	bl	80021e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002072:	2025      	movs	r0, #37	; 0x25
 8002074:	f000 f8e8 	bl	8002248 <HAL_NVIC_EnableIRQ>
}
 8002078:	e79d      	b.n	8001fb6 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 800207a:	f7ff f801 	bl	8001080 <Error_Handler>
 800207e:	e7d6      	b.n	800202e <HAL_UART_MspInit+0x96>
      Error_Handler();
 8002080:	f7fe fffe 	bl	8001080 <Error_Handler>
 8002084:	e7ed      	b.n	8002062 <HAL_UART_MspInit+0xca>
 8002086:	bf00      	nop
 8002088:	40020400 	.word	0x40020400
 800208c:	20001508 	.word	0x20001508
 8002090:	40026440 	.word	0x40026440
 8002094:	200014a8 	.word	0x200014a8
 8002098:	400264b8 	.word	0x400264b8

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020a2:	490e      	ldr	r1, [pc, #56]	; (80020dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b8:	4c0b      	ldr	r4, [pc, #44]	; (80020e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020c6:	f7ff fd23 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f004 fe5f 	bl	8006d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7ff f833 	bl	8001138 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80020e0:	08009bfc 	.word	0x08009bfc
  ldr r2, =_sbss
 80020e4:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80020e8:	20002364 	.word	0x20002364

080020ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC_IRQHandler>
	...

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b510      	push	{r4, lr}
 80020f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_InitTick+0x40>)
 80020f6:	7818      	ldrb	r0, [r3, #0]
 80020f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002100:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_InitTick+0x44>)
 8002102:	6810      	ldr	r0, [r2, #0]
 8002104:	fbb0 f0f3 	udiv	r0, r0, r3
 8002108:	f000 f8be 	bl	8002288 <HAL_SYSTICK_Config>
 800210c:	b968      	cbnz	r0, 800212a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	2c0f      	cmp	r4, #15
 8002110:	d901      	bls.n	8002116 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002112:	2001      	movs	r0, #1
 8002114:	e00a      	b.n	800212c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002116:	2200      	movs	r2, #0
 8002118:	4621      	mov	r1, r4
 800211a:	f04f 30ff 	mov.w	r0, #4294967295
 800211e:	f000 f85f 	bl	80021e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_InitTick+0x48>)
 8002124:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2000      	movs	r0, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800212a:	2001      	movs	r0, #1
}
 800212c:	bd10      	pop	{r4, pc}
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c
 8002134:	20000008 	.word	0x20000008
 8002138:	20000010 	.word	0x20000010

0800213c <HAL_Init>:
{
 800213c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_Init+0x30>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800214e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002156:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f82f 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	200f      	movs	r0, #15
 8002160:	f7ff ffc6 	bl	80020f0 <HAL_InitTick>
  HAL_MspInit();
 8002164:	f7ff fc1e 	bl	80019a4 <HAL_MspInit>
}
 8002168:	2000      	movs	r0, #0
 800216a:	bd08      	pop	{r3, pc}
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_IncTick+0x10>)
 8002172:	6811      	ldr	r1, [r2, #0]
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_IncTick+0x14>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	440b      	add	r3, r1
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200015ac 	.word	0x200015ac
 8002184:	2000000c 	.word	0x2000000c

08002188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002188:	4b01      	ldr	r3, [pc, #4]	; (8002190 <HAL_GetTick+0x8>)
 800218a:	6818      	ldr	r0, [r3, #0]
}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200015ac 	.word	0x200015ac

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fff6 	bl	8002188 <HAL_GetTick>
 800219c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	f1b4 3fff 	cmp.w	r4, #4294967295
 80021a2:	d002      	beq.n	80021aa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_Delay+0x24>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	f7ff ffed 	bl	8002188 <HAL_GetTick>
 80021ae:	1b40      	subs	r0, r0, r5
 80021b0:	42a0      	cmp	r0, r4
 80021b2:	d3fa      	bcc.n	80021aa <HAL_Delay+0x16>
  {
  }
}
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
 80021b6:	bf00      	nop
 80021b8:	2000000c 	.word	0x2000000c

080021bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	0200      	lsls	r0, r0, #8
 80021ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ce:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021d8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_NVIC_SetPriority+0x60>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ea:	f1c3 0407 	rsb	r4, r3, #7
 80021ee:	2c04      	cmp	r4, #4
 80021f0:	bf28      	it	cs
 80021f2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f4:	1d1d      	adds	r5, r3, #4
 80021f6:	2d06      	cmp	r5, #6
 80021f8:	d918      	bls.n	800222c <HAL_NVIC_SetPriority+0x4c>
 80021fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 35ff 	mov.w	r5, #4294967295
 8002200:	fa05 f404 	lsl.w	r4, r5, r4
 8002204:	ea21 0104 	bic.w	r1, r1, r4
 8002208:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220a:	fa05 f303 	lsl.w	r3, r5, r3
 800220e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002212:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002214:	2800      	cmp	r0, #0
 8002216:	db0b      	blt.n	8002230 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	0109      	lsls	r1, r1, #4
 800221a:	b2c9      	uxtb	r1, r1
 800221c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002220:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002224:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002228:	bc30      	pop	{r4, r5}
 800222a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222c:	2300      	movs	r3, #0
 800222e:	e7e5      	b.n	80021fc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	f000 000f 	and.w	r0, r0, #15
 8002234:	0109      	lsls	r1, r1, #4
 8002236:	b2c9      	uxtb	r1, r1
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_NVIC_SetPriority+0x64>)
 800223a:	5419      	strb	r1, [r3, r0]
 800223c:	e7f4      	b.n	8002228 <HAL_NVIC_SetPriority+0x48>
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00
 8002244:	e000ed14 	.word	0xe000ed14

08002248 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002248:	2800      	cmp	r0, #0
 800224a:	db07      	blt.n	800225c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224c:	f000 021f 	and.w	r2, r0, #31
 8002250:	0940      	lsrs	r0, r0, #5
 8002252:	2301      	movs	r3, #1
 8002254:	4093      	lsls	r3, r2
 8002256:	4a02      	ldr	r2, [pc, #8]	; (8002260 <HAL_NVIC_EnableIRQ+0x18>)
 8002258:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002264:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002268:	4905      	ldr	r1, [pc, #20]	; (8002280 <HAL_NVIC_SystemReset+0x1c>)
 800226a:	68ca      	ldr	r2, [r1, #12]
 800226c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_NVIC_SystemReset+0x20>)
 8002272:	4313      	orrs	r3, r2
 8002274:	60cb      	str	r3, [r1, #12]
 8002276:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800227a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800227c:	e7fd      	b.n	800227a <HAL_NVIC_SystemReset+0x16>
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	05fa0004 	.word	0x05fa0004

08002288 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	3801      	subs	r0, #1
 800228a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800228e:	d20a      	bcs.n	80022a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_SYSTICK_Config+0x24>)
 8002292:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <HAL_SYSTICK_Config+0x28>)
 8002296:	21f0      	movs	r1, #240	; 0xf0
 8002298:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	2000      	movs	r0, #0
 800229e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b6:	6805      	ldr	r5, [r0, #0]
 80022b8:	682c      	ldr	r4, [r5, #0]
 80022ba:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80022be:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c0:	6804      	ldr	r4, [r0, #0]
 80022c2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c4:	6883      	ldr	r3, [r0, #8]
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d005      	beq.n	80022d6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80022ca:	6803      	ldr	r3, [r0, #0]
 80022cc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80022ce:	6803      	ldr	r3, [r0, #0]
 80022d0:	60da      	str	r2, [r3, #12]
  }
}
 80022d2:	bc30      	pop	{r4, r5}
 80022d4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80022d6:	6803      	ldr	r3, [r0, #0]
 80022d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80022da:	6803      	ldr	r3, [r0, #0]
 80022dc:	60d9      	str	r1, [r3, #12]
 80022de:	e7f8      	b.n	80022d2 <DMA_SetConfig+0x1e>

080022e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e2:	6803      	ldr	r3, [r0, #0]
 80022e4:	b2d9      	uxtb	r1, r3
 80022e6:	3910      	subs	r1, #16
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <DMA_CalcBaseAndBitshift+0x3c>)
 80022ea:	fba2 4201 	umull	r4, r2, r2, r1
 80022ee:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f0:	4c0b      	ldr	r4, [pc, #44]	; (8002320 <DMA_CalcBaseAndBitshift+0x40>)
 80022f2:	5ca2      	ldrb	r2, [r4, r2]
 80022f4:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f6:	295f      	cmp	r1, #95	; 0x5f
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	3304      	adds	r3, #4
 8002304:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002306:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800230c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	6583      	str	r3, [r0, #88]	; 0x58
 8002318:	e7f5      	b.n	8002306 <DMA_CalcBaseAndBitshift+0x26>
 800231a:	bf00      	nop
 800231c:	aaaaaaab 	.word	0xaaaaaaab
 8002320:	080097b8 	.word	0x080097b8

08002324 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002324:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002326:	6982      	ldr	r2, [r0, #24]
 8002328:	b992      	cbnz	r2, 8002350 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800232a:	2b01      	cmp	r3, #1
 800232c:	d00a      	beq.n	8002344 <DMA_CheckFifoParam+0x20>
 800232e:	2b02      	cmp	r3, #2
 8002330:	d002      	beq.n	8002338 <DMA_CheckFifoParam+0x14>
 8002332:	b10b      	cbz	r3, 8002338 <DMA_CheckFifoParam+0x14>
 8002334:	2000      	movs	r0, #0
 8002336:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002338:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800233a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800233e:	d128      	bne.n	8002392 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2000      	movs	r0, #0
 8002342:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002344:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800234a:	d024      	beq.n	8002396 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2000      	movs	r0, #0
 800234e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002350:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002354:	d009      	beq.n	800236a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002356:	2b02      	cmp	r3, #2
 8002358:	d925      	bls.n	80023a6 <DMA_CheckFifoParam+0x82>
 800235a:	2b03      	cmp	r3, #3
 800235c:	d125      	bne.n	80023aa <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002360:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002364:	d123      	bne.n	80023ae <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2000      	movs	r0, #0
 8002368:	4770      	bx	lr
    switch (tmp)
 800236a:	2b03      	cmp	r3, #3
 800236c:	d803      	bhi.n	8002376 <DMA_CheckFifoParam+0x52>
 800236e:	e8df f003 	tbb	[pc, r3]
 8002372:	0414      	.short	0x0414
 8002374:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002376:	2000      	movs	r0, #0
 8002378:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800237c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002380:	d10d      	bne.n	800239e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2000      	movs	r0, #0
 8002384:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002386:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002388:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238c:	d009      	beq.n	80023a2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2000      	movs	r0, #0
 8002390:	4770      	bx	lr
        status = HAL_ERROR;
 8002392:	2001      	movs	r0, #1
 8002394:	4770      	bx	lr
        status = HAL_ERROR;
 8002396:	2001      	movs	r0, #1
 8002398:	4770      	bx	lr
      status = HAL_ERROR;
 800239a:	2001      	movs	r0, #1
 800239c:	4770      	bx	lr
        status = HAL_ERROR;
 800239e:	2001      	movs	r0, #1
 80023a0:	4770      	bx	lr
        status = HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
 80023a4:	4770      	bx	lr
      status = HAL_ERROR;
 80023a6:	2001      	movs	r0, #1
 80023a8:	4770      	bx	lr
    switch (tmp)
 80023aa:	2000      	movs	r0, #0
 80023ac:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80023ae:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_DMA_Init>:
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fee6 	bl	8002188 <HAL_GetTick>
  if(hdma == NULL)
 80023bc:	2c00      	cmp	r4, #0
 80023be:	d05b      	beq.n	8002478 <HAL_DMA_Init+0xc4>
 80023c0:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80023c8:	2300      	movs	r3, #0
 80023ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f012 0f01 	tst.w	r2, #1
 80023e0:	d00a      	beq.n	80023f8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e2:	f7ff fed1 	bl	8002188 <HAL_GetTick>
 80023e6:	1b43      	subs	r3, r0, r5
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d9f5      	bls.n	80023d8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ec:	2320      	movs	r3, #32
 80023ee:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f0:	2003      	movs	r0, #3
 80023f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80023f8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023fa:	4820      	ldr	r0, [pc, #128]	; (800247c <HAL_DMA_Init+0xc8>)
 80023fc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	6861      	ldr	r1, [r4, #4]
 8002400:	68a2      	ldr	r2, [r4, #8]
 8002402:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002408:	6921      	ldr	r1, [r4, #16]
 800240a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	69a1      	ldr	r1, [r4, #24]
 8002412:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002418:	6a21      	ldr	r1, [r4, #32]
 800241a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002420:	2904      	cmp	r1, #4
 8002422:	d01e      	beq.n	8002462 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002424:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002426:	6826      	ldr	r6, [r4, #0]
 8002428:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800242a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800242e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002430:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002432:	2b04      	cmp	r3, #4
 8002434:	d107      	bne.n	8002446 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002438:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800243a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800243c:	b11b      	cbz	r3, 8002446 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ff70 	bl	8002324 <DMA_CheckFifoParam>
 8002444:	b990      	cbnz	r0, 800246c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002446:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff ff49 	bl	80022e0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002450:	233f      	movs	r3, #63	; 0x3f
 8002452:	4093      	lsls	r3, r2
 8002454:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	2000      	movs	r0, #0
 8002458:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800245a:	2301      	movs	r3, #1
 800245c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002460:	e7c9      	b.n	80023f6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002462:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002464:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002466:	4301      	orrs	r1, r0
 8002468:	430a      	orrs	r2, r1
 800246a:	e7db      	b.n	8002424 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800246c:	2340      	movs	r3, #64	; 0x40
 800246e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002470:	2001      	movs	r0, #1
 8002472:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002476:	e7be      	b.n	80023f6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
 800247a:	e7bc      	b.n	80023f6 <HAL_DMA_Init+0x42>
 800247c:	f010803f 	.word	0xf010803f

08002480 <HAL_DMA_Start_IT>:
{
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002486:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800248a:	2801      	cmp	r0, #1
 800248c:	d02b      	beq.n	80024e6 <HAL_DMA_Start_IT+0x66>
 800248e:	2001      	movs	r0, #1
 8002490:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002494:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8002498:	b2c0      	uxtb	r0, r0
 800249a:	2801      	cmp	r0, #1
 800249c:	d004      	beq.n	80024a8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800249e:	2300      	movs	r3, #0
 80024a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80024a4:	2002      	movs	r0, #2
}
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	2002      	movs	r0, #2
 80024aa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ae:	2000      	movs	r0, #0
 80024b0:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7ff fefe 	bl	80022b4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024ba:	233f      	movs	r3, #63	; 0x3f
 80024bc:	4093      	lsls	r3, r2
 80024be:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	f043 0316 	orr.w	r3, r3, #22
 80024c8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80024ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024cc:	b123      	cbz	r3, 80024d8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80024ce:	6822      	ldr	r2, [r4, #0]
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80024d8:	6822      	ldr	r2, [r4, #0]
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2000      	movs	r0, #0
 80024e4:	e7df      	b.n	80024a6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80024e6:	2002      	movs	r0, #2
 80024e8:	e7dd      	b.n	80024a6 <HAL_DMA_Start_IT+0x26>

080024ea <HAL_DMA_Abort>:
{
 80024ea:	b570      	push	{r4, r5, r6, lr}
 80024ec:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ee:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff fe4a 	bl	8002188 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d006      	beq.n	800250c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002502:	2300      	movs	r3, #0
 8002504:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002508:	2001      	movs	r0, #1
}
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	f023 0316 	bic.w	r3, r3, #22
 8002516:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	6953      	ldr	r3, [r2, #20]
 800251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002520:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002524:	b1e3      	cbz	r3, 8002560 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f023 0308 	bic.w	r3, r3, #8
 800252e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f013 0f01 	tst.w	r3, #1
 8002542:	d011      	beq.n	8002568 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002544:	f7ff fe20 	bl	8002188 <HAL_GetTick>
 8002548:	1b43      	subs	r3, r0, r5
 800254a:	2b05      	cmp	r3, #5
 800254c:	d9f5      	bls.n	800253a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800254e:	2320      	movs	r3, #32
 8002550:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002552:	2003      	movs	r0, #3
 8002554:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002558:	2300      	movs	r3, #0
 800255a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800255e:	e7d4      	b.n	800250a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002560:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1df      	bne.n	8002526 <HAL_DMA_Abort+0x3c>
 8002566:	e7e3      	b.n	8002530 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800256a:	233f      	movs	r3, #63	; 0x3f
 800256c:	4093      	lsls	r3, r2
 800256e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002570:	2301      	movs	r3, #1
 8002572:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002576:	2000      	movs	r0, #0
 8002578:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 800257c:	e7c5      	b.n	800250a <HAL_DMA_Abort+0x20>

0800257e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d003      	beq.n	8002590 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002590:	2305      	movs	r3, #5
 8002592:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002596:	6802      	ldr	r2, [r0, #0]
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80025a0:	2000      	movs	r0, #0
}
 80025a2:	4770      	bx	lr

080025a4 <HAL_DMA_IRQHandler>:
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <HAL_DMA_IRQHandler+0x1d4>)
 80025b0:	681d      	ldr	r5, [r3, #0]
 80025b2:	4b72      	ldr	r3, [pc, #456]	; (800277c <HAL_DMA_IRQHandler+0x1d8>)
 80025b4:	fba3 3505 	umull	r3, r5, r3, r5
 80025b8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80025bc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025be:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80025c0:	2308      	movs	r3, #8
 80025c2:	4093      	lsls	r3, r2
 80025c4:	4233      	tst	r3, r6
 80025c6:	d010      	beq.n	80025ea <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025c8:	6803      	ldr	r3, [r0, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f012 0f04 	tst.w	r2, #4
 80025d0:	d00b      	beq.n	80025ea <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f022 0204 	bic.w	r2, r2, #4
 80025d8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025da:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80025dc:	2308      	movs	r3, #8
 80025de:	4093      	lsls	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80025ec:	2301      	movs	r3, #1
 80025ee:	4093      	lsls	r3, r2
 80025f0:	4233      	tst	r3, r6
 80025f2:	d009      	beq.n	8002608 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6952      	ldr	r2, [r2, #20]
 80025f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025fc:	d004      	beq.n	8002608 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025fe:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002600:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800260a:	2304      	movs	r3, #4
 800260c:	4093      	lsls	r3, r2
 800260e:	4233      	tst	r3, r6
 8002610:	d009      	beq.n	8002626 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	f012 0f02 	tst.w	r2, #2
 800261a:	d004      	beq.n	8002626 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800261c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800261e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002626:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002628:	2310      	movs	r3, #16
 800262a:	4093      	lsls	r3, r2
 800262c:	4233      	tst	r3, r6
 800262e:	d024      	beq.n	800267a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002630:	6822      	ldr	r2, [r4, #0]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	f012 0f08 	tst.w	r2, #8
 8002638:	d01f      	beq.n	800267a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800263a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002644:	d00d      	beq.n	8002662 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800264c:	d104      	bne.n	8002658 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800264e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002650:	b19b      	cbz	r3, 800267a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002652:	4620      	mov	r0, r4
 8002654:	4798      	blx	r3
 8002656:	e010      	b.n	800267a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002658:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800265a:	b173      	cbz	r3, 800267a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800265c:	4620      	mov	r0, r4
 800265e:	4798      	blx	r3
 8002660:	e00b      	b.n	800267a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002668:	d103      	bne.n	8002672 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002674:	b10b      	cbz	r3, 800267a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002676:	4620      	mov	r0, r4
 8002678:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800267c:	2320      	movs	r3, #32
 800267e:	4093      	lsls	r3, r2
 8002680:	4233      	tst	r3, r6
 8002682:	d055      	beq.n	8002730 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	f012 0f10 	tst.w	r2, #16
 800268c:	d050      	beq.n	8002730 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800268e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002690:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b05      	cmp	r3, #5
 8002698:	d00e      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80026a2:	d033      	beq.n	800270c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80026aa:	d12a      	bne.n	8002702 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80026ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d03e      	beq.n	8002730 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80026b2:	4620      	mov	r0, r4
 80026b4:	4798      	blx	r3
 80026b6:	e03b      	b.n	8002730 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	f023 0316 	bic.w	r3, r3, #22
 80026c0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	6953      	ldr	r3, [r2, #20]
 80026c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ca:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026ce:	b1a3      	cbz	r3, 80026fa <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	6813      	ldr	r3, [r2, #0]
 80026d4:	f023 0308 	bic.w	r3, r3, #8
 80026d8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80026dc:	233f      	movs	r3, #63	; 0x3f
 80026de:	4093      	lsls	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80026e8:	2300      	movs	r3, #0
 80026ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80026ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03f      	beq.n	8002774 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80026f4:	4620      	mov	r0, r4
 80026f6:	4798      	blx	r3
        return;
 80026f8:	e03c      	b.n	8002774 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e7      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x12c>
 8002700:	e7eb      	b.n	80026da <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002704:	b1a3      	cbz	r3, 8002730 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002706:	4620      	mov	r0, r4
 8002708:	4798      	blx	r3
 800270a:	e011      	b.n	8002730 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002712:	d109      	bne.n	8002728 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f022 0210 	bic.w	r2, r2, #16
 800271a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800271c:	2301      	movs	r3, #1
 800271e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002722:	2300      	movs	r3, #0
 8002724:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800272a:	b10b      	cbz	r3, 8002730 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800272c:	4620      	mov	r0, r4
 800272e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002730:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002732:	b1fb      	cbz	r3, 8002774 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002734:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002736:	f013 0f01 	tst.w	r3, #1
 800273a:	d017      	beq.n	800276c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800273c:	2305      	movs	r3, #5
 800273e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	3301      	adds	r3, #1
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	42ab      	cmp	r3, r5
 8002754:	d804      	bhi.n	8002760 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f013 0f01 	tst.w	r3, #1
 800275e:	d1f5      	bne.n	800274c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8002760:	2301      	movs	r3, #1
 8002762:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002766:	2300      	movs	r3, #0
 8002768:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800276c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800276e:	b10b      	cbz	r3, 8002774 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002770:	4620      	mov	r0, r4
 8002772:	4798      	blx	r3
}
 8002774:	b003      	add	sp, #12
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002778:	20000008 	.word	0x20000008
 800277c:	1b4e81b5 	.word	0x1b4e81b5

08002780 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002780:	2300      	movs	r3, #0
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f200 80cb 	bhi.w	800291e <HAL_GPIO_Init+0x19e>
{
 8002788:	b4f0      	push	{r4, r5, r6, r7}
 800278a:	b082      	sub	sp, #8
 800278c:	e05d      	b.n	800284a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002790:	005f      	lsls	r7, r3, #1
 8002792:	2403      	movs	r4, #3
 8002794:	40bc      	lsls	r4, r7
 8002796:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279a:	68cc      	ldr	r4, [r1, #12]
 800279c:	40bc      	lsls	r4, r7
 800279e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80027a0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a8:	684c      	ldr	r4, [r1, #4]
 80027aa:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80027b2:	6042      	str	r2, [r0, #4]
 80027b4:	e057      	b.n	8002866 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b6:	08dc      	lsrs	r4, r3, #3
 80027b8:	3408      	adds	r4, #8
 80027ba:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	f003 0207 	and.w	r2, r3, #7
 80027c2:	0096      	lsls	r6, r2, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	40b2      	lsls	r2, r6
 80027c8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	690a      	ldr	r2, [r1, #16]
 80027ce:	40b2      	lsls	r2, r6
 80027d0:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80027d6:	e05a      	b.n	800288e <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d8:	2204      	movs	r2, #4
 80027da:	e000      	b.n	80027de <HAL_GPIO_Init+0x5e>
 80027dc:	2200      	movs	r2, #0
 80027de:	40b2      	lsls	r2, r6
 80027e0:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e2:	3402      	adds	r4, #2
 80027e4:	4e4e      	ldr	r6, [pc, #312]	; (8002920 <HAL_GPIO_Init+0x1a0>)
 80027e6:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ea:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <HAL_GPIO_Init+0x1a4>)
 80027ec:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	43ea      	mvns	r2, r5
 80027f0:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f4:	684f      	ldr	r7, [r1, #4]
 80027f6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80027fa:	d001      	beq.n	8002800 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 80027fc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002800:	4c48      	ldr	r4, [pc, #288]	; (8002924 <HAL_GPIO_Init+0x1a4>)
 8002802:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002804:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002806:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280a:	684f      	ldr	r7, [r1, #4]
 800280c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002810:	d001      	beq.n	8002816 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8002812:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002816:	4c43      	ldr	r4, [pc, #268]	; (8002924 <HAL_GPIO_Init+0x1a4>)
 8002818:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800281c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002820:	684f      	ldr	r7, [r1, #4]
 8002822:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002826:	d001      	beq.n	800282c <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8002828:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800282c:	4c3d      	ldr	r4, [pc, #244]	; (8002924 <HAL_GPIO_Init+0x1a4>)
 800282e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002830:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002832:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	684e      	ldr	r6, [r1, #4]
 8002836:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800283a:	d001      	beq.n	8002840 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800283c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002840:	4c38      	ldr	r4, [pc, #224]	; (8002924 <HAL_GPIO_Init+0x1a4>)
 8002842:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002844:	3301      	adds	r3, #1
 8002846:	2b0f      	cmp	r3, #15
 8002848:	d866      	bhi.n	8002918 <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 800284a:	2201      	movs	r2, #1
 800284c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	680c      	ldr	r4, [r1, #0]
 8002850:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002854:	ea32 0404 	bics.w	r4, r2, r4
 8002858:	d1f4      	bne.n	8002844 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	684c      	ldr	r4, [r1, #4]
 800285c:	f004 0403 	and.w	r4, r4, #3
 8002860:	3c01      	subs	r4, #1
 8002862:	2c01      	cmp	r4, #1
 8002864:	d993      	bls.n	800278e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002866:	684a      	ldr	r2, [r1, #4]
 8002868:	f002 0203 	and.w	r2, r2, #3
 800286c:	2a03      	cmp	r2, #3
 800286e:	d009      	beq.n	8002884 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8002870:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002872:	005e      	lsls	r6, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	40b2      	lsls	r2, r6
 8002878:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800287c:	688a      	ldr	r2, [r1, #8]
 800287e:	40b2      	lsls	r2, r6
 8002880:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002882:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	684a      	ldr	r2, [r1, #4]
 8002886:	f002 0203 	and.w	r2, r2, #3
 800288a:	2a02      	cmp	r2, #2
 800288c:	d093      	beq.n	80027b6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800288e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002890:	005e      	lsls	r6, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	40b2      	lsls	r2, r6
 8002896:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800289a:	684a      	ldr	r2, [r1, #4]
 800289c:	f002 0203 	and.w	r2, r2, #3
 80028a0:	40b2      	lsls	r2, r6
 80028a2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80028a4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a6:	684a      	ldr	r2, [r1, #4]
 80028a8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80028ac:	d0ca      	beq.n	8002844 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2200      	movs	r2, #0
 80028b0:	9201      	str	r2, [sp, #4]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_GPIO_Init+0x1a8>)
 80028b4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80028b6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80028ba:	6454      	str	r4, [r2, #68]	; 0x44
 80028bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80028c2:	9201      	str	r2, [sp, #4]
 80028c4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	089c      	lsrs	r4, r3, #2
 80028c8:	1ca6      	adds	r6, r4, #2
 80028ca:	4a15      	ldr	r2, [pc, #84]	; (8002920 <HAL_GPIO_Init+0x1a0>)
 80028cc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	0096      	lsls	r6, r2, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	40b2      	lsls	r2, r6
 80028da:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028de:	4a13      	ldr	r2, [pc, #76]	; (800292c <HAL_GPIO_Init+0x1ac>)
 80028e0:	4290      	cmp	r0, r2
 80028e2:	f43f af7b 	beq.w	80027dc <HAL_GPIO_Init+0x5c>
 80028e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d00e      	beq.n	800290c <HAL_GPIO_Init+0x18c>
 80028ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f2:	4290      	cmp	r0, r2
 80028f4:	d00c      	beq.n	8002910 <HAL_GPIO_Init+0x190>
 80028f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fa:	4290      	cmp	r0, r2
 80028fc:	d00a      	beq.n	8002914 <HAL_GPIO_Init+0x194>
 80028fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002902:	4290      	cmp	r0, r2
 8002904:	f43f af68 	beq.w	80027d8 <HAL_GPIO_Init+0x58>
 8002908:	2207      	movs	r2, #7
 800290a:	e768      	b.n	80027de <HAL_GPIO_Init+0x5e>
 800290c:	2201      	movs	r2, #1
 800290e:	e766      	b.n	80027de <HAL_GPIO_Init+0x5e>
 8002910:	2202      	movs	r2, #2
 8002912:	e764      	b.n	80027de <HAL_GPIO_Init+0x5e>
 8002914:	2203      	movs	r2, #3
 8002916:	e762      	b.n	80027de <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8002918:	b002      	add	sp, #8
 800291a:	bcf0      	pop	{r4, r5, r6, r7}
 800291c:	4770      	bx	lr
 800291e:	4770      	bx	lr
 8002920:	40013800 	.word	0x40013800
 8002924:	40013c00 	.word	0x40013c00
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000

08002930 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002934:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002936:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800293a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800293e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002946:	429a      	cmp	r2, r3
 8002948:	d855      	bhi.n	80029f6 <PCD_WriteEmptyTxFifo+0xc6>
 800294a:	4607      	mov	r7, r0
 800294c:	460c      	mov	r4, r1
 800294e:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002950:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002952:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8002956:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800295a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800295c:	429a      	cmp	r2, r3
 800295e:	d300      	bcc.n	8002962 <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 8002960:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002962:	f102 0a03 	add.w	sl, r2, #3
 8002966:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800296a:	e015      	b.n	8002998 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800296c:	f106 0a03 	add.w	sl, r6, #3
 8002970:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002974:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002978:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800297c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800297e:	7c3b      	ldrb	r3, [r7, #16]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	b2b3      	uxth	r3, r6
 8002984:	b2e2      	uxtb	r2, r4
 8002986:	4640      	mov	r0, r8
 8002988:	f002 fdfa 	bl	8005580 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800298c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800298e:	4433      	add	r3, r6
 8002990:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8002992:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002994:	441e      	add	r6, r3
 8002996:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002998:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 800299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4553      	cmp	r3, sl
 80029a6:	d312      	bcc.n	80029ce <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029a8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80029ac:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80029b0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80029b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029b4:	4299      	cmp	r1, r3
 80029b6:	d20a      	bcs.n	80029ce <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029b8:	b14b      	cbz	r3, 80029ce <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 80029ba:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80029bc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80029c0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80029c4:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80029c6:	429e      	cmp	r6, r3
 80029c8:	d3d0      	bcc.n	800296c <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 80029ca:	461e      	mov	r6, r3
 80029cc:	e7ce      	b.n	800296c <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029ce:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80029d2:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80029d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	429a      	cmp	r2, r3
 80029dc:	d80f      	bhi.n	80029fe <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029de:	f004 040f 	and.w	r4, r4, #15
 80029e2:	2301      	movs	r3, #1
 80029e4:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029e6:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 80029ea:	ea24 0403 	bic.w	r4, r4, r3
 80029ee:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 80029f2:	2000      	movs	r0, #0
 80029f4:	e000      	b.n	80029f8 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 80029f6:	2001      	movs	r0, #1
}
 80029f8:	b002      	add	sp, #8
 80029fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 80029fe:	2000      	movs	r0, #0
 8002a00:	e7fa      	b.n	80029f8 <PCD_WriteEmptyTxFifo+0xc8>

08002a02 <HAL_PCD_Init>:
{
 8002a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a04:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002a06:	2800      	cmp	r0, #0
 8002a08:	f000 808c 	beq.w	8002b24 <HAL_PCD_Init+0x122>
 8002a0c:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8002a0e:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a10:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8002a14:	b32b      	cbz	r3, 8002a62 <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a1e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002a28:	6828      	ldr	r0, [r5, #0]
 8002a2a:	f002 fb49 	bl	80050c0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a2e:	462c      	mov	r4, r5
 8002a30:	f854 7b10 	ldr.w	r7, [r4], #16
 8002a34:	466e      	mov	r6, sp
 8002a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a42:	e886 0003 	stmia.w	r6, {r0, r1}
 8002a46:	1d2b      	adds	r3, r5, #4
 8002a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f002 fa7a 	bl	8004f44 <USB_CoreInit>
 8002a50:	4604      	mov	r4, r0
 8002a52:	b158      	cbz	r0, 8002a6c <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a54:	2302      	movs	r3, #2
 8002a56:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8002a5a:	2401      	movs	r4, #1
}
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	b00b      	add	sp, #44	; 0x2c
 8002a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002a62:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8002a66:	f004 f835 	bl	8006ad4 <HAL_PCD_MspInit>
 8002a6a:	e7d4      	b.n	8002a16 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	6828      	ldr	r0, [r5, #0]
 8002a70:	f002 ff88 	bl	8005984 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a74:	4623      	mov	r3, r4
 8002a76:	e016      	b.n	8002aa6 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 8002a78:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002a7c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002a80:	2101      	movs	r1, #1
 8002a82:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002a86:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a8a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a94:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a96:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a98:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8002a9c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002aa0:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	6869      	ldr	r1, [r5, #4]
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	d3e5      	bcc.n	8002a78 <HAL_PCD_Init+0x76>
 8002aac:	e016      	b.n	8002adc <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 8002aae:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002ab2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002abc:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ac0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002acc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002ad0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002ad4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad8:	3401      	adds	r4, #1
 8002ada:	b2e4      	uxtb	r4, r4
 8002adc:	42a1      	cmp	r1, r4
 8002ade:	d8e6      	bhi.n	8002aae <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae0:	462c      	mov	r4, r5
 8002ae2:	f854 7b10 	ldr.w	r7, [r4], #16
 8002ae6:	466e      	mov	r6, sp
 8002ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002af4:	e886 0003 	stmia.w	r6, {r0, r1}
 8002af8:	1d2b      	adds	r3, r5, #4
 8002afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afc:	4638      	mov	r0, r7
 8002afe:	f002 fb1b 	bl	8005138 <USB_DevInit>
 8002b02:	4604      	mov	r4, r0
 8002b04:	b120      	cbz	r0, 8002b10 <HAL_PCD_Init+0x10e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b06:	2302      	movs	r3, #2
 8002b08:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8002b0c:	2401      	movs	r4, #1
 8002b0e:	e7a5      	b.n	8002a5c <HAL_PCD_Init+0x5a>
  hpcd->USB_Address = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b1c:	6828      	ldr	r0, [r5, #0]
 8002b1e:	f002 feee 	bl	80058fe <USB_DevDisconnect>
  return HAL_OK;
 8002b22:	e79b      	b.n	8002a5c <HAL_PCD_Init+0x5a>
    return HAL_ERROR;
 8002b24:	2401      	movs	r4, #1
 8002b26:	e799      	b.n	8002a5c <HAL_PCD_Init+0x5a>

08002b28 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b28:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8002b2a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d019      	beq.n	8002b66 <HAL_PCD_Start+0x3e>
{
 8002b32:	b510      	push	{r4, lr}
 8002b34:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002b36:	2301      	movs	r3, #1
 8002b38:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d009      	beq.n	8002b56 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8002b42:	6820      	ldr	r0, [r4, #0]
 8002b44:	f002 fab6 	bl	80050b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	f002 feca 	bl	80058e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002b54:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b56:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d0f2      	beq.n	8002b42 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b5c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	6393      	str	r3, [r2, #56]	; 0x38
 8002b64:	e7ed      	b.n	8002b42 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8002b66:	2002      	movs	r0, #2
}
 8002b68:	4770      	bx	lr
	...

08002b6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b72:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b74:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b76:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b80:	6921      	ldr	r1, [r4, #16]
 8002b82:	2901      	cmp	r1, #1
 8002b84:	d011      	beq.n	8002baa <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b86:	4935      	ldr	r1, [pc, #212]	; (8002c5c <PCD_EP_OutXfrComplete_int+0xf0>)
 8002b88:	428e      	cmp	r6, r1
 8002b8a:	d050      	beq.n	8002c2e <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b8c:	b93d      	cbnz	r5, 8002b9e <PCD_EP_OutXfrComplete_int+0x32>
 8002b8e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8002b92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d058      	beq.n	8002c50 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b9e:	b2e9      	uxtb	r1, r5
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f003 ffe3 	bl	8006b6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002baa:	f012 0f08 	tst.w	r2, #8
 8002bae:	d009      	beq.n	8002bc4 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb0:	492b      	ldr	r1, [pc, #172]	; (8002c60 <PCD_EP_OutXfrComplete_int+0xf4>)
 8002bb2:	428e      	cmp	r6, r1
 8002bb4:	d9f7      	bls.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
 8002bb6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002bba:	d0f4      	beq.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	e7f0      	b.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bc4:	f012 0f20 	tst.w	r2, #32
 8002bc8:	d002      	beq.n	8002bd0 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bca:	2220      	movs	r2, #32
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	e7ea      	b.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bd0:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002bd4:	d1e7      	bne.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd6:	4922      	ldr	r1, [pc, #136]	; (8002c60 <PCD_EP_OutXfrComplete_int+0xf4>)
 8002bd8:	428e      	cmp	r6, r1
 8002bda:	d906      	bls.n	8002bea <PCD_EP_OutXfrComplete_int+0x7e>
 8002bdc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002be0:	d003      	beq.n	8002bea <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	e7dd      	b.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8002bea:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002bee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002bf2:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bfc:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bfe:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c02:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002c06:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c10:	b915      	cbnz	r5, 8002c18 <PCD_EP_OutXfrComplete_int+0xac>
 8002c12:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002c16:	b123      	cbz	r3, 8002c22 <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c18:	b2e9      	uxtb	r1, r5
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f003 ffa6 	bl	8006b6c <HAL_PCD_DataOutStageCallback>
 8002c20:	e7c1      	b.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c22:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002c26:	2101      	movs	r1, #1
 8002c28:	f002 feee 	bl	8005a08 <USB_EP0_OutStart>
 8002c2c:	e7f4      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c2e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002c32:	d003      	beq.n	8002c3c <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	e7b4      	b.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c3c:	f012 0f20 	tst.w	r2, #32
 8002c40:	d001      	beq.n	8002c46 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c42:	2220      	movs	r2, #32
 8002c44:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c46:	b2e9      	uxtb	r1, r5
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f003 ff8f 	bl	8006b6c <HAL_PCD_DataOutStageCallback>
 8002c4e:	e7aa      	b.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c50:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002c54:	2100      	movs	r1, #0
 8002c56:	f002 fed7 	bl	8005a08 <USB_EP0_OutStart>
 8002c5a:	e7a0      	b.n	8002b9e <PCD_EP_OutXfrComplete_int+0x32>
 8002c5c:	4f54310a 	.word	0x4f54310a
 8002c60:	4f54300a 	.word	0x4f54300a

08002c64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c68:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c6a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002c70:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c74:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002c76:	4295      	cmp	r5, r2
 8002c78:	d907      	bls.n	8002c8a <PCD_EP_OutSetupPacket_int+0x26>
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002c82:	d002      	beq.n	8002c8a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c88:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f003 ff66 	bl	8006b5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002c92:	429d      	cmp	r5, r3
 8002c94:	d902      	bls.n	8002c9c <PCD_EP_OutSetupPacket_int+0x38>
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ca0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	6820      	ldr	r0, [r4, #0]
 8002ca8:	f002 feae 	bl	8005a08 <USB_EP0_OutStart>
 8002cac:	e7f6      	b.n	8002c9c <PCD_EP_OutSetupPacket_int+0x38>
 8002cae:	bf00      	nop
 8002cb0:	4f54300a 	.word	0x4f54300a

08002cb4 <HAL_PCD_IRQHandler>:
{
 8002cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbc:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f002 fe5c 	bl	800597c <USB_GetMode>
 8002cc4:	b110      	cbz	r0, 8002ccc <HAL_PCD_IRQHandler+0x18>
}
 8002cc6:	b003      	add	sp, #12
 8002cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ccc:	462f      	mov	r7, r5
 8002cce:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	f002 fe22 	bl	800591a <USB_ReadInterrupts>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d0f5      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cda:	6820      	ldr	r0, [r4, #0]
 8002cdc:	f002 fe1d 	bl	800591a <USB_ReadInterrupts>
 8002ce0:	f010 0f02 	tst.w	r0, #2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	6953      	ldr	r3, [r2, #20]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f002 fe12 	bl	800591a <USB_ReadInterrupts>
 8002cf6:	f010 0f10 	tst.w	r0, #16
 8002cfa:	d014      	beq.n	8002d26 <HAL_PCD_IRQHandler+0x72>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	6993      	ldr	r3, [r2, #24]
 8002d00:	f023 0310 	bic.w	r3, r3, #16
 8002d04:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002d06:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d0a:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d0e:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d068      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x134>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	f000 808d 	beq.w	8002e36 <HAL_PCD_IRQHandler+0x182>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	6993      	ldr	r3, [r2, #24]
 8002d20:	f043 0310 	orr.w	r3, r3, #16
 8002d24:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	f002 fdf7 	bl	800591a <USB_ReadInterrupts>
 8002d2c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002d30:	f040 8093 	bne.w	8002e5a <HAL_PCD_IRQHandler+0x1a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d34:	6820      	ldr	r0, [r4, #0]
 8002d36:	f002 fdf0 	bl	800591a <USB_ReadInterrupts>
 8002d3a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002d3e:	f040 80d7 	bne.w	8002ef0 <HAL_PCD_IRQHandler+0x23c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	f002 fde9 	bl	800591a <USB_ReadInterrupts>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f2c0 8143 	blt.w	8002fd4 <HAL_PCD_IRQHandler+0x320>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	f002 fde3 	bl	800591a <USB_ReadInterrupts>
 8002d54:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002d58:	d00a      	beq.n	8002d70 <HAL_PCD_IRQHandler+0xbc>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d5a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002d5e:	f013 0f01 	tst.w	r3, #1
 8002d62:	f040 8151 	bne.w	8003008 <HAL_PCD_IRQHandler+0x354>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	6953      	ldr	r3, [r2, #20]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	f002 fdd2 	bl	800591a <USB_ReadInterrupts>
 8002d76:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002d7a:	f040 8149 	bne.w	8003010 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d7e:	6820      	ldr	r0, [r4, #0]
 8002d80:	f002 fdcb 	bl	800591a <USB_ReadInterrupts>
 8002d84:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002d88:	f040 81a8 	bne.w	80030dc <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	f002 fdc4 	bl	800591a <USB_ReadInterrupts>
 8002d92:	f010 0f08 	tst.w	r0, #8
 8002d96:	f040 81b9 	bne.w	800310c <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	f002 fdbd 	bl	800591a <USB_ReadInterrupts>
 8002da0:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002da4:	f040 81bb 	bne.w	800311e <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	f002 fdb6 	bl	800591a <USB_ReadInterrupts>
 8002dae:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002db2:	f040 81be 	bne.w	8003132 <HAL_PCD_IRQHandler+0x47e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f002 fdaf 	bl	800591a <USB_ReadInterrupts>
 8002dbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002dc0:	f040 81c1 	bne.w	8003146 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	f002 fda8 	bl	800591a <USB_ReadInterrupts>
 8002dca:	f010 0f04 	tst.w	r0, #4
 8002dce:	f43f af7a 	beq.w	8002cc6 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dd6:	f015 0f04 	tst.w	r5, #4
 8002dda:	f040 81bd 	bne.w	8003158 <HAL_PCD_IRQHandler+0x4a4>
      hpcd->Instance->GOTGINT |= temp;
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	6853      	ldr	r3, [r2, #4]
 8002de2:	432b      	orrs	r3, r5
 8002de4:	6053      	str	r3, [r2, #4]
 8002de6:	e76e      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002de8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dec:	ea18 0f03 	tst.w	r8, r3
 8002df0:	d094      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x68>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002df2:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8002e00:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8002e04:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002e08:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f002 fcd7 	bl	80057c0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e12:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8002e16:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8002e1a:	445b      	add	r3, fp
 8002e1c:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e20:	9b01      	ldr	r3, [sp, #4]
 8002e22:	eba3 0309 	sub.w	r3, r3, r9
 8002e26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002e2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002e2e:	445b      	add	r3, fp
 8002e30:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8002e34:	e772      	b.n	8002d1c <HAL_PCD_IRQHandler+0x68>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e36:	2208      	movs	r2, #8
 8002e38:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f002 fcbf 	bl	80057c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e42:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002e46:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8002e4a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002e4e:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8002e52:	4443      	add	r3, r8
 8002e54:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8002e58:	e760      	b.n	8002d1c <HAL_PCD_IRQHandler+0x68>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	f002 fd61 	bl	8005922 <USB_ReadDevAllOutEpInterrupt>
 8002e60:	4680      	mov	r8, r0
      epnum = 0U;
 8002e62:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002e64:	e017      	b.n	8002e96 <HAL_PCD_IRQHandler+0x1e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e66:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e70:	4649      	mov	r1, r9
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7ff fe7a 	bl	8002b6c <PCD_EP_OutXfrComplete_int>
 8002e78:	e01d      	b.n	8002eb6 <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e7a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002e7e:	2208      	movs	r2, #8
 8002e80:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e84:	4649      	mov	r1, r9
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff feec 	bl	8002c64 <PCD_EP_OutSetupPacket_int>
 8002e8c:	e016      	b.n	8002ebc <HAL_PCD_IRQHandler+0x208>
        epnum++;
 8002e8e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002e92:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002e96:	f1b8 0f00 	cmp.w	r8, #0
 8002e9a:	f43f af4b 	beq.w	8002d34 <HAL_PCD_IRQHandler+0x80>
        if ((ep_intr & 0x1U) != 0U)
 8002e9e:	f018 0f01 	tst.w	r8, #1
 8002ea2:	d0f4      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x1da>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ea4:	fa5f f189 	uxtb.w	r1, r9
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	f002 fd4a 	bl	8005942 <USB_ReadDevOutEPInterrupt>
 8002eae:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002eb0:	f010 0f01 	tst.w	r0, #1
 8002eb4:	d1d7      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x1b2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eb6:	f01a 0f08 	tst.w	sl, #8
 8002eba:	d1de      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x1c6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ebc:	f01a 0f10 	tst.w	sl, #16
 8002ec0:	d004      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ec2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ecc:	f01a 0f20 	tst.w	sl, #32
 8002ed0:	d004      	beq.n	8002edc <HAL_PCD_IRQHandler+0x228>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002edc:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002ee0:	d0d5      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x1da>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ee2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eea:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002eee:	e7ce      	b.n	8002e8e <HAL_PCD_IRQHandler+0x1da>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	f002 fd1e 	bl	8005932 <USB_ReadDevAllInEpInterrupt>
 8002ef6:	4680      	mov	r8, r0
      epnum = 0U;
 8002ef8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002efa:	e02a      	b.n	8002f52 <HAL_PCD_IRQHandler+0x29e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002efc:	4659      	mov	r1, fp
 8002efe:	4620      	mov	r0, r4
 8002f00:	f003 fe40 	bl	8006b84 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f04:	f01a 0f08 	tst.w	sl, #8
 8002f08:	d004      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x260>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f0a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f0e:	2208      	movs	r2, #8
 8002f10:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f14:	f01a 0f10 	tst.w	sl, #16
 8002f18:	d004      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x270>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f1a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f1e:	2210      	movs	r2, #16
 8002f20:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f24:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8002f28:	d004      	beq.n	8002f34 <HAL_PCD_IRQHandler+0x280>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f2a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f34:	f01a 0f02 	tst.w	sl, #2
 8002f38:	d004      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x290>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f3a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f44:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8002f48:	d13f      	bne.n	8002fca <HAL_PCD_IRQHandler+0x316>
        epnum++;
 8002f4a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002f4e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002f52:	f1b8 0f00 	cmp.w	r8, #0
 8002f56:	f43f aef4 	beq.w	8002d42 <HAL_PCD_IRQHandler+0x8e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f5a:	f018 0f01 	tst.w	r8, #1
 8002f5e:	d0f4      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x296>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f60:	fa5f fb89 	uxtb.w	fp, r9
 8002f64:	4659      	mov	r1, fp
 8002f66:	6820      	ldr	r0, [r4, #0]
 8002f68:	f002 fcf4 	bl	8005954 <USB_ReadDevInEPInterrupt>
 8002f6c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f6e:	f010 0f01 	tst.w	r0, #1
 8002f72:	d0c7      	beq.n	8002f04 <HAL_PCD_IRQHandler+0x250>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f74:	f009 030f 	and.w	r3, r9, #15
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f7e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002f82:	ea23 0302 	bic.w	r3, r3, r2
 8002f86:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f8a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f8e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	428b      	cmp	r3, r1
 8002f96:	d1b1      	bne.n	8002efc <HAL_PCD_IRQHandler+0x248>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f98:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002fa0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fa4:	440a      	add	r2, r1
 8002fa6:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fa8:	f1b9 0f00 	cmp.w	r9, #0
 8002fac:	d1a6      	bne.n	8002efc <HAL_PCD_IRQHandler+0x248>
 8002fae:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002fb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d19f      	bne.n	8002efc <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fbc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	6820      	ldr	r0, [r4, #0]
 8002fc4:	f002 fd20 	bl	8005a08 <USB_EP0_OutStart>
 8002fc8:	e798      	b.n	8002efc <HAL_PCD_IRQHandler+0x248>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fca:	4649      	mov	r1, r9
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff fcaf 	bl	8002930 <PCD_WriteEmptyTxFifo>
 8002fd2:	e7ba      	b.n	8002f4a <HAL_PCD_IRQHandler+0x296>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd4:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002fe0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d008      	beq.n	8002ffa <HAL_PCD_IRQHandler+0x346>
        HAL_PCD_ResumeCallback(hpcd);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f003 fe07 	bl	8006bfc <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	6953      	ldr	r3, [r2, #20]
 8002ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff6:	6153      	str	r3, [r2, #20]
 8002ff8:	e6a9      	b.n	8002d4e <HAL_PCD_IRQHandler+0x9a>
        hpcd->LPM_State = LPM_L0;
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003000:	4620      	mov	r0, r4
 8003002:	f000 fa47 	bl	8003494 <HAL_PCDEx_LPM_Callback>
 8003006:	e7f2      	b.n	8002fee <HAL_PCD_IRQHandler+0x33a>
        HAL_PCD_SuspendCallback(hpcd);
 8003008:	4620      	mov	r0, r4
 800300a:	f003 fddf 	bl	8006bcc <HAL_PCD_SuspendCallback>
 800300e:	e6aa      	b.n	8002d66 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003010:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8003014:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003020:	2110      	movs	r1, #16
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	f002 f852 	bl	80050cc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	e020      	b.n	800306c <HAL_PCD_IRQHandler+0x3b8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800302a:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800302e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003032:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003036:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800303a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800303e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003042:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003046:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800304a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800304e:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003052:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003056:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800305a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800305e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003062:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003066:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	3601      	adds	r6, #1
 800306c:	6863      	ldr	r3, [r4, #4]
 800306e:	42b3      	cmp	r3, r6
 8003070:	d8db      	bhi.n	800302a <HAL_PCD_IRQHandler+0x376>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003072:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003076:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800307a:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800307e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003080:	b1eb      	cbz	r3, 80030be <HAL_PCD_IRQHandler+0x40a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003082:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8003086:	f043 030b 	orr.w	r3, r3, #11
 800308a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800308e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003092:	f043 030b 	orr.w	r3, r3, #11
 8003096:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800309a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800309e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030a2:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030a6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80030aa:	7c21      	ldrb	r1, [r4, #16]
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	f002 fcab 	bl	8005a08 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6953      	ldr	r3, [r2, #20]
 80030b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ba:	6153      	str	r3, [r2, #20]
 80030bc:	e65f      	b.n	8002d7e <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030be:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80030c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030ca:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80030d2:	f043 030b 	orr.w	r3, r3, #11
 80030d6:	f8c8 3010 	str.w	r3, [r8, #16]
 80030da:	e7de      	b.n	800309a <HAL_PCD_IRQHandler+0x3e6>
      (void)USB_ActivateSetup(hpcd->Instance);
 80030dc:	6820      	ldr	r0, [r4, #0]
 80030de:	f002 fc82 	bl	80059e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030e2:	6820      	ldr	r0, [r4, #0]
 80030e4:	f002 f8f4 	bl	80052d0 <USB_GetDevSpeed>
 80030e8:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	f000 fcd6 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 80030f0:	4601      	mov	r1, r0
 80030f2:	7b22      	ldrb	r2, [r4, #12]
 80030f4:	4628      	mov	r0, r5
 80030f6:	f001 ff6b 	bl	8004fd0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80030fa:	4620      	mov	r0, r4
 80030fc:	f003 fd53 	bl	8006ba6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	6953      	ldr	r3, [r2, #20]
 8003104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003108:	6153      	str	r3, [r2, #20]
 800310a:	e63f      	b.n	8002d8c <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_SOFCallback(hpcd);
 800310c:	4620      	mov	r0, r4
 800310e:	f003 fd44 	bl	8006b9a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	6953      	ldr	r3, [r2, #20]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	6153      	str	r3, [r2, #20]
 800311c:	e63d      	b.n	8002d9a <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800311e:	2100      	movs	r1, #0
 8003120:	4620      	mov	r0, r4
 8003122:	f003 fd77 	bl	8006c14 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	6953      	ldr	r3, [r2, #20]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	6153      	str	r3, [r2, #20]
 8003130:	e63a      	b.n	8002da8 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003132:	2100      	movs	r1, #0
 8003134:	4620      	mov	r0, r4
 8003136:	f003 fd67 	bl	8006c08 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	6953      	ldr	r3, [r2, #20]
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	6153      	str	r3, [r2, #20]
 8003144:	e637      	b.n	8002db6 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_ConnectCallback(hpcd);
 8003146:	4620      	mov	r0, r4
 8003148:	f003 fd6a 	bl	8006c20 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	6953      	ldr	r3, [r2, #20]
 8003150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003154:	6153      	str	r3, [r2, #20]
 8003156:	e635      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x110>
        HAL_PCD_DisconnectCallback(hpcd);
 8003158:	4620      	mov	r0, r4
 800315a:	f003 fd67 	bl	8006c2c <HAL_PCD_DisconnectCallback>
 800315e:	e63e      	b.n	8002dde <HAL_PCD_IRQHandler+0x12a>

08003160 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003160:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003164:	2b01      	cmp	r3, #1
 8003166:	d00d      	beq.n	8003184 <HAL_PCD_SetAddress+0x24>
{
 8003168:	b510      	push	{r4, lr}
 800316a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800316c:	2301      	movs	r3, #1
 800316e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003172:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003176:	6800      	ldr	r0, [r0, #0]
 8003178:	f002 fba3 	bl	80058c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800317c:	2000      	movs	r0, #0
 800317e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003182:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003184:	2002      	movs	r0, #2
}
 8003186:	4770      	bx	lr

08003188 <HAL_PCD_EP_Open>:
{
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	4607      	mov	r7, r0
 800318c:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800318e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003192:	d127      	bne.n	80031e4 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003194:	f001 050f 	and.w	r5, r1, #15
 8003198:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800319c:	00b6      	lsls	r6, r6, #2
 800319e:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 80031a2:	4406      	add	r6, r0
 80031a4:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 80031a6:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80031aa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80031ae:	2000      	movs	r0, #0
 80031b0:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b4:	f004 040f 	and.w	r4, r4, #15
 80031b8:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80031ba:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80031bc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80031be:	784a      	ldrb	r2, [r1, #1]
 80031c0:	b102      	cbz	r2, 80031c4 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 80031c2:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d01d      	beq.n	8003204 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 80031c8:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d01c      	beq.n	800320a <HAL_PCD_EP_Open+0x82>
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	f002 f88b 	bl	80052f2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031dc:	2000      	movs	r0, #0
 80031de:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 80031e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	f001 000f 	and.w	r0, r1, #15
 80031e8:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 80031ec:	0089      	lsls	r1, r1, #2
 80031ee:	3138      	adds	r1, #56	; 0x38
 80031f0:	4439      	add	r1, r7
 80031f2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80031f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80031f8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80031fc:	2501      	movs	r5, #1
 80031fe:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8003202:	e7d7      	b.n	80031b4 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	710b      	strb	r3, [r1, #4]
 8003208:	e7de      	b.n	80031c8 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 800320a:	2002      	movs	r0, #2
 800320c:	e7e9      	b.n	80031e2 <HAL_PCD_EP_Open+0x5a>

0800320e <HAL_PCD_EP_Close>:
{
 800320e:	b510      	push	{r4, lr}
 8003210:	4604      	mov	r4, r0
 8003212:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003214:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003218:	d120      	bne.n	800325c <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800321a:	f001 000f 	and.w	r0, r1, #15
 800321e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003228:	4423      	add	r3, r4
 800322a:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 800322c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003230:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003234:	2300      	movs	r3, #0
 8003236:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800323a:	f002 020f 	and.w	r2, r2, #15
 800323e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003240:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003244:	2b01      	cmp	r3, #1
 8003246:	d019      	beq.n	800327c <HAL_PCD_EP_Close+0x6e>
 8003248:	2301      	movs	r3, #1
 800324a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f002 f89a 	bl	8005388 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003254:	2000      	movs	r0, #0
 8003256:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800325a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325c:	f001 000f 	and.w	r0, r1, #15
 8003260:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3338      	adds	r3, #56	; 0x38
 8003268:	4423      	add	r3, r4
 800326a:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 800326c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003270:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003274:	2301      	movs	r3, #1
 8003276:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800327a:	e7de      	b.n	800323a <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800327c:	2002      	movs	r0, #2
 800327e:	e7ec      	b.n	800325a <HAL_PCD_EP_Close+0x4c>

08003280 <HAL_PCD_EP_Receive>:
{
 8003280:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003282:	f001 040f 	and.w	r4, r1, #15
 8003286:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800328a:	0089      	lsls	r1, r1, #2
 800328c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003290:	4401      	add	r1, r0
 8003292:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003294:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003298:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800329c:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 80032a0:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 80032aa:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ae:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80032b2:	6903      	ldr	r3, [r0, #16]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d006      	beq.n	80032c6 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b8:	b964      	cbnz	r4, 80032d4 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f002 f8d1 	bl	8005464 <USB_EP0StartXfer>
}
 80032c2:	2000      	movs	r0, #0
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80032c6:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80032ca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80032ce:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 80032d2:	e7f1      	b.n	80032b8 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	6800      	ldr	r0, [r0, #0]
 80032d8:	f002 f966 	bl	80055a8 <USB_EPStartXfer>
 80032dc:	e7f1      	b.n	80032c2 <HAL_PCD_EP_Receive+0x42>

080032de <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032de:	f001 010f 	and.w	r1, r1, #15
 80032e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80032e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80032ea:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80032ee:	4770      	bx	lr

080032f0 <HAL_PCD_EP_Transmit>:
{
 80032f0:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	f001 040f 	and.w	r4, r1, #15
 80032f6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80032fa:	0089      	lsls	r1, r1, #2
 80032fc:	3138      	adds	r1, #56	; 0x38
 80032fe:	4401      	add	r1, r0
 8003300:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003302:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003306:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800330a:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 800330c:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8003312:	2301      	movs	r3, #1
 8003314:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800331c:	6903      	ldr	r3, [r0, #16]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d006      	beq.n	8003330 <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003322:	b95c      	cbnz	r4, 800333c <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003324:	b2da      	uxtb	r2, r3
 8003326:	6800      	ldr	r0, [r0, #0]
 8003328:	f002 f89c 	bl	8005464 <USB_EP0StartXfer>
}
 800332c:	2000      	movs	r0, #0
 800332e:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003330:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003334:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003338:	64ea      	str	r2, [r5, #76]	; 0x4c
 800333a:	e7f2      	b.n	8003322 <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800333c:	b2da      	uxtb	r2, r3
 800333e:	6800      	ldr	r0, [r0, #0]
 8003340:	f002 f932 	bl	80055a8 <USB_EPStartXfer>
 8003344:	e7f2      	b.n	800332c <HAL_PCD_EP_Transmit+0x3c>

08003346 <HAL_PCD_EP_SetStall>:
{
 8003346:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003348:	f001 050f 	and.w	r5, r1, #15
 800334c:	6842      	ldr	r2, [r0, #4]
 800334e:	4295      	cmp	r5, r2
 8003350:	d839      	bhi.n	80033c6 <HAL_PCD_EP_SetStall+0x80>
 8003352:	4604      	mov	r4, r0
 8003354:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003356:	f011 0f80 	tst.w	r1, #128	; 0x80
 800335a:	d11f      	bne.n	800339c <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800335c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003360:	0089      	lsls	r1, r1, #2
 8003362:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003366:	4401      	add	r1, r0
 8003368:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800336a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800336e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003372:	2200      	movs	r2, #0
 8003374:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8003378:	2301      	movs	r3, #1
 800337a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337c:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800337e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003382:	2b01      	cmp	r3, #1
 8003384:	d021      	beq.n	80033ca <HAL_PCD_EP_SetStall+0x84>
 8003386:	2301      	movs	r3, #1
 8003388:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	f002 fa3d 	bl	800580c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003392:	b18d      	cbz	r5, 80033b8 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8003394:	2000      	movs	r0, #0
 8003396:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800339a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339c:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80033a0:	0089      	lsls	r1, r1, #2
 80033a2:	3138      	adds	r1, #56	; 0x38
 80033a4:	4401      	add	r1, r0
 80033a6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80033a8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80033ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033b6:	e7df      	b.n	8003378 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033b8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80033bc:	7c21      	ldrb	r1, [r4, #16]
 80033be:	6820      	ldr	r0, [r4, #0]
 80033c0:	f002 fb22 	bl	8005a08 <USB_EP0_OutStart>
 80033c4:	e7e6      	b.n	8003394 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	e7e7      	b.n	800339a <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80033ca:	2002      	movs	r0, #2
 80033cc:	e7e5      	b.n	800339a <HAL_PCD_EP_SetStall+0x54>

080033ce <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ce:	f001 030f 	and.w	r3, r1, #15
 80033d2:	6842      	ldr	r2, [r0, #4]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d831      	bhi.n	800343c <HAL_PCD_EP_ClrStall+0x6e>
{
 80033d8:	b510      	push	{r4, lr}
 80033da:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80033dc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033e0:	d11e      	bne.n	8003420 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80033e6:	0089      	lsls	r1, r1, #2
 80033e8:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80033ec:	4401      	add	r1, r0
 80033ee:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80033f0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80033f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80033f8:	2000      	movs	r0, #0
 80033fa:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 80033fe:	2200      	movs	r2, #0
 8003400:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003402:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003404:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003408:	2b01      	cmp	r3, #1
 800340a:	d019      	beq.n	8003440 <HAL_PCD_EP_ClrStall+0x72>
 800340c:	2301      	movs	r3, #1
 800340e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f002 fa27 	bl	8005866 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003418:	2000      	movs	r0, #0
 800341a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800341e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003420:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8003424:	0089      	lsls	r1, r1, #2
 8003426:	3138      	adds	r1, #56	; 0x38
 8003428:	4401      	add	r1, r0
 800342a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800342c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003430:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003434:	2001      	movs	r0, #1
 8003436:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 800343a:	e7e0      	b.n	80033fe <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
}
 800343e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003440:	2002      	movs	r0, #2
 8003442:	e7ec      	b.n	800341e <HAL_PCD_EP_ClrStall+0x50>

08003444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003444:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003446:	6804      	ldr	r4, [r0, #0]
 8003448:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800344a:	b919      	cbnz	r1, 8003454 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800344c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003450:	62a0      	str	r0, [r4, #40]	; 0x28
 8003452:	e018      	b.n	8003486 <HAL_PCDEx_SetTxFiFo+0x42>
 8003454:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003458:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800345c:	2300      	movs	r3, #0
 800345e:	1e69      	subs	r1, r5, #1
 8003460:	428b      	cmp	r3, r1
 8003462:	d209      	bcs.n	8003478 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003464:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003468:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800346c:	6849      	ldr	r1, [r1, #4]
 800346e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003472:	3301      	adds	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e7f2      	b.n	800345e <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003478:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800347c:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8003480:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003484:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8003486:	2000      	movs	r0, #0
 8003488:	bc30      	pop	{r4, r5}
 800348a:	4770      	bx	lr

0800348c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8003490:	2000      	movs	r0, #0
 8003492:	4770      	bx	lr

08003494 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003494:	4770      	bx	lr
	...

08003498 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003498:	2800      	cmp	r0, #0
 800349a:	f000 81df 	beq.w	800385c <HAL_RCC_OscConfig+0x3c4>
{
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a4:	6803      	ldr	r3, [r0, #0]
 80034a6:	f013 0f01 	tst.w	r3, #1
 80034aa:	d03b      	beq.n	8003524 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ac:	4ba6      	ldr	r3, [pc, #664]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d02c      	beq.n	8003512 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b8:	4ba3      	ldr	r3, [pc, #652]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d021      	beq.n	8003508 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	6863      	ldr	r3, [r4, #4]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d04f      	beq.n	800356c <HAL_RCC_OscConfig+0xd4>
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d0:	d052      	beq.n	8003578 <HAL_RCC_OscConfig+0xe0>
 80034d2:	4b9d      	ldr	r3, [pc, #628]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	6863      	ldr	r3, [r4, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d050      	beq.n	800358c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fe4d 	bl	8002188 <HAL_GetTick>
 80034ee:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f0:	4b95      	ldr	r3, [pc, #596]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034f8:	d114      	bne.n	8003524 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fa:	f7fe fe45 	bl	8002188 <HAL_GetTick>
 80034fe:	1b40      	subs	r0, r0, r5
 8003500:	2864      	cmp	r0, #100	; 0x64
 8003502:	d9f5      	bls.n	80034f0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003504:	2003      	movs	r0, #3
 8003506:	e1b0      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003510:	d0d8      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003512:	4b8d      	ldr	r3, [pc, #564]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800351a:	d003      	beq.n	8003524 <HAL_RCC_OscConfig+0x8c>
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 819e 	beq.w	8003860 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f013 0f02 	tst.w	r3, #2
 800352a:	d054      	beq.n	80035d6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352c:	4b86      	ldr	r3, [pc, #536]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f013 0f0c 	tst.w	r3, #12
 8003534:	d03e      	beq.n	80035b4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003536:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d033      	beq.n	80035aa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d067      	beq.n	8003618 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b80      	ldr	r3, [pc, #512]	; (800374c <HAL_RCC_OscConfig+0x2b4>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe fe1b 	bl	8002188 <HAL_GetTick>
 8003552:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f013 0f02 	tst.w	r3, #2
 800355c:	d153      	bne.n	8003606 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe fe13 	bl	8002188 <HAL_GetTick>
 8003562:	1b40      	subs	r0, r0, r5
 8003564:	2802      	cmp	r0, #2
 8003566:	d9f5      	bls.n	8003554 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003568:	2003      	movs	r0, #3
 800356a:	e17e      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	4a76      	ldr	r2, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e7b5      	b.n	80034e4 <HAL_RCC_OscConfig+0x4c>
 8003578:	4b73      	ldr	r3, [pc, #460]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e7ab      	b.n	80034e4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800358c:	f7fe fdfc 	bl	8002188 <HAL_GetTick>
 8003590:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b6d      	ldr	r3, [pc, #436]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800359a:	d0c3      	beq.n	8003524 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fdf4 	bl	8002188 <HAL_GetTick>
 80035a0:	1b40      	subs	r0, r0, r5
 80035a2:	2864      	cmp	r0, #100	; 0x64
 80035a4:	d9f5      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80035a6:	2003      	movs	r0, #3
 80035a8:	e15f      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80035b2:	d1c6      	bne.n	8003542 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b4:	4b64      	ldr	r3, [pc, #400]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f013 0f02 	tst.w	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_OscConfig+0x12e>
 80035be:	68e3      	ldr	r3, [r4, #12]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 814f 	bne.w	8003864 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80035c8:	6813      	ldr	r3, [r2, #0]
 80035ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035ce:	6921      	ldr	r1, [r4, #16]
 80035d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035d4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	f013 0f08 	tst.w	r3, #8
 80035dc:	d040      	beq.n	8003660 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	6963      	ldr	r3, [r4, #20]
 80035e0:	b363      	cbz	r3, 800363c <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCC_OscConfig+0x2b8>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe fdce 	bl	8002188 <HAL_GetTick>
 80035ec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	4b56      	ldr	r3, [pc, #344]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	f013 0f02 	tst.w	r3, #2
 80035f6:	d133      	bne.n	8003660 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe fdc6 	bl	8002188 <HAL_GetTick>
 80035fc:	1b40      	subs	r0, r0, r5
 80035fe:	2802      	cmp	r0, #2
 8003600:	d9f5      	bls.n	80035ee <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8003602:	2003      	movs	r0, #3
 8003604:	e131      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4a50      	ldr	r2, [pc, #320]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800360e:	6921      	ldr	r1, [r4, #16]
 8003610:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e7de      	b.n	80035d6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8003618:	4b4c      	ldr	r3, [pc, #304]	; (800374c <HAL_RCC_OscConfig+0x2b4>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800361e:	f7fe fdb3 	bl	8002188 <HAL_GetTick>
 8003622:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003624:	4b48      	ldr	r3, [pc, #288]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f013 0f02 	tst.w	r3, #2
 800362c:	d0d3      	beq.n	80035d6 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe fdab 	bl	8002188 <HAL_GetTick>
 8003632:	1b40      	subs	r0, r0, r5
 8003634:	2802      	cmp	r0, #2
 8003636:	d9f5      	bls.n	8003624 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8003638:	2003      	movs	r0, #3
 800363a:	e116      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363c:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x2b8>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe fda1 	bl	8002188 <HAL_GetTick>
 8003646:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f013 0f02 	tst.w	r3, #2
 8003650:	d006      	beq.n	8003660 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003652:	f7fe fd99 	bl	8002188 <HAL_GetTick>
 8003656:	1b40      	subs	r0, r0, r5
 8003658:	2802      	cmp	r0, #2
 800365a:	d9f5      	bls.n	8003648 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 800365c:	2003      	movs	r0, #3
 800365e:	e104      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f013 0f04 	tst.w	r3, #4
 8003666:	d078      	beq.n	800375a <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003668:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003670:	d10d      	bne.n	800368e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800368a:	2501      	movs	r5, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800368e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCC_OscConfig+0x2bc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003698:	d021      	beq.n	80036de <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d032      	beq.n	8003706 <HAL_RCC_OscConfig+0x26e>
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d036      	beq.n	8003712 <HAL_RCC_OscConfig+0x27a>
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80036a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	671a      	str	r2, [r3, #112]	; 0x70
 80036ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b0:	f022 0204 	bic.w	r2, r2, #4
 80036b4:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b6:	68a3      	ldr	r3, [r4, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d034      	beq.n	8003726 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe fd64 	bl	8002188 <HAL_GetTick>
 80036c0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f013 0f02 	tst.w	r3, #2
 80036ca:	d145      	bne.n	8003758 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe fd5c 	bl	8002188 <HAL_GetTick>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d6:	4298      	cmp	r0, r3
 80036d8:	d9f3      	bls.n	80036c2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80036da:	2003      	movs	r0, #3
 80036dc:	e0c5      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_RCC_OscConfig+0x2bc>)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80036e8:	f7fe fd4e 	bl	8002188 <HAL_GetTick>
 80036ec:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_OscConfig+0x2bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036f6:	d1d0      	bne.n	800369a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f8:	f7fe fd46 	bl	8002188 <HAL_GetTick>
 80036fc:	1b80      	subs	r0, r0, r6
 80036fe:	2802      	cmp	r0, #2
 8003700:	d9f5      	bls.n	80036ee <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
 8003704:	e0b1      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003706:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003708:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e7d1      	b.n	80036b6 <HAL_RCC_OscConfig+0x21e>
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 8003714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003716:	f042 0204 	orr.w	r2, r2, #4
 800371a:	671a      	str	r2, [r3, #112]	; 0x70
 800371c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	671a      	str	r2, [r3, #112]	; 0x70
 8003724:	e7c7      	b.n	80036b6 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fe fd2f 	bl	8002188 <HAL_GetTick>
 800372a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x2b0>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	f013 0f02 	tst.w	r3, #2
 8003734:	d010      	beq.n	8003758 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe fd27 	bl	8002188 <HAL_GetTick>
 800373a:	1b80      	subs	r0, r0, r6
 800373c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003740:	4298      	cmp	r0, r3
 8003742:	d9f3      	bls.n	800372c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8003744:	2003      	movs	r0, #3
 8003746:	e090      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 8003748:	40023800 	.word	0x40023800
 800374c:	42470000 	.word	0x42470000
 8003750:	42470e80 	.word	0x42470e80
 8003754:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003758:	b9ed      	cbnz	r5, 8003796 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375a:	69a3      	ldr	r3, [r4, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8083 	beq.w	8003868 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003762:	4a49      	ldr	r2, [pc, #292]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	f002 020c 	and.w	r2, r2, #12
 800376a:	2a08      	cmp	r2, #8
 800376c:	d051      	beq.n	8003812 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	2b02      	cmp	r3, #2
 8003770:	d017      	beq.n	80037a2 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x3f4>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe fd06 	bl	8002188 <HAL_GetTick>
 800377c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b42      	ldr	r3, [pc, #264]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003786:	d042      	beq.n	800380e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fcfe 	bl	8002188 <HAL_GetTick>
 800378c:	1b00      	subs	r0, r0, r4
 800378e:	2802      	cmp	r0, #2
 8003790:	d9f5      	bls.n	800377e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003792:	2003      	movs	r0, #3
 8003794:	e069      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003796:	4a3c      	ldr	r2, [pc, #240]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 8003798:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800379a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379e:	6413      	str	r3, [r2, #64]	; 0x40
 80037a0:	e7db      	b.n	800375a <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_RCC_OscConfig+0x3f4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037a8:	f7fe fcee 	bl	8002188 <HAL_GetTick>
 80037ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037b6:	d006      	beq.n	80037c6 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fce6 	bl	8002188 <HAL_GetTick>
 80037bc:	1b40      	subs	r0, r0, r5
 80037be:	2802      	cmp	r0, #2
 80037c0:	d9f5      	bls.n	80037ae <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 80037c2:	2003      	movs	r0, #3
 80037c4:	e051      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c6:	69e3      	ldr	r3, [r4, #28]
 80037c8:	6a22      	ldr	r2, [r4, #32]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80037d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037d4:	0852      	lsrs	r2, r2, #1
 80037d6:	3a01      	subs	r2, #1
 80037d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 80037e4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x3f4>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037ec:	f7fe fccc 	bl	8002188 <HAL_GetTick>
 80037f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fcc4 	bl	8002188 <HAL_GetTick>
 8003800:	1b00      	subs	r0, r0, r4
 8003802:	2802      	cmp	r0, #2
 8003804:	d9f5      	bls.n	80037f2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003806:	2003      	movs	r0, #3
 8003808:	e02f      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800380a:	2000      	movs	r0, #0
 800380c:	e02d      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 800380e:	2000      	movs	r0, #0
 8003810:	e02b      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003812:	2b01      	cmp	r3, #1
 8003814:	d02b      	beq.n	800386e <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8003816:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <HAL_RCC_OscConfig+0x3f0>)
 8003818:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800381e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003820:	4291      	cmp	r1, r2
 8003822:	d126      	bne.n	8003872 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003828:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	428a      	cmp	r2, r1
 800382c:	d123      	bne.n	8003876 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003834:	401a      	ands	r2, r3
 8003836:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800383a:	d11e      	bne.n	800387a <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003840:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003846:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800384a:	d118      	bne.n	800387e <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800384c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003850:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003852:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003856:	d114      	bne.n	8003882 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003858:	2000      	movs	r0, #0
 800385a:	e006      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
}
 800385e:	4770      	bx	lr
        return HAL_ERROR;
 8003860:	2001      	movs	r0, #1
 8003862:	e002      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8003864:	2001      	movs	r0, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8003868:	2000      	movs	r0, #0
}
 800386a:	b002      	add	sp, #8
 800386c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800386e:	2001      	movs	r0, #1
 8003870:	e7fb      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8003872:	2001      	movs	r0, #1
 8003874:	e7f9      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 8003876:	2001      	movs	r0, #1
 8003878:	e7f7      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 800387a:	2001      	movs	r0, #1
 800387c:	e7f5      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 800387e:	2001      	movs	r0, #1
 8003880:	e7f3      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 8003882:	2001      	movs	r0, #1
 8003884:	e7f1      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	42470060 	.word	0x42470060

08003890 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003890:	4b01      	ldr	r3, [pc, #4]	; (8003898 <HAL_RCC_EnableCSS+0x8>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	4770      	bx	lr
 8003898:	4247004c 	.word	0x4247004c

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d03d      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x8a>
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d13d      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80038bc:	d012      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80038c6:	2300      	movs	r3, #0
 80038c8:	481a      	ldr	r0, [pc, #104]	; (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	fba1 0100 	umull	r0, r1, r1, r0
 80038ce:	f7fd f9c3 	bl	8000c58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80038de:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80038e2:	e023      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80038ec:	015c      	lsls	r4, r3, #5
 80038ee:	2500      	movs	r5, #0
 80038f0:	1ae4      	subs	r4, r4, r3
 80038f2:	f165 0500 	sbc.w	r5, r5, #0
 80038f6:	01ae      	lsls	r6, r5, #6
 80038f8:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80038fc:	01a7      	lsls	r7, r4, #6
 80038fe:	1b38      	subs	r0, r7, r4
 8003900:	eb66 0105 	sbc.w	r1, r6, r5
 8003904:	00cc      	lsls	r4, r1, #3
 8003906:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800390a:	00c5      	lsls	r5, r0, #3
 800390c:	18e8      	adds	r0, r5, r3
 800390e:	f144 0100 	adc.w	r1, r4, #0
 8003912:	028b      	lsls	r3, r1, #10
 8003914:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003918:	0284      	lsls	r4, r0, #10
 800391a:	4620      	mov	r0, r4
 800391c:	4619      	mov	r1, r3
 800391e:	2300      	movs	r3, #0
 8003920:	f7fd f99a 	bl	8000c58 <__aeabi_uldivmod>
 8003924:	e7d5      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8003926:	4803      	ldr	r0, [pc, #12]	; (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 8003928:	e000      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392a:	4803      	ldr	r0, [pc, #12]	; (8003938 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	017d7840 	.word	0x017d7840
 8003938:	00f42400 	.word	0x00f42400

0800393c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800393c:	2800      	cmp	r0, #0
 800393e:	f000 809b 	beq.w	8003a78 <HAL_RCC_ClockConfig+0x13c>
{
 8003942:	b570      	push	{r4, r5, r6, lr}
 8003944:	460d      	mov	r5, r1
 8003946:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	428b      	cmp	r3, r1
 8003952:	d208      	bcs.n	8003966 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003954:	b2cb      	uxtb	r3, r1
 8003956:	4a4c      	ldr	r2, [pc, #304]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 8003958:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	428b      	cmp	r3, r1
 8003962:	f040 808b 	bne.w	8003a7c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f013 0f02 	tst.w	r3, #2
 800396c:	d017      	beq.n	800399e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396e:	f013 0f04 	tst.w	r3, #4
 8003972:	d004      	beq.n	800397e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4a45      	ldr	r2, [pc, #276]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003976:	6893      	ldr	r3, [r2, #8]
 8003978:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	f013 0f08 	tst.w	r3, #8
 8003984:	d004      	beq.n	8003990 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003986:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003988:	6893      	ldr	r3, [r2, #8]
 800398a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003992:	6893      	ldr	r3, [r2, #8]
 8003994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003998:	68a1      	ldr	r1, [r4, #8]
 800399a:	430b      	orrs	r3, r1
 800399c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f013 0f01 	tst.w	r3, #1
 80039a4:	d032      	beq.n	8003a0c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d021      	beq.n	80039f0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ac:	1e9a      	subs	r2, r3, #2
 80039ae:	2a01      	cmp	r2, #1
 80039b0:	d925      	bls.n	80039fe <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4a36      	ldr	r2, [pc, #216]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	f012 0f02 	tst.w	r2, #2
 80039ba:	d061      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039bc:	4933      	ldr	r1, [pc, #204]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039be:	688a      	ldr	r2, [r1, #8]
 80039c0:	f022 0203 	bic.w	r2, r2, #3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80039c8:	f7fe fbde 	bl	8002188 <HAL_GetTick>
 80039cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039dc:	d016      	beq.n	8003a0c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039de:	f7fe fbd3 	bl	8002188 <HAL_GetTick>
 80039e2:	1b80      	subs	r0, r0, r6
 80039e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80039e8:	4298      	cmp	r0, r3
 80039ea:	d9f0      	bls.n	80039ce <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80039ec:	2003      	movs	r0, #3
 80039ee:	e042      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80039f8:	d1e0      	bne.n	80039bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80039fa:	2001      	movs	r0, #1
 80039fc:	e03b      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003a06:	d1d9      	bne.n	80039bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e034      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	42ab      	cmp	r3, r5
 8003a16:	d907      	bls.n	8003a28 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a18:	b2ea      	uxtb	r2, r5
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 8003a1c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	d12d      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f013 0f04 	tst.w	r3, #4
 8003a2e:	d006      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a32:	6893      	ldr	r3, [r2, #8]
 8003a34:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003a38:	68e1      	ldr	r1, [r4, #12]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	f013 0f08 	tst.w	r3, #8
 8003a44:	d007      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a48:	6893      	ldr	r3, [r2, #8]
 8003a4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a4e:	6921      	ldr	r1, [r4, #16]
 8003a50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a54:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a56:	f7ff ff21 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x154>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	40d8      	lsrs	r0, r3
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x158>)
 8003a6a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x15c>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	f7fe fb3e 	bl	80020f0 <HAL_InitTick>
  return HAL_OK;
 8003a74:	2000      	movs	r0, #0
}
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
}
 8003a7a:	4770      	bx	lr
      return HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e7fa      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
 8003a82:	e7f8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003a84:	2001      	movs	r0, #1
 8003a86:	e7f6      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
 8003a88:	40023c00 	.word	0x40023c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	080097a0 	.word	0x080097a0
 8003a94:	20000008 	.word	0x20000008
 8003a98:	20000010 	.word	0x20000010

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000008 	.word	0x20000008

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aaa:	f7ff fff7 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003ab6:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
}
 8003aba:	40d8      	lsrs	r0, r3
 8003abc:	bd08      	pop	{r3, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	080097b0 	.word	0x080097b0

08003ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aca:	f7ff ffe7 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003ad6:	4a03      	ldr	r2, [pc, #12]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
}
 8003ada:	40d8      	lsrs	r0, r3
 8003adc:	bd08      	pop	{r3, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	080097b0 	.word	0x080097b0

08003ae8 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003ae8:	4770      	bx	lr
	...

08003aec <HAL_RCC_NMI_IRQHandler>:
{
 8003aec:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_NMI_IRQHandler+0xe>
}
 8003af8:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8003afa:	f7ff fff5 	bl	8003ae8 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	701a      	strb	r2, [r3, #0]
}
 8003b04:	e7f8      	b.n	8003af8 <HAL_RCC_NMI_IRQHandler+0xc>
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	4002380e 	.word	0x4002380e

08003b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	6a03      	ldr	r3, [r0, #32]
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b20:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	680c      	ldr	r4, [r1, #0]
 8003b26:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2a:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2e:	688b      	ldr	r3, [r1, #8]
 8003b30:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b32:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <TIM_OC1_SetConfig+0x58>)
 8003b34:	42a0      	cmp	r0, r4
 8003b36:	d009      	beq.n	8003b4c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	4c0b      	ldr	r4, [pc, #44]	; (8003b68 <TIM_OC1_SetConfig+0x58>)
 8003b3a:	42a0      	cmp	r0, r4
 8003b3c:	d00d      	beq.n	8003b5a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b40:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	684a      	ldr	r2, [r1, #4]
 8003b44:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	6203      	str	r3, [r0, #32]
}
 8003b48:	bc70      	pop	{r4, r5, r6}
 8003b4a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b4c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003b50:	68ca      	ldr	r2, [r1, #12]
 8003b52:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	e7ee      	b.n	8003b38 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b5a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003b5e:	694a      	ldr	r2, [r1, #20]
 8003b60:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b62:	698e      	ldr	r6, [r1, #24]
 8003b64:	4316      	orrs	r6, r2
 8003b66:	e7ea      	b.n	8003b3e <TIM_OC1_SetConfig+0x2e>
 8003b68:	40010000 	.word	0x40010000

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b6e:	6a03      	ldr	r3, [r0, #32]
 8003b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b7c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b80:	680c      	ldr	r4, [r1, #0]
 8003b82:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b88:	688c      	ldr	r4, [r1, #8]
 8003b8a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b8e:	4c0f      	ldr	r4, [pc, #60]	; (8003bcc <TIM_OC3_SetConfig+0x60>)
 8003b90:	42a0      	cmp	r0, r4
 8003b92:	d009      	beq.n	8003ba8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b94:	4c0d      	ldr	r4, [pc, #52]	; (8003bcc <TIM_OC3_SetConfig+0x60>)
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	d00e      	beq.n	8003bb8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b9c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9e:	684a      	ldr	r2, [r1, #4]
 8003ba0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	6203      	str	r3, [r0, #32]
}
 8003ba4:	bc30      	pop	{r4, r5}
 8003ba6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bac:	68cc      	ldr	r4, [r1, #12]
 8003bae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb6:	e7ed      	b.n	8003b94 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bb8:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bbc:	694c      	ldr	r4, [r1, #20]
 8003bbe:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bc2:	698c      	ldr	r4, [r1, #24]
 8003bc4:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8003bc8:	e7e7      	b.n	8003b9a <TIM_OC3_SetConfig+0x2e>
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000

08003bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd2:	6a03      	ldr	r3, [r0, #32]
 8003bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	680d      	ldr	r5, [r1, #0]
 8003be6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bee:	688d      	ldr	r5, [r1, #8]
 8003bf0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf4:	4d07      	ldr	r5, [pc, #28]	; (8003c14 <TIM_OC4_SetConfig+0x44>)
 8003bf6:	42a8      	cmp	r0, r5
 8003bf8:	d006      	beq.n	8003c08 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bfe:	684a      	ldr	r2, [r1, #4]
 8003c00:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c02:	6203      	str	r3, [r0, #32]
}
 8003c04:	bc30      	pop	{r4, r5}
 8003c06:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c08:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c0c:	694d      	ldr	r5, [r1, #20]
 8003c0e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003c12:	e7f2      	b.n	8003bfa <TIM_OC4_SetConfig+0x2a>
 8003c14:	40010000 	.word	0x40010000

08003c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1c:	6a05      	ldr	r5, [r0, #32]
 8003c1e:	f025 0501 	bic.w	r5, r5, #1
 8003c22:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c24:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c26:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c2a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003c32:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c34:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c36:	6203      	str	r3, [r0, #32]
}
 8003c38:	bc30      	pop	{r4, r5}
 8003c3a:	4770      	bx	lr

08003c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3e:	6a05      	ldr	r5, [r0, #32]
 8003c40:	f025 0510 	bic.w	r5, r5, #16
 8003c44:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c46:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003c48:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c4e:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c56:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5a:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c5c:	6203      	str	r3, [r0, #32]
}
 8003c5e:	bc30      	pop	{r4, r5}
 8003c60:	4770      	bx	lr

08003c62 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c62:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6e:	6083      	str	r3, [r0, #8]
}
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d12f      	bne.n	8003cde <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c84:	6802      	ldr	r2, [r0, #0]
 8003c86:	68d3      	ldr	r3, [r2, #12]
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	6803      	ldr	r3, [r0, #0]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_TIM_Base_Start_IT+0x74>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d018      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x54>
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d015      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x54>
 8003c9c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d011      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x54>
 8003ca4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00d      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x54>
 8003cac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x54>
 8003cb4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d005      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	2a06      	cmp	r2, #6
 8003cd0:	d007      	beq.n	8003ce2 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cda:	2000      	movs	r0, #0
 8003cdc:	4770      	bx	lr
    return HAL_ERROR;
 8003cde:	2001      	movs	r0, #1
 8003ce0:	4770      	bx	lr
  return HAL_OK;
 8003ce2:	2000      	movs	r0, #0
}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40010000 	.word	0x40010000

08003cec <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cec:	6802      	ldr	r2, [r0, #0]
 8003cee:	68d3      	ldr	r3, [r2, #12]
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	6a19      	ldr	r1, [r3, #32]
 8003cfa:	f241 1211 	movw	r2, #4369	; 0x1111
 8003cfe:	4211      	tst	r1, r2
 8003d00:	d108      	bne.n	8003d14 <HAL_TIM_Base_Stop_IT+0x28>
 8003d02:	6a19      	ldr	r1, [r3, #32]
 8003d04:	f240 4244 	movw	r2, #1092	; 0x444
 8003d08:	4211      	tst	r1, r2
 8003d0a:	d103      	bne.n	8003d14 <HAL_TIM_Base_Stop_IT+0x28>
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_PWM_MspInit>:
}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_IC_CaptureCallback>:
}
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_TriggerCallback>:
}
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_IRQHandler>:
{
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d2c:	6803      	ldr	r3, [r0, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	f012 0f02 	tst.w	r2, #2
 8003d34:	d011      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	f012 0f02 	tst.w	r2, #2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d3e:	f06f 0202 	mvn.w	r2, #2
 8003d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d44:	2301      	movs	r3, #1
 8003d46:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d48:	6803      	ldr	r3, [r0, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f013 0f03 	tst.w	r3, #3
 8003d50:	d070      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	f7ff ffe6 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	2300      	movs	r3, #0
 8003d58:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	f012 0f04 	tst.w	r2, #4
 8003d62:	d012      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	f012 0f04 	tst.w	r2, #4
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d6c:	f06f 0204 	mvn.w	r2, #4
 8003d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d72:	2302      	movs	r3, #2
 8003d74:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003d7e:	d05f      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7ff ffce 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	2300      	movs	r3, #0
 8003d88:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	f012 0f08 	tst.w	r2, #8
 8003d92:	d012      	beq.n	8003dba <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	f012 0f08 	tst.w	r2, #8
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d9c:	f06f 0208 	mvn.w	r2, #8
 8003da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da2:	2304      	movs	r3, #4
 8003da4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f013 0f03 	tst.w	r3, #3
 8003dae:	d04e      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003db0:	4620      	mov	r0, r4
 8003db2:	f7ff ffb6 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	f012 0f10 	tst.w	r2, #16
 8003dc2:	d012      	beq.n	8003dea <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	f012 0f10 	tst.w	r2, #16
 8003dca:	d00e      	beq.n	8003dea <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dcc:	f06f 0210 	mvn.w	r2, #16
 8003dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003dde:	d03d      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff ff9e 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	2300      	movs	r3, #0
 8003de8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	f012 0f01 	tst.w	r2, #1
 8003df2:	d003      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	f012 0f01 	tst.w	r2, #1
 8003dfa:	d136      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e0c:	d134      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e16:	d003      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e1e:	d132      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	f012 0f20 	tst.w	r2, #32
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	f012 0f20 	tst.w	r2, #32
 8003e30:	d130      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
}
 8003e32:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e34:	f7ff ff74 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff ff73 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e3e:	e78a      	b.n	8003d56 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7ff ff6d 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7ff ff6c 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e4c:	e79b      	b.n	8003d86 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7ff ff66 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff ff65 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e5a:	e7ac      	b.n	8003db6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff ff5f 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff ff5e 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e68:	e7bd      	b.n	8003de6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e6a:	f06f 0201 	mvn.w	r2, #1
 8003e6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e70:	4620      	mov	r0, r4
 8003e72:	f7fd f8e5 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
 8003e76:	e7c1      	b.n	8003dfc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f000 fbd6 	bl	8004630 <HAL_TIMEx_BreakCallback>
 8003e84:	e7c3      	b.n	8003e0e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff ff4a 	bl	8003d26 <HAL_TIM_TriggerCallback>
 8003e92:	e7c5      	b.n	8003e20 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e94:	f06f 0220 	mvn.w	r2, #32
 8003e98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 fbc7 	bl	800462e <HAL_TIMEx_CommutCallback>
}
 8003ea0:	e7c7      	b.n	8003e32 <HAL_TIM_IRQHandler+0x10a>
	...

08003ea4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003ea4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea6:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0x98>)
 8003ea8:	4290      	cmp	r0, r2
 8003eaa:	d00e      	beq.n	8003eca <TIM_Base_SetConfig+0x26>
 8003eac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0x26>
 8003eb2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003eb6:	4290      	cmp	r0, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0x26>
 8003eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ebe:	4290      	cmp	r0, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0x26>
 8003ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ec6:	4290      	cmp	r0, r2
 8003ec8:	d103      	bne.n	8003ed2 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ece:	684a      	ldr	r2, [r1, #4]
 8003ed0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <TIM_Base_SetConfig+0x98>)
 8003ed4:	4290      	cmp	r0, r2
 8003ed6:	d01a      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003ed8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003ede:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ee2:	4290      	cmp	r0, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eea:	4290      	cmp	r0, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ef2:	4290      	cmp	r0, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003ef6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003efa:	4290      	cmp	r0, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f02:	4290      	cmp	r0, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0x6a>
 8003f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f0a:	4290      	cmp	r0, r2
 8003f0c:	d103      	bne.n	8003f16 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f12:	68ca      	ldr	r2, [r1, #12]
 8003f14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1a:	694a      	ldr	r2, [r1, #20]
 8003f1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	688b      	ldr	r3, [r1, #8]
 8003f22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f24:	680b      	ldr	r3, [r1, #0]
 8003f26:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <TIM_Base_SetConfig+0x98>)
 8003f2a:	4298      	cmp	r0, r3
 8003f2c:	d002      	beq.n	8003f34 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	6143      	str	r3, [r0, #20]
}
 8003f32:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	690b      	ldr	r3, [r1, #16]
 8003f36:	6303      	str	r3, [r0, #48]	; 0x30
 8003f38:	e7f9      	b.n	8003f2e <TIM_Base_SetConfig+0x8a>
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000

08003f40 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f40:	b340      	cbz	r0, 8003f94 <HAL_TIM_Base_Init+0x54>
{
 8003f42:	b510      	push	{r4, lr}
 8003f44:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f4a:	b1f3      	cbz	r3, 8003f8a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f52:	4621      	mov	r1, r4
 8003f54:	f851 0b04 	ldr.w	r0, [r1], #4
 8003f58:	f7ff ffa4 	bl	8003ea4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003f66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003f82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003f86:	2000      	movs	r0, #0
}
 8003f88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003f8e:	f7fd fdf5 	bl	8001b7c <HAL_TIM_Base_MspInit>
 8003f92:	e7db      	b.n	8003f4c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003f94:	2001      	movs	r0, #1
}
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003f98:	b340      	cbz	r0, 8003fec <HAL_TIM_PWM_Init+0x54>
{
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fa2:	b1f3      	cbz	r3, 8003fe2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003faa:	4621      	mov	r1, r4
 8003fac:	f851 0b04 	ldr.w	r0, [r1], #4
 8003fb0:	f7ff ff78 	bl	8003ea4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003fc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fde:	2000      	movs	r0, #0
}
 8003fe0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003fe6:	f7ff fe9a 	bl	8003d1e <HAL_TIM_PWM_MspInit>
 8003fea:	e7db      	b.n	8003fa4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003fec:	2001      	movs	r0, #1
}
 8003fee:	4770      	bx	lr

08003ff0 <TIM_OC2_SetConfig>:
{
 8003ff0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff2:	6a03      	ldr	r3, [r0, #32]
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003ffa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003ffc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004000:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	680d      	ldr	r5, [r1, #0]
 8004006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800400a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800400e:	688d      	ldr	r5, [r1, #8]
 8004010:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004014:	4d0e      	ldr	r5, [pc, #56]	; (8004050 <TIM_OC2_SetConfig+0x60>)
 8004016:	42a8      	cmp	r0, r5
 8004018:	d009      	beq.n	800402e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	4d0d      	ldr	r5, [pc, #52]	; (8004050 <TIM_OC2_SetConfig+0x60>)
 800401c:	42a8      	cmp	r0, r5
 800401e:	d00e      	beq.n	800403e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8004020:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004022:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004024:	684a      	ldr	r2, [r1, #4]
 8004026:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004028:	6203      	str	r3, [r0, #32]
}
 800402a:	bc30      	pop	{r4, r5}
 800402c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800402e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004032:	68cd      	ldr	r5, [r1, #12]
 8004034:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403c:	e7ed      	b.n	800401a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800403e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004042:	694d      	ldr	r5, [r1, #20]
 8004044:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004048:	698d      	ldr	r5, [r1, #24]
 800404a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800404e:	e7e7      	b.n	8004020 <TIM_OC2_SetConfig+0x30>
 8004050:	40010000 	.word	0x40010000

08004054 <HAL_TIM_PWM_ConfigChannel>:
{
 8004054:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004056:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d066      	beq.n	800412c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
 8004062:	2301      	movs	r3, #1
 8004064:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004068:	2a0c      	cmp	r2, #12
 800406a:	d85a      	bhi.n	8004122 <HAL_TIM_PWM_ConfigChannel+0xce>
 800406c:	e8df f002 	tbb	[pc, r2]
 8004070:	59595907 	.word	0x59595907
 8004074:	5959591b 	.word	0x5959591b
 8004078:	59595930 	.word	0x59595930
 800407c:	44          	.byte	0x44
 800407d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800407e:	6800      	ldr	r0, [r0, #0]
 8004080:	f7ff fd46 	bl	8003b10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	6993      	ldr	r3, [r2, #24]
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	6993      	ldr	r3, [r2, #24]
 8004092:	f023 0304 	bic.w	r3, r3, #4
 8004096:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	6993      	ldr	r3, [r2, #24]
 800409c:	6929      	ldr	r1, [r5, #16]
 800409e:	430b      	orrs	r3, r1
 80040a0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2000      	movs	r0, #0
      break;
 80040a4:	e03e      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a6:	6800      	ldr	r0, [r0, #0]
 80040a8:	f7ff ffa2 	bl	8003ff0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ac:	6822      	ldr	r2, [r4, #0]
 80040ae:	6993      	ldr	r3, [r2, #24]
 80040b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	6993      	ldr	r3, [r2, #24]
 80040ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	6993      	ldr	r3, [r2, #24]
 80040c4:	6929      	ldr	r1, [r5, #16]
 80040c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80040ca:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80040cc:	2000      	movs	r0, #0
      break;
 80040ce:	e029      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d0:	6800      	ldr	r0, [r0, #0]
 80040d2:	f7ff fd4b 	bl	8003b6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	69d3      	ldr	r3, [r2, #28]
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	69d3      	ldr	r3, [r2, #28]
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	69d3      	ldr	r3, [r2, #28]
 80040ee:	6929      	ldr	r1, [r5, #16]
 80040f0:	430b      	orrs	r3, r1
 80040f2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2000      	movs	r0, #0
      break;
 80040f6:	e015      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f8:	6800      	ldr	r0, [r0, #0]
 80040fa:	f7ff fd69 	bl	8003bd0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	69d3      	ldr	r3, [r2, #28]
 8004102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004106:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	69d3      	ldr	r3, [r2, #28]
 800410c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004110:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	69d3      	ldr	r3, [r2, #28]
 8004116:	6929      	ldr	r1, [r5, #16]
 8004118:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800411c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2000      	movs	r0, #0
      break;
 8004120:	e000      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0xd0>
  __HAL_LOCK(htim);
 8004122:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004124:	2300      	movs	r3, #0
 8004126:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800412a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800412c:	2002      	movs	r0, #2
 800412e:	e7fc      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0xd6>

08004130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004130:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004132:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004138:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800413c:	430a      	orrs	r2, r1
 800413e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004140:	6082      	str	r2, [r0, #8]
}
 8004142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004148:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d078      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004150:	b510      	push	{r4, lr}
 8004152:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004154:	2301      	movs	r3, #1
 8004156:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004160:	6802      	ldr	r2, [r0, #0]
 8004162:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004168:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800416c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d04c      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xc6>
 8004174:	d829      	bhi.n	80041ca <HAL_TIM_ConfigClockSource+0x82>
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d054      	beq.n	8004224 <HAL_TIM_ConfigClockSource+0xdc>
 800417a:	d90c      	bls.n	8004196 <HAL_TIM_ConfigClockSource+0x4e>
 800417c:	2b50      	cmp	r3, #80	; 0x50
 800417e:	d122      	bne.n	80041c6 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004180:	68ca      	ldr	r2, [r1, #12]
 8004182:	6849      	ldr	r1, [r1, #4]
 8004184:	6800      	ldr	r0, [r0, #0]
 8004186:	f7ff fd47 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800418a:	2150      	movs	r1, #80	; 0x50
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	f7ff fd68 	bl	8003c62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2000      	movs	r0, #0
      break;
 8004194:	e005      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004196:	2b20      	cmp	r3, #32
 8004198:	d00d      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x6e>
 800419a:	d909      	bls.n	80041b0 <HAL_TIM_ConfigClockSource+0x68>
 800419c:	2b30      	cmp	r3, #48	; 0x30
 800419e:	d00a      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80041a0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80041a8:	2300      	movs	r3, #0
 80041aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80041ae:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80041b0:	b10b      	cbz	r3, 80041b6 <HAL_TIM_ConfigClockSource+0x6e>
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d105      	bne.n	80041c2 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041b6:	4619      	mov	r1, r3
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	f7ff fd52 	bl	8003c62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2000      	movs	r0, #0
      break;
 80041c0:	e7ef      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
 80041c4:	e7ed      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
 80041c6:	2001      	movs	r0, #1
 80041c8:	e7eb      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d034      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xf2>
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d4:	d10c      	bne.n	80041f0 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80041d6:	68cb      	ldr	r3, [r1, #12]
 80041d8:	684a      	ldr	r2, [r1, #4]
 80041da:	6889      	ldr	r1, [r1, #8]
 80041dc:	6800      	ldr	r0, [r0, #0]
 80041de:	f7ff ffa7 	bl	8004130 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	6893      	ldr	r3, [r2, #8]
 80041e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ea:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2000      	movs	r0, #0
      break;
 80041ee:	e7d8      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d124      	bne.n	800423e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80041f4:	68cb      	ldr	r3, [r1, #12]
 80041f6:	684a      	ldr	r2, [r1, #4]
 80041f8:	6889      	ldr	r1, [r1, #8]
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	f7ff ff98 	bl	8004130 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004200:	6822      	ldr	r2, [r4, #0]
 8004202:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004208:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2000      	movs	r0, #0
      break;
 800420c:	e7c9      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800420e:	68ca      	ldr	r2, [r1, #12]
 8004210:	6849      	ldr	r1, [r1, #4]
 8004212:	6800      	ldr	r0, [r0, #0]
 8004214:	f7ff fd12 	bl	8003c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004218:	2160      	movs	r1, #96	; 0x60
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	f7ff fd21 	bl	8003c62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2000      	movs	r0, #0
      break;
 8004222:	e7be      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004224:	68ca      	ldr	r2, [r1, #12]
 8004226:	6849      	ldr	r1, [r1, #4]
 8004228:	6800      	ldr	r0, [r0, #0]
 800422a:	f7ff fcf5 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800422e:	2140      	movs	r1, #64	; 0x40
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	f7ff fd16 	bl	8003c62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2000      	movs	r0, #0
      break;
 8004238:	e7b3      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800423a:	2000      	movs	r0, #0
 800423c:	e7b1      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800423e:	2001      	movs	r0, #1
 8004240:	e7af      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004242:	2002      	movs	r0, #2
}
 8004244:	4770      	bx	lr

08004246 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004246:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004248:	f001 011f 	and.w	r1, r1, #31
 800424c:	2301      	movs	r3, #1
 800424e:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004252:	6a03      	ldr	r3, [r0, #32]
 8004254:	ea23 0304 	bic.w	r3, r3, r4
 8004258:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800425a:	6a03      	ldr	r3, [r0, #32]
 800425c:	fa02 f101 	lsl.w	r1, r2, r1
 8004260:	430b      	orrs	r3, r1
 8004262:	6203      	str	r3, [r0, #32]
}
 8004264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_TIM_PWM_Start>:
{
 800426c:	b510      	push	{r4, lr}
 800426e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004270:	4608      	mov	r0, r1
 8004272:	2900      	cmp	r1, #0
 8004274:	d132      	bne.n	80042dc <HAL_TIM_PWM_Start+0x70>
 8004276:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	bf18      	it	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d163      	bne.n	800434e <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004286:	2800      	cmp	r0, #0
 8004288:	d141      	bne.n	800430e <HAL_TIM_PWM_Start+0xa2>
 800428a:	2302      	movs	r3, #2
 800428c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004290:	2201      	movs	r2, #1
 8004292:	4601      	mov	r1, r0
 8004294:	6820      	ldr	r0, [r4, #0]
 8004296:	f7ff ffd6 	bl	8004246 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	4a2e      	ldr	r2, [pc, #184]	; (8004358 <HAL_TIM_PWM_Start+0xec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d045      	beq.n	800432e <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	4a2c      	ldr	r2, [pc, #176]	; (8004358 <HAL_TIM_PWM_Start+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d046      	beq.n	8004338 <HAL_TIM_PWM_Start+0xcc>
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d043      	beq.n	8004338 <HAL_TIM_PWM_Start+0xcc>
 80042b0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d03f      	beq.n	8004338 <HAL_TIM_PWM_Start+0xcc>
 80042b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <HAL_TIM_PWM_Start+0xcc>
 80042c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d037      	beq.n	8004338 <HAL_TIM_PWM_Start+0xcc>
 80042c8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d033      	beq.n	8004338 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042d8:	2000      	movs	r0, #0
 80042da:	e037      	b.n	800434c <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042dc:	2904      	cmp	r1, #4
 80042de:	d008      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x86>
 80042e0:	2908      	cmp	r1, #8
 80042e2:	d00d      	beq.n	8004300 <HAL_TIM_PWM_Start+0x94>
 80042e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	bf18      	it	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	e7c7      	b.n	8004282 <HAL_TIM_PWM_Start+0x16>
 80042f2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	bf18      	it	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	e7c0      	b.n	8004282 <HAL_TIM_PWM_Start+0x16>
 8004300:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004304:	b2db      	uxtb	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	bf18      	it	ne
 800430a:	2301      	movne	r3, #1
 800430c:	e7b9      	b.n	8004282 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800430e:	2804      	cmp	r0, #4
 8004310:	d005      	beq.n	800431e <HAL_TIM_PWM_Start+0xb2>
 8004312:	2808      	cmp	r0, #8
 8004314:	d007      	beq.n	8004326 <HAL_TIM_PWM_Start+0xba>
 8004316:	2302      	movs	r3, #2
 8004318:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800431c:	e7b8      	b.n	8004290 <HAL_TIM_PWM_Start+0x24>
 800431e:	2302      	movs	r3, #2
 8004320:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004324:	e7b4      	b.n	8004290 <HAL_TIM_PWM_Start+0x24>
 8004326:	2302      	movs	r3, #2
 8004328:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800432c:	e7b0      	b.n	8004290 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
 8004336:	e7b4      	b.n	80042a2 <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433e:	2a06      	cmp	r2, #6
 8004340:	d007      	beq.n	8004352 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800434a:	2000      	movs	r0, #0
}
 800434c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800434e:	2001      	movs	r0, #1
 8004350:	e7fc      	b.n	800434c <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8004352:	2000      	movs	r0, #0
 8004354:	e7fa      	b.n	800434c <HAL_TIM_PWM_Start+0xe0>
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000

0800435c <HAL_TIM_PWM_Stop>:
{
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004362:	2200      	movs	r2, #0
 8004364:	6800      	ldr	r0, [r0, #0]
 8004366:	f7ff ff6e 	bl	8004246 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_TIM_PWM_Stop+0x80>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d014      	beq.n	800439c <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	6a19      	ldr	r1, [r3, #32]
 8004376:	f241 1211 	movw	r2, #4369	; 0x1111
 800437a:	4211      	tst	r1, r2
 800437c:	d108      	bne.n	8004390 <HAL_TIM_PWM_Stop+0x34>
 800437e:	6a19      	ldr	r1, [r3, #32]
 8004380:	f240 4244 	movw	r2, #1092	; 0x444
 8004384:	4211      	tst	r1, r2
 8004386:	d103      	bne.n	8004390 <HAL_TIM_PWM_Stop+0x34>
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	b99d      	cbnz	r5, 80043ba <HAL_TIM_PWM_Stop+0x5e>
 8004392:	2301      	movs	r3, #1
 8004394:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004398:	2000      	movs	r0, #0
 800439a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 800439c:	6a19      	ldr	r1, [r3, #32]
 800439e:	f241 1211 	movw	r2, #4369	; 0x1111
 80043a2:	4211      	tst	r1, r2
 80043a4:	d1e5      	bne.n	8004372 <HAL_TIM_PWM_Stop+0x16>
 80043a6:	6a19      	ldr	r1, [r3, #32]
 80043a8:	f240 4244 	movw	r2, #1092	; 0x444
 80043ac:	4211      	tst	r1, r2
 80043ae:	d1e0      	bne.n	8004372 <HAL_TIM_PWM_Stop+0x16>
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
 80043b8:	e7db      	b.n	8004372 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	2d04      	cmp	r5, #4
 80043bc:	d005      	beq.n	80043ca <HAL_TIM_PWM_Stop+0x6e>
 80043be:	2d08      	cmp	r5, #8
 80043c0:	d007      	beq.n	80043d2 <HAL_TIM_PWM_Stop+0x76>
 80043c2:	2301      	movs	r3, #1
 80043c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80043c8:	e7e6      	b.n	8004398 <HAL_TIM_PWM_Stop+0x3c>
 80043ca:	2301      	movs	r3, #1
 80043cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80043d0:	e7e2      	b.n	8004398 <HAL_TIM_PWM_Stop+0x3c>
 80043d2:	2301      	movs	r3, #1
 80043d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80043d8:	e7de      	b.n	8004398 <HAL_TIM_PWM_Stop+0x3c>
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000

080043e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80043e0:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043e2:	f001 011f 	and.w	r1, r1, #31
 80043e6:	2304      	movs	r3, #4
 80043e8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	ea23 0304 	bic.w	r3, r3, r4
 80043f2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f4:	6a03      	ldr	r3, [r0, #32]
 80043f6:	fa02 f101 	lsl.w	r1, r2, r1
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6203      	str	r3, [r0, #32]
}
 80043fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_PWMN_Start>:
{
 8004404:	b510      	push	{r4, lr}
 8004406:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004408:	4608      	mov	r0, r1
 800440a:	2900      	cmp	r1, #0
 800440c:	d133      	bne.n	8004476 <HAL_TIMEx_PWMN_Start+0x72>
 800440e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	bf18      	it	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d15f      	bne.n	80044de <HAL_TIMEx_PWMN_Start+0xda>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800441e:	2800      	cmp	r0, #0
 8004420:	d142      	bne.n	80044a8 <HAL_TIMEx_PWMN_Start+0xa4>
 8004422:	2302      	movs	r3, #2
 8004424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004428:	2204      	movs	r2, #4
 800442a:	4601      	mov	r1, r0
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	f7ff ffd7 	bl	80043e0 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443a:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	4a2a      	ldr	r2, [pc, #168]	; (80044e8 <HAL_TIMEx_PWMN_Start+0xe4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d041      	beq.n	80044c8 <HAL_TIMEx_PWMN_Start+0xc4>
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d03e      	beq.n	80044c8 <HAL_TIMEx_PWMN_Start+0xc4>
 800444a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800444e:	4293      	cmp	r3, r2
 8004450:	d03a      	beq.n	80044c8 <HAL_TIMEx_PWMN_Start+0xc4>
 8004452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004456:	4293      	cmp	r3, r2
 8004458:	d036      	beq.n	80044c8 <HAL_TIMEx_PWMN_Start+0xc4>
 800445a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800445e:	4293      	cmp	r3, r2
 8004460:	d032      	beq.n	80044c8 <HAL_TIMEx_PWMN_Start+0xc4>
 8004462:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004466:	4293      	cmp	r3, r2
 8004468:	d02e      	beq.n	80044c8 <HAL_TIMEx_PWMN_Start+0xc4>
    __HAL_TIM_ENABLE(htim);
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004472:	2000      	movs	r0, #0
 8004474:	e032      	b.n	80044dc <HAL_TIMEx_PWMN_Start+0xd8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004476:	2904      	cmp	r1, #4
 8004478:	d008      	beq.n	800448c <HAL_TIMEx_PWMN_Start+0x88>
 800447a:	2908      	cmp	r1, #8
 800447c:	d00d      	beq.n	800449a <HAL_TIMEx_PWMN_Start+0x96>
 800447e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	bf18      	it	ne
 8004488:	2301      	movne	r3, #1
 800448a:	e7c6      	b.n	800441a <HAL_TIMEx_PWMN_Start+0x16>
 800448c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	bf18      	it	ne
 8004496:	2301      	movne	r3, #1
 8004498:	e7bf      	b.n	800441a <HAL_TIMEx_PWMN_Start+0x16>
 800449a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	bf18      	it	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	e7b8      	b.n	800441a <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a8:	2804      	cmp	r0, #4
 80044aa:	d005      	beq.n	80044b8 <HAL_TIMEx_PWMN_Start+0xb4>
 80044ac:	2808      	cmp	r0, #8
 80044ae:	d007      	beq.n	80044c0 <HAL_TIMEx_PWMN_Start+0xbc>
 80044b0:	2302      	movs	r3, #2
 80044b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044b6:	e7b7      	b.n	8004428 <HAL_TIMEx_PWMN_Start+0x24>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044be:	e7b3      	b.n	8004428 <HAL_TIMEx_PWMN_Start+0x24>
 80044c0:	2302      	movs	r3, #2
 80044c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80044c6:	e7af      	b.n	8004428 <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	2a06      	cmp	r2, #6
 80044d0:	d007      	beq.n	80044e2 <HAL_TIMEx_PWMN_Start+0xde>
      __HAL_TIM_ENABLE(htim);
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80044da:	2000      	movs	r0, #0
}
 80044dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80044de:	2001      	movs	r0, #1
 80044e0:	e7fc      	b.n	80044dc <HAL_TIMEx_PWMN_Start+0xd8>
  return HAL_OK;
 80044e2:	2000      	movs	r0, #0
 80044e4:	e7fa      	b.n	80044dc <HAL_TIMEx_PWMN_Start+0xd8>
 80044e6:	bf00      	nop
 80044e8:	40010000 	.word	0x40010000

080044ec <HAL_TIMEx_PWMN_Stop>:
{
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80044f2:	2200      	movs	r2, #0
 80044f4:	6800      	ldr	r0, [r0, #0]
 80044f6:	f7ff ff73 	bl	80043e0 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	6a19      	ldr	r1, [r3, #32]
 80044fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8004502:	4211      	tst	r1, r2
 8004504:	d108      	bne.n	8004518 <HAL_TIMEx_PWMN_Stop+0x2c>
 8004506:	6a19      	ldr	r1, [r3, #32]
 8004508:	f240 4244 	movw	r2, #1092	; 0x444
 800450c:	4211      	tst	r1, r2
 800450e:	d103      	bne.n	8004518 <HAL_TIMEx_PWMN_Stop+0x2c>
 8004510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	6a19      	ldr	r1, [r3, #32]
 800451c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004520:	4211      	tst	r1, r2
 8004522:	d108      	bne.n	8004536 <HAL_TIMEx_PWMN_Stop+0x4a>
 8004524:	6a19      	ldr	r1, [r3, #32]
 8004526:	f240 4244 	movw	r2, #1092	; 0x444
 800452a:	4211      	tst	r1, r2
 800452c:	d103      	bne.n	8004536 <HAL_TIMEx_PWMN_Stop+0x4a>
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	b925      	cbnz	r5, 8004542 <HAL_TIMEx_PWMN_Stop+0x56>
 8004538:	2301      	movs	r3, #1
 800453a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800453e:	2000      	movs	r0, #0
 8004540:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	2d04      	cmp	r5, #4
 8004544:	d005      	beq.n	8004552 <HAL_TIMEx_PWMN_Stop+0x66>
 8004546:	2d08      	cmp	r5, #8
 8004548:	d007      	beq.n	800455a <HAL_TIMEx_PWMN_Stop+0x6e>
 800454a:	2301      	movs	r3, #1
 800454c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004550:	e7f5      	b.n	800453e <HAL_TIMEx_PWMN_Stop+0x52>
 8004552:	2301      	movs	r3, #1
 8004554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004558:	e7f1      	b.n	800453e <HAL_TIMEx_PWMN_Stop+0x52>
 800455a:	2301      	movs	r3, #1
 800455c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004560:	e7ed      	b.n	800453e <HAL_TIMEx_PWMN_Stop+0x52>
	...

08004564 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004564:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d033      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 800456c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800456e:	2301      	movs	r3, #1
 8004570:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	2302      	movs	r3, #2
 8004576:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800457a:	6803      	ldr	r3, [r0, #0]
 800457c:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800457e:	689d      	ldr	r5, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004580:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004584:	680a      	ldr	r2, [r1, #0]
 8004586:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8004588:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	6803      	ldr	r3, [r0, #0]
 800458c:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d012      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d00f      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004598:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80045a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80045a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80045b0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d104      	bne.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045bc:	684a      	ldr	r2, [r1, #4]
 80045be:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 80045c0:	609d      	str	r5, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045c8:	2300      	movs	r3, #0
 80045ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80045ce:	4618      	mov	r0, r3
}
 80045d0:	bc30      	pop	{r4, r5}
 80045d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045d4:	2002      	movs	r0, #2
}
 80045d6:	4770      	bx	lr
 80045d8:	40010000 	.word	0x40010000

080045dc <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80045dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d022      	beq.n	800462a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80045e4:	2301      	movs	r3, #1
 80045e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045ea:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	688a      	ldr	r2, [r1, #8]
 80045f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045f8:	684a      	ldr	r2, [r1, #4]
 80045fa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004600:	680a      	ldr	r2, [r1, #0]
 8004602:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004608:	690a      	ldr	r2, [r1, #16]
 800460a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800460c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004610:	694a      	ldr	r2, [r1, #20]
 8004612:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004618:	69ca      	ldr	r2, [r1, #28]
 800461a:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 800461c:	6802      	ldr	r2, [r0, #0]
 800461e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004620:	2300      	movs	r3, #0
 8004622:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004626:	4618      	mov	r0, r3
 8004628:	4770      	bx	lr
  __HAL_LOCK(htim);
 800462a:	2002      	movs	r0, #2
}
 800462c:	4770      	bx	lr

0800462e <HAL_TIMEx_CommutCallback>:
}
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_BreakCallback>:
}
 8004630:	4770      	bx	lr

08004632 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004632:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	f102 030c 	add.w	r3, r2, #12
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	320c      	adds	r2, #12
 8004642:	e842 3100 	strex	r1, r3, [r2]
 8004646:	2900      	cmp	r1, #0
 8004648:	d1f3      	bne.n	8004632 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464a:	2320      	movs	r3, #32
 800464c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004650:	4770      	bx	lr

08004652 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004652:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	f102 030c 	add.w	r3, r2, #12
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	320c      	adds	r2, #12
 8004662:	e842 3100 	strex	r1, r3, [r2]
 8004666:	2900      	cmp	r1, #0
 8004668:	d1f3      	bne.n	8004652 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	f102 0314 	add.w	r3, r2, #20
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	3214      	adds	r2, #20
 800467a:	e842 3100 	strex	r1, r3, [r2]
 800467e:	2900      	cmp	r1, #0
 8004680:	d1f3      	bne.n	800466a <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004682:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004684:	2b01      	cmp	r3, #1
 8004686:	d005      	beq.n	8004694 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	2320      	movs	r3, #32
 800468a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	2300      	movs	r3, #0
 8004690:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004692:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004694:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	f102 030c 	add.w	r3, r2, #12
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	320c      	adds	r2, #12
 80046a4:	e842 3100 	strex	r1, r3, [r2]
 80046a8:	2900      	cmp	r1, #0
 80046aa:	d1f3      	bne.n	8004694 <UART_EndRxTransfer+0x42>
 80046ac:	e7ec      	b.n	8004688 <UART_EndRxTransfer+0x36>

080046ae <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b21      	cmp	r3, #33	; 0x21
 80046b6:	d001      	beq.n	80046bc <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2002      	movs	r0, #2
  }
}
 80046ba:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	6883      	ldr	r3, [r0, #8]
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d017      	beq.n	80046f4 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c4:	6a03      	ldr	r3, [r0, #32]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	6202      	str	r2, [r0, #32]
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	6803      	ldr	r3, [r0, #0]
 80046ce:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80046d0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80046da:	b94b      	cbnz	r3, 80046f0 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046dc:	6802      	ldr	r2, [r0, #0]
 80046de:	68d3      	ldr	r3, [r2, #12]
 80046e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e6:	6802      	ldr	r2, [r0, #0]
 80046e8:	68d3      	ldr	r3, [r2, #12]
 80046ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ee:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80046f0:	2000      	movs	r0, #0
 80046f2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	6903      	ldr	r3, [r0, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e4      	bne.n	80046c4 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046fa:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	6802      	ldr	r2, [r0, #0]
 8004700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004704:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004706:	6a03      	ldr	r3, [r0, #32]
 8004708:	3302      	adds	r3, #2
 800470a:	6203      	str	r3, [r0, #32]
 800470c:	e7e0      	b.n	80046d0 <UART_Transmit_IT+0x22>
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004714:	6802      	ldr	r2, [r0, #0]
 8004716:	6913      	ldr	r3, [r2, #16]
 8004718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800471c:	68c1      	ldr	r1, [r0, #12]
 800471e:	430b      	orrs	r3, r1
 8004720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004722:	6883      	ldr	r3, [r0, #8]
 8004724:	6902      	ldr	r2, [r0, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	6942      	ldr	r2, [r0, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	69c2      	ldr	r2, [r0, #28]
 800472e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004730:	6801      	ldr	r1, [r0, #0]
 8004732:	68cb      	ldr	r3, [r1, #12]
 8004734:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004738:	f023 030c 	bic.w	r3, r3, #12
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004740:	6802      	ldr	r2, [r0, #0]
 8004742:	6953      	ldr	r3, [r2, #20]
 8004744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004748:	6981      	ldr	r1, [r0, #24]
 800474a:	430b      	orrs	r3, r1
 800474c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800474e:	6803      	ldr	r3, [r0, #0]
 8004750:	4a34      	ldr	r2, [pc, #208]	; (8004824 <UART_SetConfig+0x114>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d006      	beq.n	8004764 <UART_SetConfig+0x54>
 8004756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800475a:	4293      	cmp	r3, r2
 800475c:	d002      	beq.n	8004764 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800475e:	f7ff f9a3 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8004762:	e001      	b.n	8004768 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7ff f9b0 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004768:	69e3      	ldr	r3, [r4, #28]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	d02a      	beq.n	80047c6 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004770:	2600      	movs	r6, #0
 8004772:	1805      	adds	r5, r0, r0
 8004774:	eb46 0106 	adc.w	r1, r6, r6
 8004778:	182d      	adds	r5, r5, r0
 800477a:	eb46 0101 	adc.w	r1, r6, r1
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004784:	00ea      	lsls	r2, r5, #3
 8004786:	4615      	mov	r5, r2
 8004788:	4619      	mov	r1, r3
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	0f9b      	lsrs	r3, r3, #30
 8004790:	1828      	adds	r0, r5, r0
 8004792:	eb46 0101 	adc.w	r1, r6, r1
 8004796:	f7fc fa5f 	bl	8000c58 <__aeabi_uldivmod>
 800479a:	4d23      	ldr	r5, [pc, #140]	; (8004828 <UART_SetConfig+0x118>)
 800479c:	fba5 3200 	umull	r3, r2, r5, r0
 80047a0:	0951      	lsrs	r1, r2, #5
 80047a2:	2364      	movs	r3, #100	; 0x64
 80047a4:	fb03 0311 	mls	r3, r3, r1, r0
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	3332      	adds	r3, #50	; 0x32
 80047ac:	fba5 2303 	umull	r2, r3, r5, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047b6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	6821      	ldr	r1, [r4, #0]
 80047c0:	4413      	add	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]
  }
}
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047c6:	2600      	movs	r6, #0
 80047c8:	1805      	adds	r5, r0, r0
 80047ca:	eb46 0106 	adc.w	r1, r6, r6
 80047ce:	182d      	adds	r5, r5, r0
 80047d0:	eb46 0101 	adc.w	r1, r6, r1
 80047d4:	00cb      	lsls	r3, r1, #3
 80047d6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80047da:	00ea      	lsls	r2, r5, #3
 80047dc:	4615      	mov	r5, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	4633      	mov	r3, r6
 80047e4:	1892      	adds	r2, r2, r2
 80047e6:	eb46 0303 	adc.w	r3, r6, r3
 80047ea:	1828      	adds	r0, r5, r0
 80047ec:	eb46 0101 	adc.w	r1, r6, r1
 80047f0:	f7fc fa32 	bl	8000c58 <__aeabi_uldivmod>
 80047f4:	4d0c      	ldr	r5, [pc, #48]	; (8004828 <UART_SetConfig+0x118>)
 80047f6:	fba5 3200 	umull	r3, r2, r5, r0
 80047fa:	0951      	lsrs	r1, r2, #5
 80047fc:	2364      	movs	r3, #100	; 0x64
 80047fe:	fb03 0311 	mls	r3, r3, r1, r0
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	fba5 2303 	umull	r2, r3, r5, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	005a      	lsls	r2, r3, #1
 800480e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004812:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	6821      	ldr	r1, [r4, #0]
 800481c:	4413      	add	r3, r2
 800481e:	608b      	str	r3, [r1, #8]
 8004820:	e7d0      	b.n	80047c4 <UART_SetConfig+0xb4>
 8004822:	bf00      	nop
 8004824:	40011000 	.word	0x40011000
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <HAL_UART_Init>:
  if (huart == NULL)
 800482c:	b358      	cbz	r0, 8004886 <HAL_UART_Init+0x5a>
{
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004836:	b30b      	cbz	r3, 800487c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	2324      	movs	r3, #36	; 0x24
 800483a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	68d3      	ldr	r3, [r2, #12]
 8004842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004846:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff ff61 	bl	8004710 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	6913      	ldr	r3, [r2, #16]
 8004852:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004856:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	6953      	ldr	r3, [r2, #20]
 800485c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004860:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	68d3      	ldr	r3, [r2, #12]
 8004866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800486a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	2000      	movs	r0, #0
 800486e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004870:	2320      	movs	r3, #32
 8004872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800487a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800487c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004880:	f7fd fb8a 	bl	8001f98 <HAL_UART_MspInit>
 8004884:	e7d8      	b.n	8004838 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004886:	2001      	movs	r0, #1
}
 8004888:	4770      	bx	lr
	...

0800488c <HAL_UART_Transmit_DMA>:
{
 800488c:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800488e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	d138      	bne.n	800490a <HAL_UART_Transmit_DMA+0x7e>
 8004898:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800489a:	2900      	cmp	r1, #0
 800489c:	d037      	beq.n	800490e <HAL_UART_Transmit_DMA+0x82>
 800489e:	2a00      	cmp	r2, #0
 80048a0:	d037      	beq.n	8004912 <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 80048a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d035      	beq.n	8004916 <HAL_UART_Transmit_DMA+0x8a>
 80048aa:	2301      	movs	r3, #1
 80048ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 80048b0:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80048b2:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b4:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	2500      	movs	r5, #0
 80048b8:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ba:	2321      	movs	r3, #33	; 0x21
 80048bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048c2:	4816      	ldr	r0, [pc, #88]	; (800491c <HAL_UART_Transmit_DMA+0x90>)
 80048c4:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048c8:	4815      	ldr	r0, [pc, #84]	; (8004920 <HAL_UART_Transmit_DMA+0x94>)
 80048ca:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ce:	4815      	ldr	r0, [pc, #84]	; (8004924 <HAL_UART_Transmit_DMA+0x98>)
 80048d0:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80048d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d4:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	1d02      	adds	r2, r0, #4
 80048dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80048de:	f7fd fdcf 	bl	8002480 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80048ea:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	f102 0314 	add.w	r3, r2, #20
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	3214      	adds	r2, #20
 80048fe:	e842 3100 	strex	r1, r3, [r2]
 8004902:	2900      	cmp	r1, #0
 8004904:	d1f3      	bne.n	80048ee <HAL_UART_Transmit_DMA+0x62>
    return HAL_OK;
 8004906:	2000      	movs	r0, #0
 8004908:	e000      	b.n	800490c <HAL_UART_Transmit_DMA+0x80>
    return HAL_BUSY;
 800490a:	2002      	movs	r0, #2
}
 800490c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800490e:	2001      	movs	r0, #1
 8004910:	e7fc      	b.n	800490c <HAL_UART_Transmit_DMA+0x80>
 8004912:	2001      	movs	r0, #1
 8004914:	e7fa      	b.n	800490c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8004916:	2002      	movs	r0, #2
 8004918:	e7f8      	b.n	800490c <HAL_UART_Transmit_DMA+0x80>
 800491a:	bf00      	nop
 800491c:	0800492b 	.word	0x0800492b
 8004920:	08004993 	.word	0x08004993
 8004924:	080049a1 	.word	0x080049a1

08004928 <HAL_UART_TxCpltCallback>:
}
 8004928:	4770      	bx	lr

0800492a <UART_DMATransmitCplt>:
{
 800492a:	b508      	push	{r3, lr}
 800492c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004938:	d11a      	bne.n	8004970 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	84c3      	strh	r3, [r0, #38]	; 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800493e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	f102 0314 	add.w	r3, r2, #20
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	3214      	adds	r2, #20
 800494e:	e842 3100 	strex	r1, r3, [r2]
 8004952:	2900      	cmp	r1, #0
 8004954:	d1f3      	bne.n	800493e <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004956:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	f102 030c 	add.w	r3, r2, #12
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	320c      	adds	r2, #12
 8004966:	e842 3100 	strex	r1, r3, [r2]
 800496a:	2900      	cmp	r1, #0
 800496c:	d1f3      	bne.n	8004956 <UART_DMATransmitCplt+0x2c>
}
 800496e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004970:	f7ff ffda 	bl	8004928 <HAL_UART_TxCpltCallback>
}
 8004974:	e7fb      	b.n	800496e <UART_DMATransmitCplt+0x44>

08004976 <UART_EndTransmit_IT>:
{
 8004976:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	68ca      	ldr	r2, [r1, #12]
 800497c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004980:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004982:	2220      	movs	r2, #32
 8004984:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004988:	f7ff ffce 	bl	8004928 <HAL_UART_TxCpltCallback>
}
 800498c:	2000      	movs	r0, #0
 800498e:	bd08      	pop	{r3, pc}

08004990 <HAL_UART_TxHalfCpltCallback>:
}
 8004990:	4770      	bx	lr

08004992 <UART_DMATxHalfCplt>:
{
 8004992:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004994:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004996:	f7ff fffb 	bl	8004990 <HAL_UART_TxHalfCpltCallback>
}
 800499a:	bd08      	pop	{r3, pc}

0800499c <HAL_UART_RxHalfCpltCallback>:
}
 800499c:	4770      	bx	lr

0800499e <HAL_UART_ErrorCallback>:
}
 800499e:	4770      	bx	lr

080049a0 <UART_DMAError>:
{
 80049a0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b21      	cmp	r3, #33	; 0x21
 80049b0:	d010      	beq.n	80049d4 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049ba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b22      	cmp	r3, #34	; 0x22
 80049c2:	d011      	beq.n	80049e8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff ffe6 	bl	800499e <HAL_UART_ErrorCallback>
}
 80049d2:	bd10      	pop	{r4, pc}
 80049d4:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049d8:	2a00      	cmp	r2, #0
 80049da:	d0ea      	beq.n	80049b2 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80049dc:	2300      	movs	r3, #0
 80049de:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff fe26 	bl	8004632 <UART_EndTxTransfer>
 80049e6:	e7e4      	b.n	80049b2 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	d0eb      	beq.n	80049c4 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7ff fe2e 	bl	8004652 <UART_EndRxTransfer>
 80049f6:	e7e5      	b.n	80049c4 <UART_DMAError+0x24>

080049f8 <UART_DMAAbortOnError>:
{
 80049f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a00:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004a02:	f7ff ffcc 	bl	800499e <HAL_UART_ErrorCallback>
}
 8004a06:	bd08      	pop	{r3, pc}

08004a08 <HAL_UARTEx_RxEventCallback>:
}
 8004a08:	4770      	bx	lr

08004a0a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a0a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b22      	cmp	r3, #34	; 0x22
 8004a12:	d167      	bne.n	8004ae4 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a14:	6883      	ldr	r3, [r0, #8]
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	d04d      	beq.n	8004ab8 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d004      	beq.n	8004a2e <UART_Receive_IT+0x24>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d154      	bne.n	8004ad2 <UART_Receive_IT+0xc8>
 8004a28:	6903      	ldr	r3, [r0, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d151      	bne.n	8004ad2 <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a2e:	6803      	ldr	r3, [r0, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004a34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004a36:	3301      	adds	r3, #1
 8004a38:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004a3a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d14f      	bne.n	8004ae8 <UART_Receive_IT+0xde>
{
 8004a48:	b500      	push	{lr}
 8004a4a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a4c:	6802      	ldr	r2, [r0, #0]
 8004a4e:	68d3      	ldr	r3, [r2, #12]
 8004a50:	f023 0320 	bic.w	r3, r3, #32
 8004a54:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a56:	6802      	ldr	r2, [r0, #0]
 8004a58:	68d3      	ldr	r3, [r2, #12]
 8004a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a5e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a60:	6802      	ldr	r2, [r0, #0]
 8004a62:	6953      	ldr	r3, [r2, #20]
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d133      	bne.n	8004ade <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	2300      	movs	r3, #0
 8004a78:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	f102 030c 	add.w	r3, r2, #12
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	320c      	adds	r2, #12
 8004a8a:	e842 3100 	strex	r1, r3, [r2]
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	d1f3      	bne.n	8004a7a <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a92:	6803      	ldr	r3, [r0, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f012 0f10 	tst.w	r2, #16
 8004a9a:	d006      	beq.n	8004aaa <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9201      	str	r2, [sp, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	9201      	str	r2, [sp, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aaa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004aac:	f7ff ffac 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004ab0:	2000      	movs	r0, #0
}
 8004ab2:	b003      	add	sp, #12
 8004ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab8:	6902      	ldr	r2, [r0, #16]
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	d1ae      	bne.n	8004a1c <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004abe:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac0:	6803      	ldr	r3, [r0, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004aca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004acc:	3302      	adds	r3, #2
 8004ace:	6283      	str	r3, [r0, #40]	; 0x28
 8004ad0:	e7b3      	b.n	8004a3a <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ad2:	6803      	ldr	r3, [r0, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ada:	7013      	strb	r3, [r2, #0]
 8004adc:	e7aa      	b.n	8004a34 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8004ade:	f7fc fa7f 	bl	8000fe0 <HAL_UART_RxCpltCallback>
 8004ae2:	e7e5      	b.n	8004ab0 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8004ae4:	2002      	movs	r0, #2
 8004ae6:	4770      	bx	lr
    return HAL_OK;
 8004ae8:	2000      	movs	r0, #0
}
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_IRQHandler>:
{
 8004aec:	b530      	push	{r4, r5, lr}
 8004aee:	b083      	sub	sp, #12
 8004af0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004af2:	6802      	ldr	r2, [r0, #0]
 8004af4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004afa:	f013 050f 	ands.w	r5, r3, #15
 8004afe:	d105      	bne.n	8004b0c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b00:	f013 0f20 	tst.w	r3, #32
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_IRQHandler+0x20>
 8004b06:	f010 0f20 	tst.w	r0, #32
 8004b0a:	d119      	bne.n	8004b40 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b0c:	b12d      	cbz	r5, 8004b1a <HAL_UART_IRQHandler+0x2e>
 8004b0e:	f011 0101 	ands.w	r1, r1, #1
 8004b12:	d119      	bne.n	8004b48 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b14:	f410 7f90 	tst.w	r0, #288	; 0x120
 8004b18:	d116      	bne.n	8004b48 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b1c:	2901      	cmp	r1, #1
 8004b1e:	d07d      	beq.n	8004c1c <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b24:	d003      	beq.n	8004b2e <HAL_UART_IRQHandler+0x42>
 8004b26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b2a:	f040 8115 	bne.w	8004d58 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b32:	d003      	beq.n	8004b3c <HAL_UART_IRQHandler+0x50>
 8004b34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b38:	f040 8112 	bne.w	8004d60 <HAL_UART_IRQHandler+0x274>
}
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8004b40:	4620      	mov	r0, r4
 8004b42:	f7ff ff62 	bl	8004a0a <UART_Receive_IT>
      return;
 8004b46:	e7f9      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b48:	f013 0f01 	tst.w	r3, #1
 8004b4c:	d006      	beq.n	8004b5c <HAL_UART_IRQHandler+0x70>
 8004b4e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004b52:	d003      	beq.n	8004b5c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b5c:	f013 0f04 	tst.w	r3, #4
 8004b60:	d004      	beq.n	8004b6c <HAL_UART_IRQHandler+0x80>
 8004b62:	b119      	cbz	r1, 8004b6c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b66:	f042 0202 	orr.w	r2, r2, #2
 8004b6a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b6c:	f013 0f02 	tst.w	r3, #2
 8004b70:	d004      	beq.n	8004b7c <HAL_UART_IRQHandler+0x90>
 8004b72:	b119      	cbz	r1, 8004b7c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b76:	f042 0204 	orr.w	r2, r2, #4
 8004b7a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b7c:	f013 0f08 	tst.w	r3, #8
 8004b80:	d007      	beq.n	8004b92 <HAL_UART_IRQHandler+0xa6>
 8004b82:	f010 0f20 	tst.w	r0, #32
 8004b86:	d100      	bne.n	8004b8a <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b88:	b119      	cbz	r1, 8004b92 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b8c:	f042 0208 	orr.w	r2, r2, #8
 8004b90:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b94:	2a00      	cmp	r2, #0
 8004b96:	d0d1      	beq.n	8004b3c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b98:	f013 0f20 	tst.w	r3, #32
 8004b9c:	d002      	beq.n	8004ba4 <HAL_UART_IRQHandler+0xb8>
 8004b9e:	f010 0f20 	tst.w	r0, #32
 8004ba2:	d129      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bae:	f012 0f08 	tst.w	r2, #8
 8004bb2:	d100      	bne.n	8004bb6 <HAL_UART_IRQHandler+0xca>
 8004bb4:	b363      	cbz	r3, 8004c10 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff fd4b 	bl	8004652 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bc4:	d020      	beq.n	8004c08 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	f102 0314 	add.w	r3, r2, #20
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	3214      	adds	r2, #20
 8004bd6:	e842 3100 	strex	r1, r3, [r2]
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	d1f3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8004bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004be0:	b173      	cbz	r3, 8004c00 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be2:	4a61      	ldr	r2, [pc, #388]	; (8004d68 <HAL_UART_IRQHandler+0x27c>)
 8004be4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004be6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004be8:	f7fd fcc9 	bl	800257e <HAL_DMA_Abort_IT>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0a5      	beq.n	8004b3c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bf0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004bf2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004bf4:	4798      	blx	r3
 8004bf6:	e7a1      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff ff06 	bl	8004a0a <UART_Receive_IT>
 8004bfe:	e7d1      	b.n	8004ba4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8004c00:	4620      	mov	r0, r4
 8004c02:	f7ff fecc 	bl	800499e <HAL_UART_ErrorCallback>
 8004c06:	e799      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff fec8 	bl	800499e <HAL_UART_ErrorCallback>
 8004c0e:	e795      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7ff fec4 	bl	800499e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8004c1a:	e78f      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c1c:	f013 0f10 	tst.w	r3, #16
 8004c20:	f43f af7e 	beq.w	8004b20 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c24:	f010 0f10 	tst.w	r0, #16
 8004c28:	f43f af7a 	beq.w	8004b20 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	6853      	ldr	r3, [r2, #4]
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	6953      	ldr	r3, [r2, #20]
 8004c3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c40:	d050      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c44:	6813      	ldr	r3, [r2, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f43f af76 	beq.w	8004b3c <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c50:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004c52:	4299      	cmp	r1, r3
 8004c54:	f67f af72 	bls.w	8004b3c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8004c58:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c5a:	69d3      	ldr	r3, [r2, #28]
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d037      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c62:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	f102 030c 	add.w	r3, r2, #12
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	320c      	adds	r2, #12
 8004c72:	e842 3100 	strex	r1, r3, [r2]
 8004c76:	2900      	cmp	r1, #0
 8004c78:	d1f3      	bne.n	8004c62 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	f102 0314 	add.w	r3, r2, #20
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	3214      	adds	r2, #20
 8004c8a:	e842 3100 	strex	r1, r3, [r2]
 8004c8e:	2900      	cmp	r1, #0
 8004c90:	d1f3      	bne.n	8004c7a <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c92:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	f102 0314 	add.w	r3, r2, #20
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	3214      	adds	r2, #20
 8004ca2:	e842 3100 	strex	r1, r3, [r2]
 8004ca6:	2900      	cmp	r1, #0
 8004ca8:	d1f3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8004caa:	2320      	movs	r3, #32
 8004cac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	f102 030c 	add.w	r3, r2, #12
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	320c      	adds	r2, #12
 8004cc4:	e842 3100 	strex	r1, r3, [r2]
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d1f3      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ccc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004cce:	f7fd fc0c 	bl	80024ea <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004cd4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	1ac9      	subs	r1, r1, r3
 8004cda:	b289      	uxth	r1, r1
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff fe93 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
      return;
 8004ce2:	e72b      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ce4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004ce6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	1ac9      	subs	r1, r1, r3
 8004cec:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004cee:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f43f af22 	beq.w	8004b3c <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	f43f af1f 	beq.w	8004b3c <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	f102 030c 	add.w	r3, r2, #12
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	320c      	adds	r2, #12
 8004d0e:	e842 3000 	strex	r0, r3, [r2]
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d1f3      	bne.n	8004cfe <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	f102 0314 	add.w	r3, r2, #20
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	3214      	adds	r2, #20
 8004d26:	e842 3000 	strex	r0, r3, [r2]
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d1f3      	bne.n	8004d16 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d34:	2300      	movs	r3, #0
 8004d36:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	f102 030c 	add.w	r3, r2, #12
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	320c      	adds	r2, #12
 8004d48:	e842 3000 	strex	r0, r3, [r2]
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d1f3      	bne.n	8004d38 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff fe59 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
      return;
 8004d56:	e6f1      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7ff fca8 	bl	80046ae <UART_Transmit_IT>
    return;
 8004d5e:	e6ed      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7ff fe08 	bl	8004976 <UART_EndTransmit_IT>
    return;
 8004d66:	e6e9      	b.n	8004b3c <HAL_UART_IRQHandler+0x50>
 8004d68:	080049f9 	.word	0x080049f9

08004d6c <UART_DMARxHalfCplt>:
{
 8004d6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d002      	beq.n	8004d7c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d76:	f7ff fe11 	bl	800499c <HAL_UART_RxHalfCpltCallback>
}
 8004d7a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d7c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004d7e:	0849      	lsrs	r1, r1, #1
 8004d80:	f7ff fe42 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
 8004d84:	e7f9      	b.n	8004d7a <UART_DMARxHalfCplt+0xe>

08004d86 <UART_DMAReceiveCplt>:
{
 8004d86:	b508      	push	{r3, lr}
 8004d88:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d94:	d12b      	bne.n	8004dee <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	f102 030c 	add.w	r3, r2, #12
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	320c      	adds	r2, #12
 8004daa:	e842 3100 	strex	r1, r3, [r2]
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d1f3      	bne.n	8004d9a <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	f102 0314 	add.w	r3, r2, #20
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	3214      	adds	r2, #20
 8004dc2:	e842 3100 	strex	r1, r3, [r2]
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	d1f3      	bne.n	8004db2 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	f102 0314 	add.w	r3, r2, #20
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	3214      	adds	r2, #20
 8004dda:	e842 3100 	strex	r1, r3, [r2]
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d1f3      	bne.n	8004dca <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004de2:	2320      	movs	r3, #32
 8004de4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d005      	beq.n	8004dfa <UART_DMAReceiveCplt+0x74>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d00f      	beq.n	8004e14 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004df4:	f7fc f8f4 	bl	8000fe0 <HAL_UART_RxCpltCallback>
}
 8004df8:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	f102 030c 	add.w	r3, r2, #12
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	320c      	adds	r2, #12
 8004e0a:	e842 3100 	strex	r1, r3, [r2]
 8004e0e:	2900      	cmp	r1, #0
 8004e10:	d1f3      	bne.n	8004dfa <UART_DMAReceiveCplt+0x74>
 8004e12:	e7ec      	b.n	8004dee <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e14:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004e16:	f7ff fdf7 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
 8004e1a:	e7ed      	b.n	8004df8 <UART_DMAReceiveCplt+0x72>

08004e1c <UART_Start_Receive_DMA>:
{
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	4604      	mov	r4, r0
 8004e22:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004e24:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e26:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	2500      	movs	r5, #0
 8004e2a:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e2c:	2222      	movs	r2, #34	; 0x22
 8004e2e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e32:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004e34:	481f      	ldr	r0, [pc, #124]	; (8004eb4 <UART_Start_Receive_DMA+0x98>)
 8004e36:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e3a:	481f      	ldr	r0, [pc, #124]	; (8004eb8 <UART_Start_Receive_DMA+0x9c>)
 8004e3c:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e40:	481e      	ldr	r0, [pc, #120]	; (8004ebc <UART_Start_Receive_DMA+0xa0>)
 8004e42:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8004e44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e46:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	1d01      	adds	r1, r0, #4
 8004e4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e50:	f7fd fb16 	bl	8002480 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e54:	9501      	str	r5, [sp, #4]
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	9201      	str	r2, [sp, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(huart);
 8004e62:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	f102 030c 	add.w	r3, r2, #12
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	320c      	adds	r2, #12
 8004e76:	e842 3100 	strex	r1, r3, [r2]
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d1f3      	bne.n	8004e66 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	f102 0314 	add.w	r3, r2, #20
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	3214      	adds	r2, #20
 8004e8e:	e842 3100 	strex	r1, r3, [r2]
 8004e92:	2900      	cmp	r1, #0
 8004e94:	d1f3      	bne.n	8004e7e <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	f102 0314 	add.w	r3, r2, #20
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	3214      	adds	r2, #20
 8004ea6:	e842 3100 	strex	r1, r3, [r2]
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	d1f3      	bne.n	8004e96 <UART_Start_Receive_DMA+0x7a>
}
 8004eae:	2000      	movs	r0, #0
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bd30      	pop	{r4, r5, pc}
 8004eb4:	08004d87 	.word	0x08004d87
 8004eb8:	08004d6d 	.word	0x08004d6d
 8004ebc:	080049a1 	.word	0x080049a1

08004ec0 <HAL_UART_Receive_DMA>:
{
 8004ec0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ec2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d10d      	bne.n	8004ee8 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	b171      	cbz	r1, 8004eec <HAL_UART_Receive_DMA+0x2c>
 8004ece:	b17a      	cbz	r2, 8004ef0 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 8004ed0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_UART_Receive_DMA+0x34>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ee2:	f7ff ff9b 	bl	8004e1c <UART_Start_Receive_DMA>
 8004ee6:	e000      	b.n	8004eea <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8004ee8:	2002      	movs	r0, #2
}
 8004eea:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004eec:	2001      	movs	r0, #1
 8004eee:	e7fc      	b.n	8004eea <HAL_UART_Receive_DMA+0x2a>
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	e7fa      	b.n	8004eea <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 8004ef4:	2002      	movs	r0, #2
 8004ef6:	e7f8      	b.n	8004eea <HAL_UART_Receive_DMA+0x2a>

08004ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	3301      	adds	r3, #1
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	4a0e      	ldr	r2, [pc, #56]	; (8004f40 <USB_CoreReset+0x48>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d814      	bhi.n	8004f34 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0a:	6903      	ldr	r3, [r0, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	daf6      	bge.n	8004efe <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f14:	6903      	ldr	r3, [r0, #16]
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004f1c:	9b01      	ldr	r3, [sp, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <USB_CoreReset+0x48>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d808      	bhi.n	8004f3a <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f28:	6903      	ldr	r3, [r0, #16]
 8004f2a:	f013 0f01 	tst.w	r3, #1
 8004f2e:	d1f5      	bne.n	8004f1c <USB_CoreReset+0x24>

  return HAL_OK;
 8004f30:	2000      	movs	r0, #0
 8004f32:	e000      	b.n	8004f36 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8004f34:	2003      	movs	r0, #3
}
 8004f36:	b002      	add	sp, #8
 8004f38:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004f3a:	2003      	movs	r0, #3
 8004f3c:	e7fb      	b.n	8004f36 <USB_CoreReset+0x3e>
 8004f3e:	bf00      	nop
 8004f40:	00030d40 	.word	0x00030d40

08004f44 <USB_CoreInit>:
{
 8004f44:	b084      	sub	sp, #16
 8004f46:	b510      	push	{r4, lr}
 8004f48:	4604      	mov	r4, r0
 8004f4a:	a803      	add	r0, sp, #12
 8004f4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f50:	9b08      	ldr	r3, [sp, #32]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d11f      	bne.n	8004f96 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f5e:	68e3      	ldr	r3, [r4, #12]
 8004f60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f70:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8004f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d009      	beq.n	8004f8c <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff ffbd 	bl	8004ef8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004f7e:	9b06      	ldr	r3, [sp, #24]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d01b      	beq.n	8004fbc <USB_CoreInit+0x78>
}
 8004f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f88:	b004      	add	sp, #16
 8004f8a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f8c:	68e3      	ldr	r3, [r4, #12]
 8004f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f92:	60e3      	str	r3, [r4, #12]
 8004f94:	e7f0      	b.n	8004f78 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7ff ffaa 	bl	8004ef8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fa6:	b923      	cbnz	r3, 8004fb2 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fae:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fb0:	e7e5      	b.n	8004f7e <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fba:	e7e0      	b.n	8004f7e <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	f043 0306 	orr.w	r3, r3, #6
 8004fc2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	f043 0320 	orr.w	r3, r3, #32
 8004fca:	60a3      	str	r3, [r4, #8]
 8004fcc:	e7da      	b.n	8004f84 <USB_CoreInit+0x40>
	...

08004fd0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004fd0:	2a02      	cmp	r2, #2
 8004fd2:	d00a      	beq.n	8004fea <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fd4:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fd6:	68c2      	ldr	r2, [r0, #12]
 8004fd8:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004fdc:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fde:	68c3      	ldr	r3, [r0, #12]
 8004fe0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004fe4:	60c3      	str	r3, [r0, #12]
}
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fea:	4b23      	ldr	r3, [pc, #140]	; (8005078 <USB_SetTurnaroundTime+0xa8>)
 8004fec:	440b      	add	r3, r1
 8004fee:	4a23      	ldr	r2, [pc, #140]	; (800507c <USB_SetTurnaroundTime+0xac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d92f      	bls.n	8005054 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <USB_SetTurnaroundTime+0xb0>)
 8004ff6:	440b      	add	r3, r1
 8004ff8:	4a22      	ldr	r2, [pc, #136]	; (8005084 <USB_SetTurnaroundTime+0xb4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d92c      	bls.n	8005058 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ffe:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8005002:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8005006:	4a20      	ldr	r2, [pc, #128]	; (8005088 <USB_SetTurnaroundTime+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d927      	bls.n	800505c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800500c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8005010:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <USB_SetTurnaroundTime+0xbc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d322      	bcc.n	8005060 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <USB_SetTurnaroundTime+0xc0>)
 800501c:	440b      	add	r3, r1
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <USB_SetTurnaroundTime+0xc4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d91f      	bls.n	8005064 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005024:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <USB_SetTurnaroundTime+0xc8>)
 8005026:	440b      	add	r3, r1
 8005028:	4a1c      	ldr	r2, [pc, #112]	; (800509c <USB_SetTurnaroundTime+0xcc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d31c      	bcc.n	8005068 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <USB_SetTurnaroundTime+0xd0>)
 8005030:	440b      	add	r3, r1
 8005032:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <USB_SetTurnaroundTime+0xd4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d319      	bcc.n	800506c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005038:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800503c:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <USB_SetTurnaroundTime+0xd8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d314      	bcc.n	8005070 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005046:	4b19      	ldr	r3, [pc, #100]	; (80050ac <USB_SetTurnaroundTime+0xdc>)
 8005048:	440b      	add	r3, r1
 800504a:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <USB_SetTurnaroundTime+0xe0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d211      	bcs.n	8005074 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8005050:	2107      	movs	r1, #7
 8005052:	e7c0      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8005054:	210f      	movs	r1, #15
 8005056:	e7be      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8005058:	210e      	movs	r1, #14
 800505a:	e7bc      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800505c:	210d      	movs	r1, #13
 800505e:	e7ba      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8005060:	210c      	movs	r1, #12
 8005062:	e7b8      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8005064:	210b      	movs	r1, #11
 8005066:	e7b6      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8005068:	210a      	movs	r1, #10
 800506a:	e7b4      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800506c:	2109      	movs	r1, #9
 800506e:	e7b2      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8005070:	2108      	movs	r1, #8
 8005072:	e7b0      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8005074:	2106      	movs	r1, #6
 8005076:	e7ae      	b.n	8004fd6 <USB_SetTurnaroundTime+0x6>
 8005078:	ff275340 	.word	0xff275340
 800507c:	000c34ff 	.word	0x000c34ff
 8005080:	ff1b1e40 	.word	0xff1b1e40
 8005084:	000f423f 	.word	0x000f423f
 8005088:	00124f7f 	.word	0x00124f7f
 800508c:	0013d620 	.word	0x0013d620
 8005090:	fee5b660 	.word	0xfee5b660
 8005094:	0016e35f 	.word	0x0016e35f
 8005098:	feced300 	.word	0xfeced300
 800509c:	001b7740 	.word	0x001b7740
 80050a0:	feb35bc0 	.word	0xfeb35bc0
 80050a4:	002191c0 	.word	0x002191c0
 80050a8:	00387520 	.word	0x00387520
 80050ac:	fe5954e0 	.word	0xfe5954e0
 80050b0:	00419ce0 	.word	0x00419ce0

080050b4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050b4:	6883      	ldr	r3, [r0, #8]
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	6083      	str	r3, [r0, #8]
}
 80050bc:	2000      	movs	r0, #0
 80050be:	4770      	bx	lr

080050c0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050c0:	6883      	ldr	r3, [r0, #8]
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	6083      	str	r3, [r0, #8]
}
 80050c8:	2000      	movs	r0, #0
 80050ca:	4770      	bx	lr

080050cc <USB_FlushTxFifo>:
{
 80050cc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050d2:	0189      	lsls	r1, r1, #6
 80050d4:	f041 0120 	orr.w	r1, r1, #32
 80050d8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80050da:	9b01      	ldr	r3, [sp, #4]
 80050dc:	3301      	adds	r3, #1
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <USB_FlushTxFifo+0x2c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d805      	bhi.n	80050f2 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050e6:	6903      	ldr	r3, [r0, #16]
 80050e8:	f013 0f20 	tst.w	r3, #32
 80050ec:	d1f5      	bne.n	80050da <USB_FlushTxFifo+0xe>
  return HAL_OK;
 80050ee:	2000      	movs	r0, #0
 80050f0:	e000      	b.n	80050f4 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 80050f2:	2003      	movs	r0, #3
}
 80050f4:	b002      	add	sp, #8
 80050f6:	4770      	bx	lr
 80050f8:	00030d40 	.word	0x00030d40

080050fc <USB_FlushRxFifo>:
{
 80050fc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005102:	2310      	movs	r3, #16
 8005104:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8005106:	9b01      	ldr	r3, [sp, #4]
 8005108:	3301      	adds	r3, #1
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	4a05      	ldr	r2, [pc, #20]	; (8005124 <USB_FlushRxFifo+0x28>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d805      	bhi.n	800511e <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005112:	6903      	ldr	r3, [r0, #16]
 8005114:	f013 0f10 	tst.w	r3, #16
 8005118:	d1f5      	bne.n	8005106 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 800511a:	2000      	movs	r0, #0
 800511c:	e000      	b.n	8005120 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 800511e:	2003      	movs	r0, #3
}
 8005120:	b002      	add	sp, #8
 8005122:	4770      	bx	lr
 8005124:	00030d40 	.word	0x00030d40

08005128 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8005128:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800512c:	4319      	orrs	r1, r3
 800512e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005132:	2000      	movs	r0, #0
 8005134:	4770      	bx	lr
	...

08005138 <USB_DevInit>:
{
 8005138:	b084      	sub	sp, #16
 800513a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800513e:	4604      	mov	r4, r0
 8005140:	a809      	add	r0, sp, #36	; 0x24
 8005142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	e006      	b.n	800515a <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 800514c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005150:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005154:	2100      	movs	r1, #0
 8005156:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005158:	3301      	adds	r3, #1
 800515a:	2b0e      	cmp	r3, #14
 800515c:	d9f6      	bls.n	800514c <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800515e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8005162:	f1b8 0f00 	cmp.w	r8, #0
 8005166:	d124      	bne.n	80051b2 <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005168:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800517a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800517c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800517e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005182:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005192:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8005196:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800519a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800519e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d114      	bne.n	80051ce <USB_DevInit+0x96>
    if (cfg.speed == USBD_HS_SPEED)
 80051a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a6:	b96b      	cbnz	r3, 80051c4 <USB_DevInit+0x8c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051a8:	2100      	movs	r1, #0
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff ffbc 	bl	8005128 <USB_SetDevSpeed>
 80051b0:	e011      	b.n	80051d6 <USB_DevInit+0x9e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051b8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80051c2:	e7e3      	b.n	800518c <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051c4:	2101      	movs	r1, #1
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff ffae 	bl	8005128 <USB_SetDevSpeed>
 80051cc:	e003      	b.n	80051d6 <USB_DevInit+0x9e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051ce:	2103      	movs	r1, #3
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff ffa9 	bl	8005128 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051d6:	2110      	movs	r1, #16
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff ff77 	bl	80050cc <USB_FlushTxFifo>
 80051de:	4681      	mov	r9, r0
 80051e0:	b108      	cbz	r0, 80051e6 <USB_DevInit+0xae>
    ret = HAL_ERROR;
 80051e2:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7ff ff88 	bl	80050fc <USB_FlushRxFifo>
 80051ec:	b108      	cbz	r0, 80051f2 <USB_DevInit+0xba>
    ret = HAL_ERROR;
 80051ee:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051f6:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051f8:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fa:	e00a      	b.n	8005212 <USB_DevInit+0xda>
      if (i == 0U)
 80051fc:	b9c3      	cbnz	r3, 8005230 <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051fe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005202:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005206:	2200      	movs	r2, #0
 8005208:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800520a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800520e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005210:	3301      	adds	r3, #1
 8005212:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005214:	429f      	cmp	r7, r3
 8005216:	d910      	bls.n	800523a <USB_DevInit+0x102>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005218:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800521c:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8005220:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8005224:	2800      	cmp	r0, #0
 8005226:	dbe9      	blt.n	80051fc <USB_DevInit+0xc4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8005228:	2000      	movs	r0, #0
 800522a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800522e:	e7ea      	b.n	8005206 <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005234:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8005238:	e7e5      	b.n	8005206 <USB_DevInit+0xce>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523a:	2300      	movs	r3, #0
 800523c:	e00a      	b.n	8005254 <USB_DevInit+0x11c>
      if (i == 0U)
 800523e:	b1bb      	cbz	r3, 8005270 <USB_DevInit+0x138>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005244:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005248:	2200      	movs	r2, #0
 800524a:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800524c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8005250:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005252:	3301      	adds	r3, #1
 8005254:	429f      	cmp	r7, r3
 8005256:	d910      	bls.n	800527a <USB_DevInit+0x142>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005258:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800525c:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 8005260:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8005264:	2800      	cmp	r0, #0
 8005266:	dbea      	blt.n	800523e <USB_DevInit+0x106>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005268:	2000      	movs	r0, #0
 800526a:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 800526e:	e7eb      	b.n	8005248 <USB_DevInit+0x110>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005270:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005274:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8005278:	e7e6      	b.n	8005248 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800527a:	6933      	ldr	r3, [r6, #16]
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005286:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800528a:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800528c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800528e:	b91b      	cbnz	r3, 8005298 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005290:	69a3      	ldr	r3, [r4, #24]
 8005292:	f043 0310 	orr.w	r3, r3, #16
 8005296:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005298:	69a2      	ldr	r2, [r4, #24]
 800529a:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <USB_DevInit+0x194>)
 800529c:	4313      	orrs	r3, r2
 800529e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80052a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052a2:	b11b      	cbz	r3, 80052ac <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052a4:	69a3      	ldr	r3, [r4, #24]
 80052a6:	f043 0308 	orr.w	r3, r3, #8
 80052aa:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80052ac:	f1b8 0f01 	cmp.w	r8, #1
 80052b0:	d004      	beq.n	80052bc <USB_DevInit+0x184>
}
 80052b2:	4648      	mov	r0, r9
 80052b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b8:	b004      	add	sp, #16
 80052ba:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052bc:	69a3      	ldr	r3, [r4, #24]
 80052be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	61a3      	str	r3, [r4, #24]
 80052c8:	e7f3      	b.n	80052b2 <USB_DevInit+0x17a>
 80052ca:	bf00      	nop
 80052cc:	803c3800 	.word	0x803c3800

080052d0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052d0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052d4:	f013 0306 	ands.w	r3, r3, #6
 80052d8:	d007      	beq.n	80052ea <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d007      	beq.n	80052ee <USB_GetDevSpeed+0x1e>
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d001      	beq.n	80052e6 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 80052e2:	200f      	movs	r0, #15
}
 80052e4:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80052e6:	2002      	movs	r0, #2
 80052e8:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80052ea:	2000      	movs	r0, #0
 80052ec:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80052ee:	2002      	movs	r0, #2
 80052f0:	4770      	bx	lr

080052f2 <USB_ActivateEndpoint>:
{
 80052f2:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80052f4:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80052f6:	784b      	ldrb	r3, [r1, #1]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d022      	beq.n	8005342 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052fc:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8005300:	f004 060f 	and.w	r6, r4, #15
 8005304:	2201      	movs	r2, #1
 8005306:	40b2      	lsls	r2, r6
 8005308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800530c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005310:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005314:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005318:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800531c:	d10e      	bne.n	800533c <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800531e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005322:	688a      	ldr	r2, [r1, #8]
 8005324:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005328:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800532a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800532e:	4313      	orrs	r3, r2
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800533c:	2000      	movs	r0, #0
 800533e:	bc70      	pop	{r4, r5, r6}
 8005340:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005342:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005346:	f004 060f 	and.w	r6, r4, #15
 800534a:	40b3      	lsls	r3, r6
 800534c:	b29b      	uxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005354:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005358:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800535c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005360:	d1ec      	bne.n	800533c <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005362:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005366:	688a      	ldr	r2, [r1, #8]
 8005368:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800536c:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800536e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005372:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005376:	431c      	orrs	r4, r3
 8005378:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800537c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8005380:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
 8005384:	e7da      	b.n	800533c <USB_ActivateEndpoint+0x4a>
	...

08005388 <USB_DeactivateEndpoint>:
{
 8005388:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800538a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800538c:	784a      	ldrb	r2, [r1, #1]
 800538e:	2a01      	cmp	r2, #1
 8005390:	d024      	beq.n	80053dc <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005392:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005396:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800539a:	2a00      	cmp	r2, #0
 800539c:	db50      	blt.n	8005440 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800539e:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80053a2:	780a      	ldrb	r2, [r1, #0]
 80053a4:	f002 020f 	and.w	r2, r2, #15
 80053a8:	2401      	movs	r4, #1
 80053aa:	fa04 f202 	lsl.w	r2, r4, r2
 80053ae:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 80053b2:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053b6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80053ba:	7809      	ldrb	r1, [r1, #0]
 80053bc:	f001 010f 	and.w	r1, r1, #15
 80053c0:	408c      	lsls	r4, r1
 80053c2:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 80053c6:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053ca:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80053ce:	4a23      	ldr	r2, [pc, #140]	; (800545c <USB_DeactivateEndpoint+0xd4>)
 80053d0:	400a      	ands	r2, r1
 80053d2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80053d6:	2000      	movs	r0, #0
 80053d8:	bc30      	pop	{r4, r5}
 80053da:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053dc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80053e0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	db1e      	blt.n	8005426 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053e8:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80053ec:	780a      	ldrb	r2, [r1, #0]
 80053ee:	f002 020f 	and.w	r2, r2, #15
 80053f2:	2401      	movs	r4, #1
 80053f4:	fa04 f202 	lsl.w	r2, r4, r2
 80053f8:	b292      	uxth	r2, r2
 80053fa:	ea25 0202 	bic.w	r2, r5, r2
 80053fe:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005402:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005406:	7809      	ldrb	r1, [r1, #0]
 8005408:	f001 010f 	and.w	r1, r1, #15
 800540c:	408c      	lsls	r4, r1
 800540e:	b2a4      	uxth	r4, r4
 8005410:	ea22 0404 	bic.w	r4, r2, r4
 8005414:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005418:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800541c:	4a10      	ldr	r2, [pc, #64]	; (8005460 <USB_DeactivateEndpoint+0xd8>)
 800541e:	400a      	ands	r2, r1
 8005420:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005424:	e7d7      	b.n	80053d6 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005426:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800542a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800542e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005432:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005436:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800543a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800543e:	e7d3      	b.n	80053e8 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005440:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005444:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005448:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800544c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005450:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005454:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005458:	e7a1      	b.n	800539e <USB_DeactivateEndpoint+0x16>
 800545a:	bf00      	nop
 800545c:	eff37800 	.word	0xeff37800
 8005460:	ec337800 	.word	0xec337800

08005464 <USB_EP0StartXfer>:
{
 8005464:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8005466:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005468:	784c      	ldrb	r4, [r1, #1]
 800546a:	2c01      	cmp	r4, #1
 800546c:	d026      	beq.n	80054bc <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800546e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005472:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8005476:	691c      	ldr	r4, [r3, #16]
 8005478:	0ce4      	lsrs	r4, r4, #19
 800547a:	04e4      	lsls	r4, r4, #19
 800547c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800547e:	691c      	ldr	r4, [r3, #16]
 8005480:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8005484:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8005488:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800548a:	694c      	ldr	r4, [r1, #20]
 800548c:	b10c      	cbz	r4, 8005492 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800548e:	688c      	ldr	r4, [r1, #8]
 8005490:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005492:	691c      	ldr	r4, [r3, #16]
 8005494:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005498:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800549a:	691c      	ldr	r4, [r3, #16]
 800549c:	688d      	ldr	r5, [r1, #8]
 800549e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80054a2:	432c      	orrs	r4, r5
 80054a4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80054a6:	2a01      	cmp	r2, #1
 80054a8:	d065      	beq.n	8005576 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054aa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80054ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80054b6:	2000      	movs	r0, #0
 80054b8:	bc70      	pop	{r4, r5, r6}
 80054ba:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 80054bc:	694c      	ldr	r4, [r1, #20]
 80054be:	bb6c      	cbnz	r4, 800551c <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054c0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80054c4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80054c8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80054cc:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80054d0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054d4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80054d8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80054dc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80054e4:	0ced      	lsrs	r5, r5, #19
 80054e6:	04ed      	lsls	r5, r5, #19
 80054e8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80054ec:	2a01      	cmp	r2, #1
 80054ee:	d033      	beq.n	8005558 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054f0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80054f4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80054f8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80054fc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8005500:	694b      	ldr	r3, [r1, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0d7      	beq.n	80054b6 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005506:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800550a:	780a      	ldrb	r2, [r1, #0]
 800550c:	f002 010f 	and.w	r1, r2, #15
 8005510:	2201      	movs	r2, #1
 8005512:	408a      	lsls	r2, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800551a:	e7cc      	b.n	80054b6 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800551c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005520:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8005524:	6925      	ldr	r5, [r4, #16]
 8005526:	0ced      	lsrs	r5, r5, #19
 8005528:	04ed      	lsls	r5, r5, #19
 800552a:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800552c:	6925      	ldr	r5, [r4, #16]
 800552e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8005532:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8005536:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8005538:	694e      	ldr	r6, [r1, #20]
 800553a:	688d      	ldr	r5, [r1, #8]
 800553c:	42ae      	cmp	r6, r5
 800553e:	d900      	bls.n	8005542 <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 8005540:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005542:	6925      	ldr	r5, [r4, #16]
 8005544:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005548:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800554a:	6925      	ldr	r5, [r4, #16]
 800554c:	694e      	ldr	r6, [r1, #20]
 800554e:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005552:	4335      	orrs	r5, r6
 8005554:	6125      	str	r5, [r4, #16]
 8005556:	e7c9      	b.n	80054ec <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8005558:	690a      	ldr	r2, [r1, #16]
 800555a:	b11a      	cbz	r2, 8005564 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800555c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005560:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005564:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005568:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800556c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005570:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005574:	e79f      	b.n	80054b6 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005576:	68ca      	ldr	r2, [r1, #12]
 8005578:	2a00      	cmp	r2, #0
 800557a:	d096      	beq.n	80054aa <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800557c:	615a      	str	r2, [r3, #20]
 800557e:	e794      	b.n	80054aa <USB_EP0StartXfer+0x46>

08005580 <USB_WritePacket>:
{
 8005580:	b470      	push	{r4, r5, r6}
 8005582:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8005586:	b964      	cbnz	r4, 80055a2 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005588:	3303      	adds	r3, #3
 800558a:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 800558c:	42ac      	cmp	r4, r5
 800558e:	d208      	bcs.n	80055a2 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005590:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005598:	f851 6b04 	ldr.w	r6, [r1], #4
 800559c:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800559e:	3401      	adds	r4, #1
 80055a0:	e7f4      	b.n	800558c <USB_WritePacket+0xc>
}
 80055a2:	2000      	movs	r0, #0
 80055a4:	bc70      	pop	{r4, r5, r6}
 80055a6:	4770      	bx	lr

080055a8 <USB_EPStartXfer>:
{
 80055a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055aa:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80055ac:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80055ae:	784c      	ldrb	r4, [r1, #1]
 80055b0:	2c01      	cmp	r4, #1
 80055b2:	d02b      	beq.n	800560c <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055b4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80055b8:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 80055bc:	6925      	ldr	r5, [r4, #16]
 80055be:	0ced      	lsrs	r5, r5, #19
 80055c0:	04ed      	lsls	r5, r5, #19
 80055c2:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055c4:	6925      	ldr	r5, [r4, #16]
 80055c6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80055ca:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80055ce:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 80055d0:	694d      	ldr	r5, [r1, #20]
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	f040 80c3 	bne.w	800575e <USB_EPStartXfer+0x1b6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055d8:	6925      	ldr	r5, [r4, #16]
 80055da:	688e      	ldr	r6, [r1, #8]
 80055dc:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80055e0:	4335      	orrs	r5, r6
 80055e2:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055e4:	6925      	ldr	r5, [r4, #16]
 80055e6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80055ea:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 80055ec:	2a01      	cmp	r2, #1
 80055ee:	f000 80cb 	beq.w	8005788 <USB_EPStartXfer+0x1e0>
    if (ep->type == EP_TYPE_ISOC)
 80055f2:	78ca      	ldrb	r2, [r1, #3]
 80055f4:	2a01      	cmp	r2, #1
 80055f6:	f000 80cd 	beq.w	8005794 <USB_EPStartXfer+0x1ec>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055fa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80055fe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005602:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005606:	2000      	movs	r0, #0
 8005608:	b003      	add	sp, #12
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800560c:	694c      	ldr	r4, [r1, #20]
 800560e:	bb84      	cbnz	r4, 8005672 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005610:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005614:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005618:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800561c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8005620:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005624:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005628:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800562c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005630:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005634:	0ced      	lsrs	r5, r5, #19
 8005636:	04ed      	lsls	r5, r5, #19
 8005638:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800563c:	2a01      	cmp	r2, #1
 800563e:	d04c      	beq.n	80056da <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005640:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005644:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005648:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800564c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005650:	78cc      	ldrb	r4, [r1, #3]
 8005652:	2c01      	cmp	r4, #1
 8005654:	d06a      	beq.n	800572c <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 8005656:	694b      	ldr	r3, [r1, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0d4      	beq.n	8005606 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800565c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005660:	7809      	ldrb	r1, [r1, #0]
 8005662:	f001 040f 	and.w	r4, r1, #15
 8005666:	2101      	movs	r1, #1
 8005668:	40a1      	lsls	r1, r4
 800566a:	430a      	orrs	r2, r1
 800566c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8005670:	e7c9      	b.n	8005606 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005672:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005676:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800567a:	0ced      	lsrs	r5, r5, #19
 800567c:	04ed      	lsls	r5, r5, #19
 800567e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005682:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005686:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800568a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800568e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005692:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005696:	694d      	ldr	r5, [r1, #20]
 8005698:	688f      	ldr	r7, [r1, #8]
 800569a:	443d      	add	r5, r7
 800569c:	3d01      	subs	r5, #1
 800569e:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056a2:	4f46      	ldr	r7, [pc, #280]	; (80057bc <USB_EPStartXfer+0x214>)
 80056a4:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80056a8:	4335      	orrs	r5, r6
 80056aa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056ae:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80056b2:	694e      	ldr	r6, [r1, #20]
 80056b4:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80056b8:	4335      	orrs	r5, r6
 80056ba:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056be:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80056c2:	78cd      	ldrb	r5, [r1, #3]
 80056c4:	2d01      	cmp	r5, #1
 80056c6:	d1b9      	bne.n	800563c <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056c8:	6925      	ldr	r5, [r4, #16]
 80056ca:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80056ce:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056d0:	6925      	ldr	r5, [r4, #16]
 80056d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80056d6:	6125      	str	r5, [r4, #16]
 80056d8:	e7b0      	b.n	800563c <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 80056da:	690a      	ldr	r2, [r1, #16]
 80056dc:	b11a      	cbz	r2, 80056e6 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056de:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80056e2:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 80056e6:	78ca      	ldrb	r2, [r1, #3]
 80056e8:	2a01      	cmp	r2, #1
 80056ea:	d008      	beq.n	80056fe <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80056f0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80056f4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80056f8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80056fc:	e783      	b.n	8005606 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056fe:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005702:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005706:	d108      	bne.n	800571a <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005708:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800570c:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005710:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005714:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005718:	e7e8      	b.n	80056ec <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800571a:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800571e:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005726:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800572a:	e7df      	b.n	80056ec <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800572c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8005730:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005734:	d10c      	bne.n	8005750 <USB_EPStartXfer+0x1a8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005736:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800573a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800573e:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005742:	9200      	str	r2, [sp, #0]
 8005744:	8a8b      	ldrh	r3, [r1, #20]
 8005746:	780a      	ldrb	r2, [r1, #0]
 8005748:	68c9      	ldr	r1, [r1, #12]
 800574a:	f7ff ff19 	bl	8005580 <USB_WritePacket>
 800574e:	e75a      	b.n	8005606 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005750:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005754:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005758:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800575c:	e7f1      	b.n	8005742 <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800575e:	688e      	ldr	r6, [r1, #8]
 8005760:	4435      	add	r5, r6
 8005762:	3d01      	subs	r5, #1
 8005764:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005768:	6926      	ldr	r6, [r4, #16]
 800576a:	4f14      	ldr	r7, [pc, #80]	; (80057bc <USB_EPStartXfer+0x214>)
 800576c:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8005770:	433e      	orrs	r6, r7
 8005772:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005774:	6927      	ldr	r7, [r4, #16]
 8005776:	688e      	ldr	r6, [r1, #8]
 8005778:	b2ad      	uxth	r5, r5
 800577a:	fb06 f505 	mul.w	r5, r6, r5
 800577e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005782:	433d      	orrs	r5, r7
 8005784:	6125      	str	r5, [r4, #16]
 8005786:	e731      	b.n	80055ec <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005788:	68ca      	ldr	r2, [r1, #12]
 800578a:	2a00      	cmp	r2, #0
 800578c:	f43f af31 	beq.w	80055f2 <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005790:	6162      	str	r2, [r4, #20]
 8005792:	e72e      	b.n	80055f2 <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005794:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005798:	f412 7f80 	tst.w	r2, #256	; 0x100
 800579c:	d106      	bne.n	80057ac <USB_EPStartXfer+0x204>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800579e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80057a2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80057a6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80057aa:	e726      	b.n	80055fa <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057ac:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80057b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057b4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80057b8:	e71f      	b.n	80055fa <USB_EPStartXfer+0x52>
 80057ba:	bf00      	nop
 80057bc:	1ff80000 	.word	0x1ff80000

080057c0 <USB_ReadPacket>:
{
 80057c0:	b4f0      	push	{r4, r5, r6, r7}
 80057c2:	b082      	sub	sp, #8
 80057c4:	4607      	mov	r7, r0
 80057c6:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 80057ca:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 80057cc:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	42ab      	cmp	r3, r5
 80057d4:	d206      	bcs.n	80057e4 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057d6:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 80057da:	6824      	ldr	r4, [r4, #0]
 80057dc:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 80057e0:	3301      	adds	r3, #1
 80057e2:	e7f6      	b.n	80057d2 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 80057e4:	b17a      	cbz	r2, 8005806 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057e6:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	9301      	str	r3, [sp, #4]
    i = 0U;
 80057ee:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057f0:	b2eb      	uxtb	r3, r5
 80057f2:	00dc      	lsls	r4, r3, #3
 80057f4:	9b01      	ldr	r3, [sp, #4]
 80057f6:	40e3      	lsrs	r3, r4
 80057f8:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80057fc:	3501      	adds	r5, #1
      remaining_bytes--;
 80057fe:	3a01      	subs	r2, #1
 8005800:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8005802:	2a00      	cmp	r2, #0
 8005804:	d1f4      	bne.n	80057f0 <USB_ReadPacket+0x30>
}
 8005806:	b002      	add	sp, #8
 8005808:	bcf0      	pop	{r4, r5, r6, r7}
 800580a:	4770      	bx	lr

0800580c <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800580c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800580e:	784a      	ldrb	r2, [r1, #1]
 8005810:	2a01      	cmp	r2, #1
 8005812:	d014      	beq.n	800583e <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005814:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005818:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800581c:	2a00      	cmp	r2, #0
 800581e:	db06      	blt.n	800582e <USB_EPSetStall+0x22>
 8005820:	b12b      	cbz	r3, 800582e <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005822:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800582a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800582e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005836:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800583a:	2000      	movs	r0, #0
 800583c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800583e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005842:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005846:	2a00      	cmp	r2, #0
 8005848:	db06      	blt.n	8005858 <USB_EPSetStall+0x4c>
 800584a:	b12b      	cbz	r3, 8005858 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800584c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005854:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005858:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800585c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005860:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005864:	e7e9      	b.n	800583a <USB_EPSetStall+0x2e>

08005866 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8005866:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005868:	784a      	ldrb	r2, [r1, #1]
 800586a:	2a01      	cmp	r2, #1
 800586c:	d00e      	beq.n	800588c <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800586e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005872:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800587a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800587e:	78cb      	ldrb	r3, [r1, #3]
 8005880:	3b02      	subs	r3, #2
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d915      	bls.n	80058b4 <USB_EPClearStall+0x4e>
}
 8005888:	2000      	movs	r0, #0
 800588a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800588c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005890:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005898:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800589c:	78cb      	ldrb	r3, [r1, #3]
 800589e:	3b02      	subs	r3, #2
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d8f0      	bhi.n	8005888 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058a6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80058b2:	e7e9      	b.n	8005888 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80058b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80058c0:	e7e2      	b.n	8005888 <USB_EPClearStall+0x22>

080058c2 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058c2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80058c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058ca:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058ce:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80058d2:	0109      	lsls	r1, r1, #4
 80058d4:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80058d8:	4319      	orrs	r1, r3
 80058da:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80058de:	2000      	movs	r0, #0
 80058e0:	4770      	bx	lr

080058e2 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058e2:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058ee:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80058f2:	f023 0302 	bic.w	r3, r3, #2
 80058f6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80058fa:	2000      	movs	r0, #0
 80058fc:	4770      	bx	lr

080058fe <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058fe:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800590a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005916:	2000      	movs	r0, #0
 8005918:	4770      	bx	lr

0800591a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800591a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800591c:	6980      	ldr	r0, [r0, #24]
}
 800591e:	4010      	ands	r0, r2
 8005920:	4770      	bx	lr

08005922 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005922:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005926:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800592a:	69c0      	ldr	r0, [r0, #28]
 800592c:	4018      	ands	r0, r3
}
 800592e:	0c00      	lsrs	r0, r0, #16
 8005930:	4770      	bx	lr

08005932 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005932:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005936:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800593a:	69c0      	ldr	r0, [r0, #28]
 800593c:	4018      	ands	r0, r3
}
 800593e:	b280      	uxth	r0, r0
 8005940:	4770      	bx	lr

08005942 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005942:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005946:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800594a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800594e:	6940      	ldr	r0, [r0, #20]
}
 8005950:	4010      	ands	r0, r2
 8005952:	4770      	bx	lr

08005954 <USB_ReadDevInEPInterrupt>:
{
 8005954:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8005956:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800595a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800595e:	f001 020f 	and.w	r2, r1, #15
 8005962:	40d3      	lsrs	r3, r2
 8005964:	01db      	lsls	r3, r3, #7
 8005966:	b2db      	uxtb	r3, r3
 8005968:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800596a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800596e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8005972:	6880      	ldr	r0, [r0, #8]
}
 8005974:	4018      	ands	r0, r3
 8005976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800597c:	6940      	ldr	r0, [r0, #20]
}
 800597e:	f000 0001 	and.w	r0, r0, #1
 8005982:	4770      	bx	lr

08005984 <USB_SetCurrentMode>:
{
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005988:	68c3      	ldr	r3, [r0, #12]
 800598a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800598e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005990:	2901      	cmp	r1, #1
 8005992:	d013      	beq.n	80059bc <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8005994:	bb19      	cbnz	r1, 80059de <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005996:	68c3      	ldr	r3, [r0, #12]
 8005998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800599c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800599e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80059a0:	2001      	movs	r0, #1
 80059a2:	f7fc fbf7 	bl	8002194 <HAL_Delay>
      ms++;
 80059a6:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7ff ffe7 	bl	800597c <USB_GetMode>
 80059ae:	b108      	cbz	r0, 80059b4 <USB_SetCurrentMode+0x30>
 80059b0:	2c31      	cmp	r4, #49	; 0x31
 80059b2:	d9f5      	bls.n	80059a0 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 80059b4:	2c32      	cmp	r4, #50	; 0x32
 80059b6:	d014      	beq.n	80059e2 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80059b8:	2000      	movs	r0, #0
}
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059bc:	68c3      	ldr	r3, [r0, #12]
 80059be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059c2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80059c4:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80059c6:	2001      	movs	r0, #1
 80059c8:	f7fc fbe4 	bl	8002194 <HAL_Delay>
      ms++;
 80059cc:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7ff ffd4 	bl	800597c <USB_GetMode>
 80059d4:	2801      	cmp	r0, #1
 80059d6:	d0ed      	beq.n	80059b4 <USB_SetCurrentMode+0x30>
 80059d8:	2c31      	cmp	r4, #49	; 0x31
 80059da:	d9f4      	bls.n	80059c6 <USB_SetCurrentMode+0x42>
 80059dc:	e7ea      	b.n	80059b4 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80059de:	2001      	movs	r0, #1
 80059e0:	e7eb      	b.n	80059ba <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80059e2:	2001      	movs	r0, #1
 80059e4:	e7e9      	b.n	80059ba <USB_SetCurrentMode+0x36>

080059e6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80059ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059f6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005a02:	2000      	movs	r0, #0
 8005a04:	4770      	bx	lr
	...

08005a08 <USB_EP0_OutStart>:
{
 8005a08:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a0a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a0c:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <USB_EP0_OutStart+0x5c>)
 8005a0e:	429c      	cmp	r4, r3
 8005a10:	d903      	bls.n	8005a1a <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a12:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	db16      	blt.n	8005a48 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a1a:	2400      	movs	r4, #0
 8005a1c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a20:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005a24:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005a28:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a2c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005a30:	f044 0418 	orr.w	r4, r4, #24
 8005a34:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a38:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005a3c:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005a40:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8005a44:	2901      	cmp	r1, #1
 8005a46:	d003      	beq.n	8005a50 <USB_EP0_OutStart+0x48>
}
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a4e:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a50:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a54:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a58:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a5c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005a60:	e7f2      	b.n	8005a48 <USB_EP0_OutStart+0x40>
 8005a62:	bf00      	nop
 8005a64:	4f54300a 	.word	0x4f54300a

08005a68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a68:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a6a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005a6e:	b184      	cbz	r4, 8005a92 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a70:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005a74:	b17b      	cbz	r3, 8005a96 <USBD_CDC_EP0_RxReady+0x2e>
 8005a76:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005a7a:	28ff      	cmp	r0, #255	; 0xff
 8005a7c:	d00d      	beq.n	8005a9a <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005a84:	4621      	mov	r1, r4
 8005a86:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005a88:	23ff      	movs	r3, #255	; 0xff
 8005a8a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a8e:	2000      	movs	r0, #0
}
 8005a90:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005a92:	2003      	movs	r0, #3
 8005a94:	e7fc      	b.n	8005a90 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8005a96:	2000      	movs	r0, #0
 8005a98:	e7fa      	b.n	8005a90 <USBD_CDC_EP0_RxReady+0x28>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e7f8      	b.n	8005a90 <USBD_CDC_EP0_RxReady+0x28>
	...

08005aa0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005aa0:	2343      	movs	r3, #67	; 0x43
 8005aa2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8005aa4:	4800      	ldr	r0, [pc, #0]	; (8005aa8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005aa6:	4770      	bx	lr
 8005aa8:	2000004c 	.word	0x2000004c

08005aac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005aac:	2343      	movs	r3, #67	; 0x43
 8005aae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005ab0:	4800      	ldr	r0, [pc, #0]	; (8005ab4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005ab2:	4770      	bx	lr
 8005ab4:	20000090 	.word	0x20000090

08005ab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ab8:	2343      	movs	r3, #67	; 0x43
 8005aba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005abc:	4800      	ldr	r0, [pc, #0]	; (8005ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005abe:	4770      	bx	lr
 8005ac0:	200000e0 	.word	0x200000e0

08005ac4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ac4:	230a      	movs	r3, #10
 8005ac6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005ac8:	4800      	ldr	r0, [pc, #0]	; (8005acc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005aca:	4770      	bx	lr
 8005acc:	200000d4 	.word	0x200000d4

08005ad0 <USBD_CDC_DataOut>:
{
 8005ad0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ad2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8005ad6:	b175      	cbz	r5, 8005af6 <USBD_CDC_DataOut+0x26>
 8005ad8:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ada:	f001 f8f8 	bl	8006cce <USBD_LL_GetRxDataSize>
 8005ade:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ae2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005aec:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005af0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005af2:	2000      	movs	r0, #0
}
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005af6:	2003      	movs	r0, #3
 8005af8:	e7fc      	b.n	8005af4 <USBD_CDC_DataOut+0x24>

08005afa <USBD_CDC_DataIn>:
{
 8005afa:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005afc:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8005b00:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005b04:	b353      	cbz	r3, 8005b5c <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b06:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005b0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005b0e:	6992      	ldr	r2, [r2, #24]
 8005b10:	b14a      	cbz	r2, 8005b26 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b12:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 8005b16:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8005b1a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8005b1c:	fbb2 f4f5 	udiv	r4, r2, r5
 8005b20:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b24:	b172      	cbz	r2, 8005b44 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005b2c:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8005b30:	6914      	ldr	r4, [r2, #16]
 8005b32:	b1ac      	cbz	r4, 8005b60 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b34:	460a      	mov	r2, r1
 8005b36:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8005b3a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8005b3e:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8005b40:	2000      	movs	r0, #0
}
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8005b44:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005b48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b4c:	2400      	movs	r4, #0
 8005b4e:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b50:	4623      	mov	r3, r4
 8005b52:	4622      	mov	r2, r4
 8005b54:	f001 f904 	bl	8006d60 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8005b58:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b5a:	e7f2      	b.n	8005b42 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8005b5c:	2003      	movs	r0, #3
 8005b5e:	e7f0      	b.n	8005b42 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8005b60:	2000      	movs	r0, #0
 8005b62:	e7ee      	b.n	8005b42 <USBD_CDC_DataIn+0x48>

08005b64 <USBD_CDC_Setup>:
{
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b68:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8005b72:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	d06c      	beq.n	8005c54 <USBD_CDC_Setup+0xf0>
 8005b7a:	4607      	mov	r7, r0
 8005b7c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7e:	780b      	ldrb	r3, [r1, #0]
 8005b80:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005b84:	d02a      	beq.n	8005bdc <USBD_CDC_Setup+0x78>
 8005b86:	2d20      	cmp	r5, #32
 8005b88:	d15e      	bne.n	8005c48 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8005b8a:	88ca      	ldrh	r2, [r1, #6]
 8005b8c:	b1f2      	cbz	r2, 8005bcc <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8005b8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b92:	d00f      	beq.n	8005bb4 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b94:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	7860      	ldrb	r0, [r4, #1]
 8005b9e:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ba0:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ba2:	2a07      	cmp	r2, #7
 8005ba4:	bf28      	it	cs
 8005ba6:	2207      	movcs	r2, #7
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4638      	mov	r0, r7
 8005bac:	f000 fe10 	bl	80067d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005bb0:	2500      	movs	r5, #0
 8005bb2:	e04c      	b.n	8005c4e <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8005bb4:	784b      	ldrb	r3, [r1, #1]
 8005bb6:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bba:	798b      	ldrb	r3, [r1, #6]
 8005bbc:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005bc0:	88ca      	ldrh	r2, [r1, #6]
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	f000 fe19 	bl	80067fa <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8005bc8:	2500      	movs	r5, #0
 8005bca:	e040      	b.n	8005c4e <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bcc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	7848      	ldrb	r0, [r1, #1]
 8005bd6:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8005bd8:	2500      	movs	r5, #0
 8005bda:	e038      	b.n	8005c4e <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8005bdc:	784e      	ldrb	r6, [r1, #1]
 8005bde:	2e0b      	cmp	r6, #11
 8005be0:	d82e      	bhi.n	8005c40 <USBD_CDC_Setup+0xdc>
 8005be2:	e8df f006 	tbb	[pc, r6]
 8005be6:	3406      	.short	0x3406
 8005be8:	2d2d2d2d 	.word	0x2d2d2d2d
 8005bec:	2d2d2d2d 	.word	0x2d2d2d2d
 8005bf0:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d003      	beq.n	8005c04 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8005bfc:	f000 fac1 	bl	8006182 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c00:	2503      	movs	r5, #3
 8005c02:	e024      	b.n	8005c4e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c04:	2202      	movs	r2, #2
 8005c06:	a901      	add	r1, sp, #4
 8005c08:	f000 fde2 	bl	80067d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005c0c:	4635      	mov	r5, r6
 8005c0e:	e01e      	b.n	8005c4e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d003      	beq.n	8005c22 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8005c1a:	f000 fab2 	bl	8006182 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c1e:	2503      	movs	r5, #3
 8005c20:	e015      	b.n	8005c4e <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c22:	2201      	movs	r2, #1
 8005c24:	f10d 0107 	add.w	r1, sp, #7
 8005c28:	f000 fdd2 	bl	80067d0 <USBD_CtlSendData>
 8005c2c:	e00f      	b.n	8005c4e <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d00a      	beq.n	8005c4e <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8005c38:	f000 faa3 	bl	8006182 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c3c:	2503      	movs	r5, #3
 8005c3e:	e006      	b.n	8005c4e <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8005c40:	f000 fa9f 	bl	8006182 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c44:	2503      	movs	r5, #3
          break;
 8005c46:	e002      	b.n	8005c4e <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8005c48:	f000 fa9b 	bl	8006182 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c4c:	2503      	movs	r5, #3
}
 8005c4e:	4628      	mov	r0, r5
 8005c50:	b003      	add	sp, #12
 8005c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8005c54:	2503      	movs	r5, #3
 8005c56:	e7fa      	b.n	8005c4e <USBD_CDC_Setup+0xea>

08005c58 <USBD_CDC_DeInit>:
{
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c5c:	2181      	movs	r1, #129	; 0x81
 8005c5e:	f001 f85f 	bl	8006d20 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c62:	2500      	movs	r5, #0
 8005c64:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c66:	2101      	movs	r1, #1
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f001 f859 	bl	8006d20 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c6e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c72:	2182      	movs	r1, #130	; 0x82
 8005c74:	4620      	mov	r0, r4
 8005c76:	f001 f853 	bl	8006d20 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c7a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c7e:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8005c82:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005c86:	b14b      	cbz	r3, 8005c9c <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c88:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005c90:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8005c94:	f001 f826 	bl	8006ce4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c98:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}

08005ca0 <USBD_CDC_Init>:
{
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ca4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ca8:	f001 f818 	bl	8006cdc <USBD_static_malloc>
  if (hcdc == NULL)
 8005cac:	b3b8      	cbz	r0, 8005d1e <USBD_CDC_Init+0x7e>
 8005cae:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8005cb0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cb4:	7c23      	ldrb	r3, [r4, #16]
 8005cb6:	bbbb      	cbnz	r3, 8005d28 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	2181      	movs	r1, #129	; 0x81
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f001 f822 	bl	8006d0a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cc6:	2501      	movs	r5, #1
 8005cc8:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cce:	2202      	movs	r2, #2
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f001 f819 	bl	8006d0a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cd8:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	2182      	movs	r1, #130	; 0x82
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f001 f80e 	bl	8006d0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005cf4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4798      	blx	r3
  hcdc->TxState = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d02:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d06:	7c25      	ldrb	r5, [r4, #16]
 8005d08:	bb15      	cbnz	r5, 8005d50 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d0e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8005d12:	2101      	movs	r1, #1
 8005d14:	4620      	mov	r0, r4
 8005d16:	f001 f82b 	bl	8006d70 <USBD_LL_PrepareReceive>
}
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d24:	2502      	movs	r5, #2
 8005d26:	e7f8      	b.n	8005d1a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d28:	2340      	movs	r3, #64	; 0x40
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	2181      	movs	r1, #129	; 0x81
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 ffeb 	bl	8006d0a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d34:	2501      	movs	r5, #1
 8005d36:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 ffe3 	bl	8006d0a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d44:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8005d4e:	e7c8      	b.n	8005ce2 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d50:	2340      	movs	r3, #64	; 0x40
 8005d52:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8005d56:	2101      	movs	r1, #1
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f001 f809 	bl	8006d70 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005d5e:	2500      	movs	r5, #0
 8005d60:	e7db      	b.n	8005d1a <USBD_CDC_Init+0x7a>

08005d62 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005d62:	b119      	cbz	r1, 8005d6c <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8005d64:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d68:	2000      	movs	r0, #0
 8005d6a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005d6c:	2003      	movs	r0, #3
}
 8005d6e:	4770      	bx	lr

08005d70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d70:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005d74:	b12b      	cbz	r3, 8005d82 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8005d76:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d7e:	2000      	movs	r0, #0
 8005d80:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005d82:	2003      	movs	r0, #3
}
 8005d84:	4770      	bx	lr

08005d86 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d86:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005d8a:	b11b      	cbz	r3, 8005d94 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8005d8c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d90:	2000      	movs	r0, #0
 8005d92:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005d94:	2003      	movs	r0, #3
}
 8005d96:	4770      	bx	lr

08005d98 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d98:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8005d9c:	b1a2      	cbz	r2, 8005dc8 <USBD_CDC_TransmitPacket+0x30>
{
 8005d9e:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8005da0:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8005da4:	b10b      	cbz	r3, 8005daa <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005da6:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8005da8:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005db0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8005db4:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005db6:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8005dba:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005dbe:	2181      	movs	r1, #129	; 0x81
 8005dc0:	f000 ffce 	bl	8006d60 <USBD_LL_Transmit>
    ret = USBD_OK;
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e7ef      	b.n	8005da8 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8005dc8:	2003      	movs	r0, #3
}
 8005dca:	4770      	bx	lr

08005dcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dcc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dce:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8005dd2:	b192      	cbz	r2, 8005dfa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd4:	7c04      	ldrb	r4, [r0, #16]
 8005dd6:	b944      	cbnz	r4, 8005dea <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ddc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005de0:	2101      	movs	r1, #1
 8005de2:	f000 ffc5 	bl	8006d70 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8005de6:	4620      	mov	r0, r4
 8005de8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dea:	2340      	movs	r3, #64	; 0x40
 8005dec:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005df0:	2101      	movs	r1, #1
 8005df2:	f000 ffbd 	bl	8006d70 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005df6:	2400      	movs	r4, #0
 8005df8:	e7f5      	b.n	8005de6 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8005dfa:	2403      	movs	r4, #3
 8005dfc:	e7f3      	b.n	8005de6 <USBD_CDC_ReceivePacket+0x1a>

08005dfe <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005dfe:	b198      	cbz	r0, 8005e28 <USBD_Init+0x2a>
{
 8005e00:	b508      	push	{r3, lr}
 8005e02:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005e04:	2000      	movs	r0, #0
 8005e06:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005e0a:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005e0e:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e12:	b109      	cbz	r1, 8005e18 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8005e14:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e18:	2101      	movs	r1, #1
 8005e1a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 ff09 	bl	8006c38 <USBD_LL_Init>

  return ret;
}
 8005e26:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005e28:	2003      	movs	r0, #3
}
 8005e2a:	4770      	bx	lr

08005e2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005e36:	b161      	cbz	r1, 8005e52 <USBD_RegisterClass+0x26>
 8005e38:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e3a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e3e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005e40:	b14b      	cbz	r3, 8005e56 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e42:	f10d 0006 	add.w	r0, sp, #6
 8005e46:	4798      	blx	r3
 8005e48:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005e4c:	2000      	movs	r0, #0
}
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005e52:	2003      	movs	r0, #3
 8005e54:	e7fb      	b.n	8005e4e <USBD_RegisterClass+0x22>
  return USBD_OK;
 8005e56:	2000      	movs	r0, #0
 8005e58:	e7f9      	b.n	8005e4e <USBD_RegisterClass+0x22>

08005e5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e5a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e5c:	f000 ff4d 	bl	8006cfa <USBD_LL_Start>
}
 8005e60:	bd08      	pop	{r3, pc}

08005e62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e62:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005e64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005e68:	b113      	cbz	r3, 8005e70 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4798      	blx	r3
  }

  return ret;
}
 8005e6e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e70:	2003      	movs	r0, #3
 8005e72:	e7fc      	b.n	8005e6e <USBD_SetClassConfig+0xc>

08005e74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e74:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e76:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005e7a:	b10b      	cbz	r3, 8005e80 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005e80:	2000      	movs	r0, #0
 8005e82:	bd08      	pop	{r3, pc}

08005e84 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e88:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 f964 	bl	800615a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e98:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005e9c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ea0:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8005ea4:	f001 031f 	and.w	r3, r1, #31
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d00d      	beq.n	8005ec8 <USBD_LL_SetupStage+0x44>
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d010      	beq.n	8005ed2 <USBD_LL_SetupStage+0x4e>
 8005eb0:	b12b      	cbz	r3, 8005ebe <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005eb2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 ff3a 	bl	8006d30 <USBD_LL_StallEP>
      break;
 8005ebc:	e003      	b.n	8005ec6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 fb08 	bl	80064d6 <USBD_StdDevReq>
  }

  return ret;
}
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fb3b 	bl	8006546 <USBD_StdItfReq>
      break;
 8005ed0:	e7f9      	b.n	8005ec6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f000 fb6a 	bl	80065ae <USBD_StdEPReq>
      break;
 8005eda:	e7f4      	b.n	8005ec6 <USBD_LL_SetupStage+0x42>

08005edc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	bb41      	cbnz	r1, 8005f36 <USBD_LL_DataOutStage+0x5a>
 8005ee4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ee6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005eea:	2a03      	cmp	r2, #3
 8005eec:	d001      	beq.n	8005ef2 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8005eee:	4608      	mov	r0, r1
}
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005ef2:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8005ef6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8005efa:	4291      	cmp	r1, r2
 8005efc:	d809      	bhi.n	8005f12 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d00f      	beq.n	8005f28 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fc8d 	bl	8006828 <USBD_CtlSendStatus>
  return USBD_OK;
 8005f0e:	4628      	mov	r0, r5
 8005f10:	e7ee      	b.n	8005ef0 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005f12:	1a89      	subs	r1, r1, r2
 8005f14:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	bf28      	it	cs
 8005f1c:	460a      	movcs	r2, r1
 8005f1e:	4619      	mov	r1, r3
 8005f20:	f000 fc7a 	bl	8006818 <USBD_CtlContinueRx>
  return USBD_OK;
 8005f24:	4628      	mov	r0, r5
 8005f26:	e7e3      	b.n	8005ef0 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8005f28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ea      	beq.n	8005f08 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8005f32:	4798      	blx	r3
 8005f34:	e7e8      	b.n	8005f08 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d001      	beq.n	8005f44 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7d5      	b.n	8005ef0 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8005f44:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	b10b      	cbz	r3, 8005f50 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f4c:	4798      	blx	r3
        if (ret != USBD_OK)
 8005f4e:	e7cf      	b.n	8005ef0 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8005f50:	2000      	movs	r0, #0
 8005f52:	e7cd      	b.n	8005ef0 <USBD_LL_DataOutStage+0x14>

08005f54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f58:	460d      	mov	r5, r1
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	d14a      	bne.n	8005ff4 <USBD_LL_DataInStage+0xa0>
 8005f5e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f60:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005f64:	2a02      	cmp	r2, #2
 8005f66:	d005      	beq.n	8005f74 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f68:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d03c      	beq.n	8005fea <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8005f70:	4628      	mov	r0, r5
}
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005f74:	69c2      	ldr	r2, [r0, #28]
 8005f76:	6a01      	ldr	r1, [r0, #32]
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	d80e      	bhi.n	8005f9a <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8005f7c:	428a      	cmp	r2, r1
 8005f7e:	d018      	beq.n	8005fb2 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f80:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d027      	beq.n	8005fda <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 fecf 	bl	8006d30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 fc53 	bl	800683e <USBD_CtlReceiveStatus>
 8005f98:	e7e6      	b.n	8005f68 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005f9a:	1a52      	subs	r2, r2, r1
 8005f9c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f000 fc23 	bl	80067ea <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 fee0 	bl	8006d70 <USBD_LL_PrepareReceive>
 8005fb0:	e7da      	b.n	8005f68 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8005fb2:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	d8e3      	bhi.n	8005f80 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8005fb8:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d2df      	bcs.n	8005f80 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	f000 fc11 	bl	80067ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fce:	460b      	mov	r3, r1
 8005fd0:	460a      	mov	r2, r1
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fecc 	bl	8006d70 <USBD_LL_PrepareReceive>
 8005fd8:	e7c6      	b.n	8005f68 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8005fda:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0d2      	beq.n	8005f8a <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4798      	blx	r3
 8005fe8:	e7cf      	b.n	8005f8a <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	e7be      	b.n	8005f72 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d001      	beq.n	8006002 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8005ffe:	2000      	movs	r0, #0
 8006000:	e7b7      	b.n	8005f72 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8006002:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	b10b      	cbz	r3, 800600e <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800600a:	4798      	blx	r3
        if (ret != USBD_OK)
 800600c:	e7b1      	b.n	8005f72 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800600e:	2000      	movs	r0, #0
 8006010:	e7af      	b.n	8005f72 <USBD_LL_DataInStage+0x1e>

08006012 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006012:	2301      	movs	r3, #1
 8006014:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006018:	2300      	movs	r3, #0
 800601a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800601e:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006020:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006024:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006028:	b1f3      	cbz	r3, 8006068 <USBD_LL_Reset+0x56>
{
 800602a:	b570      	push	{r4, r5, r6, lr}
 800602c:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800602e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006032:	b11a      	cbz	r2, 800603c <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b10b      	cbz	r3, 800603c <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006038:	2100      	movs	r1, #0
 800603a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	4611      	mov	r1, r2
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fe61 	bl	8006d0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006048:	2601      	movs	r6, #1
 800604a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800604e:	2540      	movs	r5, #64	; 0x40
 8006050:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006054:	462b      	mov	r3, r5
 8006056:	2200      	movs	r2, #0
 8006058:	2180      	movs	r1, #128	; 0x80
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fe55 	bl	8006d0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006060:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006062:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8006064:	2000      	movs	r0, #0
}
 8006066:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006068:	2003      	movs	r0, #3
}
 800606a:	4770      	bx	lr

0800606c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800606c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800606e:	2000      	movs	r0, #0
 8006070:	4770      	bx	lr

08006072 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006072:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800607c:	2304      	movs	r3, #4
 800607e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006082:	2000      	movs	r0, #0
 8006084:	4770      	bx	lr

08006086 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006086:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b04      	cmp	r3, #4
 800608e:	d001      	beq.n	8006094 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006090:	2000      	movs	r0, #0
 8006092:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8006094:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800609e:	e7f7      	b.n	8006090 <USBD_LL_Resume+0xa>

080060a0 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 80060a0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80060a4:	b162      	cbz	r2, 80060c0 <USBD_LL_SOF+0x20>
{
 80060a6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d001      	beq.n	80060b6 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 80060b2:	2000      	movs	r0, #0
}
 80060b4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80060b6:	69d3      	ldr	r3, [r2, #28]
 80060b8:	b123      	cbz	r3, 80060c4 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 80060ba:	4798      	blx	r3
  return USBD_OK;
 80060bc:	2000      	movs	r0, #0
 80060be:	e7f9      	b.n	80060b4 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 80060c0:	2003      	movs	r0, #3
}
 80060c2:	4770      	bx	lr
  return USBD_OK;
 80060c4:	2000      	movs	r0, #0
 80060c6:	e7f5      	b.n	80060b4 <USBD_LL_SOF+0x14>

080060c8 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80060c8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80060cc:	b162      	cbz	r2, 80060e8 <USBD_LL_IsoINIncomplete+0x20>
{
 80060ce:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d001      	beq.n	80060de <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80060da:	2000      	movs	r0, #0
}
 80060dc:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 80060de:	6a13      	ldr	r3, [r2, #32]
 80060e0:	b123      	cbz	r3, 80060ec <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80060e2:	4798      	blx	r3
  return USBD_OK;
 80060e4:	2000      	movs	r0, #0
 80060e6:	e7f9      	b.n	80060dc <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 80060e8:	2003      	movs	r0, #3
}
 80060ea:	4770      	bx	lr
  return USBD_OK;
 80060ec:	2000      	movs	r0, #0
 80060ee:	e7f5      	b.n	80060dc <USBD_LL_IsoINIncomplete+0x14>

080060f0 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80060f0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80060f4:	b162      	cbz	r2, 8006110 <USBD_LL_IsoOUTIncomplete+0x20>
{
 80060f6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d001      	beq.n	8006106 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006102:	2000      	movs	r0, #0
}
 8006104:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006106:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006108:	b123      	cbz	r3, 8006114 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800610a:	4798      	blx	r3
  return USBD_OK;
 800610c:	2000      	movs	r0, #0
 800610e:	e7f9      	b.n	8006104 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 8006110:	2003      	movs	r0, #3
}
 8006112:	4770      	bx	lr
  return USBD_OK;
 8006114:	2000      	movs	r0, #0
 8006116:	e7f5      	b.n	8006104 <USBD_LL_IsoOUTIncomplete+0x14>

08006118 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8006118:	2000      	movs	r0, #0
 800611a:	4770      	bx	lr

0800611c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800611c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800611e:	2301      	movs	r3, #1
 8006120:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006124:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006128:	b113      	cbz	r3, 8006130 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	7901      	ldrb	r1, [r0, #4]
 800612e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006130:	2000      	movs	r0, #0
 8006132:	bd08      	pop	{r3, pc}

08006134 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006134:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006136:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	b11a      	cbz	r2, 8006144 <USBD_GetLen+0x10>
  {
    len++;
 800613c:	3001      	adds	r0, #1
 800613e:	b2c0      	uxtb	r0, r0
    pbuff++;
 8006140:	3301      	adds	r3, #1
 8006142:	e7f9      	b.n	8006138 <USBD_GetLen+0x4>
  }

  return len;
}
 8006144:	4770      	bx	lr

08006146 <USBD_SetFeature>:
{
 8006146:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006148:	884b      	ldrh	r3, [r1, #2]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d000      	beq.n	8006150 <USBD_SetFeature+0xa>
}
 800614e:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8006150:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006154:	f000 fb68 	bl	8006828 <USBD_CtlSendStatus>
}
 8006158:	e7f9      	b.n	800614e <USBD_SetFeature+0x8>

0800615a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800615a:	780b      	ldrb	r3, [r1, #0]
 800615c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800615e:	784b      	ldrb	r3, [r1, #1]
 8006160:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8006162:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006164:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800616a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800616c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800616e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006174:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8006176:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8006178:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800617a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800617e:	80c3      	strh	r3, [r0, #6]
}
 8006180:	4770      	bx	lr

08006182 <USBD_CtlError>:
{
 8006182:	b510      	push	{r4, lr}
 8006184:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	f000 fdd2 	bl	8006d30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800618c:	2100      	movs	r1, #0
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fdce 	bl	8006d30 <USBD_LL_StallEP>
}
 8006194:	bd10      	pop	{r4, pc}

08006196 <USBD_GetDescriptor>:
{
 8006196:	b530      	push	{r4, r5, lr}
 8006198:	b083      	sub	sp, #12
 800619a:	4604      	mov	r4, r0
 800619c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80061a4:	884a      	ldrh	r2, [r1, #2]
 80061a6:	0a13      	lsrs	r3, r2, #8
 80061a8:	3b01      	subs	r3, #1
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	f200 80ab 	bhi.w	8006306 <USBD_GetDescriptor+0x170>
 80061b0:	e8df f003 	tbb	[pc, r3]
 80061b4:	a9331f04 	.word	0xa9331f04
 80061b8:	8da9      	.short	0x8da9
 80061ba:	9a          	.byte	0x9a
 80061bb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f10d 0106 	add.w	r1, sp, #6
 80061c6:	7c00      	ldrb	r0, [r0, #16]
 80061c8:	4798      	blx	r3
  if (req->wLength != 0U)
 80061ca:	88ea      	ldrh	r2, [r5, #6]
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	f000 80a3 	beq.w	8006318 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80061d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8099 	beq.w	800630e <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 80061dc:	429a      	cmp	r2, r3
 80061de:	bf28      	it	cs
 80061e0:	461a      	movcs	r2, r3
 80061e2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80061e6:	4601      	mov	r1, r0
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 faf1 	bl	80067d0 <USBD_CtlSendData>
}
 80061ee:	b003      	add	sp, #12
 80061f0:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f2:	7c03      	ldrb	r3, [r0, #16]
 80061f4:	b943      	cbnz	r3, 8006208 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80061f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f10d 0006 	add.w	r0, sp, #6
 8006200:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006202:	2302      	movs	r3, #2
 8006204:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006206:	e7e0      	b.n	80061ca <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006208:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	f10d 0006 	add.w	r0, sp, #6
 8006212:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006214:	2302      	movs	r3, #2
 8006216:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006218:	e7d7      	b.n	80061ca <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	2a05      	cmp	r2, #5
 800621e:	d852      	bhi.n	80062c6 <USBD_GetDescriptor+0x130>
 8006220:	e8df f002 	tbb	[pc, r2]
 8006224:	2a1d1003 	.word	0x2a1d1003
 8006228:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800622a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b123      	cbz	r3, 800623c <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006232:	f10d 0106 	add.w	r1, sp, #6
 8006236:	7c00      	ldrb	r0, [r0, #16]
 8006238:	4798      	blx	r3
  if (err != 0U)
 800623a:	e7c6      	b.n	80061ca <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800623c:	4629      	mov	r1, r5
 800623e:	f7ff ffa0 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 8006242:	e7d4      	b.n	80061ee <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006244:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	b123      	cbz	r3, 8006256 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800624c:	f10d 0106 	add.w	r1, sp, #6
 8006250:	7c00      	ldrb	r0, [r0, #16]
 8006252:	4798      	blx	r3
  if (err != 0U)
 8006254:	e7b9      	b.n	80061ca <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006256:	4629      	mov	r1, r5
 8006258:	f7ff ff93 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 800625c:	e7c7      	b.n	80061ee <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800625e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	b123      	cbz	r3, 8006270 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006266:	f10d 0106 	add.w	r1, sp, #6
 800626a:	7c00      	ldrb	r0, [r0, #16]
 800626c:	4798      	blx	r3
  if (err != 0U)
 800626e:	e7ac      	b.n	80061ca <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006270:	4629      	mov	r1, r5
 8006272:	f7ff ff86 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 8006276:	e7ba      	b.n	80061ee <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006278:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	b123      	cbz	r3, 800628a <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006280:	f10d 0106 	add.w	r1, sp, #6
 8006284:	7c00      	ldrb	r0, [r0, #16]
 8006286:	4798      	blx	r3
  if (err != 0U)
 8006288:	e79f      	b.n	80061ca <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800628a:	4629      	mov	r1, r5
 800628c:	f7ff ff79 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 8006290:	e7ad      	b.n	80061ee <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006292:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	b123      	cbz	r3, 80062a4 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800629a:	f10d 0106 	add.w	r1, sp, #6
 800629e:	7c00      	ldrb	r0, [r0, #16]
 80062a0:	4798      	blx	r3
  if (err != 0U)
 80062a2:	e792      	b.n	80061ca <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7ff ff6c 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 80062aa:	e7a0      	b.n	80061ee <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	b123      	cbz	r3, 80062be <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062b4:	f10d 0106 	add.w	r1, sp, #6
 80062b8:	7c00      	ldrb	r0, [r0, #16]
 80062ba:	4798      	blx	r3
  if (err != 0U)
 80062bc:	e785      	b.n	80061ca <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80062be:	4629      	mov	r1, r5
 80062c0:	f7ff ff5f 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 80062c4:	e793      	b.n	80061ee <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7ff ff5b 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 80062cc:	e78f      	b.n	80061ee <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ce:	7c03      	ldrb	r3, [r0, #16]
 80062d0:	b933      	cbnz	r3, 80062e0 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	f10d 0006 	add.w	r0, sp, #6
 80062dc:	4798      	blx	r3
  if (err != 0U)
 80062de:	e774      	b.n	80061ca <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7ff ff4e 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 80062e6:	e782      	b.n	80061ee <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e8:	7c03      	ldrb	r3, [r0, #16]
 80062ea:	b943      	cbnz	r3, 80062fe <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	f10d 0006 	add.w	r0, sp, #6
 80062f6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062f8:	2307      	movs	r3, #7
 80062fa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80062fc:	e765      	b.n	80061ca <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80062fe:	4629      	mov	r1, r5
 8006300:	f7ff ff3f 	bl	8006182 <USBD_CtlError>
  if (err != 0U)
 8006304:	e773      	b.n	80061ee <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8006306:	4629      	mov	r1, r5
 8006308:	f7ff ff3b 	bl	8006182 <USBD_CtlError>
    return;
 800630c:	e76f      	b.n	80061ee <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800630e:	4629      	mov	r1, r5
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff ff36 	bl	8006182 <USBD_CtlError>
 8006316:	e76a      	b.n	80061ee <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fa85 	bl	8006828 <USBD_CtlSendStatus>
 800631e:	e766      	b.n	80061ee <USBD_GetDescriptor+0x58>

08006320 <USBD_SetAddress>:
{
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006324:	888b      	ldrh	r3, [r1, #4]
 8006326:	b9fb      	cbnz	r3, 8006368 <USBD_SetAddress+0x48>
 8006328:	88cb      	ldrh	r3, [r1, #6]
 800632a:	b9eb      	cbnz	r3, 8006368 <USBD_SetAddress+0x48>
 800632c:	884b      	ldrh	r3, [r1, #2]
 800632e:	2b7f      	cmp	r3, #127	; 0x7f
 8006330:	d81a      	bhi.n	8006368 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006332:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006336:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b03      	cmp	r3, #3
 800633e:	d00c      	beq.n	800635a <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8006340:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006344:	4629      	mov	r1, r5
 8006346:	f000 fd03 	bl	8006d50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fa6c 	bl	8006828 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006350:	b135      	cbz	r5, 8006360 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006352:	2302      	movs	r3, #2
 8006354:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006358:	e009      	b.n	800636e <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800635a:	f7ff ff12 	bl	8006182 <USBD_CtlError>
 800635e:	e006      	b.n	800636e <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006360:	2301      	movs	r3, #1
 8006362:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006366:	e002      	b.n	800636e <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8006368:	4620      	mov	r0, r4
 800636a:	f7ff ff0a 	bl	8006182 <USBD_CtlError>
}
 800636e:	bd38      	pop	{r3, r4, r5, pc}

08006370 <USBD_SetConfig>:
{
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4604      	mov	r4, r0
 8006374:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8006376:	788d      	ldrb	r5, [r1, #2]
 8006378:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <USBD_SetConfig+0xc4>)
 800637a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800637c:	2d01      	cmp	r5, #1
 800637e:	d810      	bhi.n	80063a2 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8006380:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d00f      	beq.n	80063aa <USBD_SetConfig+0x3a>
 800638a:	2b03      	cmp	r3, #3
 800638c:	d023      	beq.n	80063d6 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800638e:	f7ff fef8 	bl	8006182 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006392:	4b28      	ldr	r3, [pc, #160]	; (8006434 <USBD_SetConfig+0xc4>)
 8006394:	7819      	ldrb	r1, [r3, #0]
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff fd6c 	bl	8005e74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800639c:	2503      	movs	r5, #3
}
 800639e:	4628      	mov	r0, r5
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80063a2:	f7ff feee 	bl	8006182 <USBD_CtlError>
    return USBD_FAIL;
 80063a6:	2503      	movs	r5, #3
 80063a8:	e7f9      	b.n	800639e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80063aa:	b18d      	cbz	r5, 80063d0 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 80063ac:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063ae:	4629      	mov	r1, r5
 80063b0:	f7ff fd57 	bl	8005e62 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80063b4:	4605      	mov	r5, r0
 80063b6:	b120      	cbz	r0, 80063c2 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 80063b8:	4631      	mov	r1, r6
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff fee1 	bl	8006182 <USBD_CtlError>
 80063c0:	e7ed      	b.n	800639e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fa30 	bl	8006828 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80063c8:	2303      	movs	r3, #3
 80063ca:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80063ce:	e7e6      	b.n	800639e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80063d0:	f000 fa2a 	bl	8006828 <USBD_CtlSendStatus>
 80063d4:	e7e3      	b.n	800639e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80063d6:	b1cd      	cbz	r5, 800640c <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 80063d8:	6841      	ldr	r1, [r0, #4]
 80063da:	428d      	cmp	r5, r1
 80063dc:	d025      	beq.n	800642a <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063de:	b2c9      	uxtb	r1, r1
 80063e0:	f7ff fd48 	bl	8005e74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063e4:	4b13      	ldr	r3, [pc, #76]	; (8006434 <USBD_SetConfig+0xc4>)
 80063e6:	7819      	ldrb	r1, [r3, #0]
 80063e8:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7ff fd39 	bl	8005e62 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80063f0:	4605      	mov	r5, r0
 80063f2:	b1b0      	cbz	r0, 8006422 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 80063f4:	4631      	mov	r1, r6
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff fec3 	bl	8006182 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063fc:	7921      	ldrb	r1, [r4, #4]
 80063fe:	4620      	mov	r0, r4
 8006400:	f7ff fd38 	bl	8005e74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006404:	2302      	movs	r3, #2
 8006406:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800640a:	e7c8      	b.n	800639e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800640c:	2302      	movs	r3, #2
 800640e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006412:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006414:	4629      	mov	r1, r5
 8006416:	f7ff fd2d 	bl	8005e74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fa04 	bl	8006828 <USBD_CtlSendStatus>
 8006420:	e7bd      	b.n	800639e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8006422:	4620      	mov	r0, r4
 8006424:	f000 fa00 	bl	8006828 <USBD_CtlSendStatus>
 8006428:	e7b9      	b.n	800639e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800642a:	f000 f9fd 	bl	8006828 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800642e:	2500      	movs	r5, #0
 8006430:	e7b5      	b.n	800639e <USBD_SetConfig+0x2e>
 8006432:	bf00      	nop
 8006434:	2000037c 	.word	0x2000037c

08006438 <USBD_GetConfig>:
{
 8006438:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800643a:	88cb      	ldrh	r3, [r1, #6]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10b      	bne.n	8006458 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8006440:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d909      	bls.n	800645e <USBD_GetConfig+0x26>
 800644a:	2b03      	cmp	r3, #3
 800644c:	d109      	bne.n	8006462 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800644e:	2201      	movs	r2, #1
 8006450:	1d01      	adds	r1, r0, #4
 8006452:	f000 f9bd 	bl	80067d0 <USBD_CtlSendData>
        break;
 8006456:	e001      	b.n	800645c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8006458:	f7ff fe93 	bl	8006182 <USBD_CtlError>
}
 800645c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800645e:	b25b      	sxtb	r3, r3
 8006460:	b913      	cbnz	r3, 8006468 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8006462:	f7ff fe8e 	bl	8006182 <USBD_CtlError>
}
 8006466:	e7f9      	b.n	800645c <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8006468:	4601      	mov	r1, r0
 800646a:	2300      	movs	r3, #0
 800646c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006470:	2201      	movs	r2, #1
 8006472:	f000 f9ad 	bl	80067d0 <USBD_CtlSendData>
        break;
 8006476:	e7f1      	b.n	800645c <USBD_GetConfig+0x24>

08006478 <USBD_GetStatus>:
{
 8006478:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800647a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800647e:	3b01      	subs	r3, #1
 8006480:	2b02      	cmp	r3, #2
 8006482:	d812      	bhi.n	80064aa <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8006484:	88cb      	ldrh	r3, [r1, #6]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d10c      	bne.n	80064a4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800648a:	2301      	movs	r3, #1
 800648c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800648e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006492:	b10b      	cbz	r3, 8006498 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006494:	2303      	movs	r3, #3
 8006496:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006498:	2202      	movs	r2, #2
 800649a:	f100 010c 	add.w	r1, r0, #12
 800649e:	f000 f997 	bl	80067d0 <USBD_CtlSendData>
}
 80064a2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80064a4:	f7ff fe6d 	bl	8006182 <USBD_CtlError>
        break;
 80064a8:	e7fb      	b.n	80064a2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80064aa:	f7ff fe6a 	bl	8006182 <USBD_CtlError>
}
 80064ae:	e7f8      	b.n	80064a2 <USBD_GetStatus+0x2a>

080064b0 <USBD_ClrFeature>:
{
 80064b0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80064b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064b6:	3b01      	subs	r3, #1
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d809      	bhi.n	80064d0 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064bc:	884b      	ldrh	r3, [r1, #2]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d000      	beq.n	80064c4 <USBD_ClrFeature+0x14>
}
 80064c2:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064ca:	f000 f9ad 	bl	8006828 <USBD_CtlSendStatus>
 80064ce:	e7f8      	b.n	80064c2 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80064d0:	f7ff fe57 	bl	8006182 <USBD_CtlError>
}
 80064d4:	e7f5      	b.n	80064c2 <USBD_ClrFeature+0x12>

080064d6 <USBD_StdDevReq>:
{
 80064d6:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d8:	780c      	ldrb	r4, [r1, #0]
 80064da:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80064de:	2c20      	cmp	r4, #32
 80064e0:	d006      	beq.n	80064f0 <USBD_StdDevReq+0x1a>
 80064e2:	2c40      	cmp	r4, #64	; 0x40
 80064e4:	d004      	beq.n	80064f0 <USBD_StdDevReq+0x1a>
 80064e6:	b154      	cbz	r4, 80064fe <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 80064e8:	f7ff fe4b 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80064ec:	2400      	movs	r4, #0
      break;
 80064ee:	e004      	b.n	80064fa <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4798      	blx	r3
 80064f8:	4604      	mov	r4, r0
}
 80064fa:	4620      	mov	r0, r4
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80064fe:	784d      	ldrb	r5, [r1, #1]
 8006500:	2d09      	cmp	r5, #9
 8006502:	d81d      	bhi.n	8006540 <USBD_StdDevReq+0x6a>
 8006504:	e8df f005 	tbb	[pc, r5]
 8006508:	161c1912 	.word	0x161c1912
 800650c:	1c05081c 	.word	0x1c05081c
 8006510:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8006512:	f7ff fe40 	bl	8006196 <USBD_GetDescriptor>
          break;
 8006516:	e7f0      	b.n	80064fa <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8006518:	f7ff ff02 	bl	8006320 <USBD_SetAddress>
          break;
 800651c:	e7ed      	b.n	80064fa <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800651e:	f7ff ff27 	bl	8006370 <USBD_SetConfig>
 8006522:	4604      	mov	r4, r0
          break;
 8006524:	e7e9      	b.n	80064fa <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8006526:	f7ff ff87 	bl	8006438 <USBD_GetConfig>
          break;
 800652a:	e7e6      	b.n	80064fa <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800652c:	f7ff ffa4 	bl	8006478 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006530:	462c      	mov	r4, r5
          break;
 8006532:	e7e2      	b.n	80064fa <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8006534:	f7ff fe07 	bl	8006146 <USBD_SetFeature>
          break;
 8006538:	e7df      	b.n	80064fa <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800653a:	f7ff ffb9 	bl	80064b0 <USBD_ClrFeature>
          break;
 800653e:	e7dc      	b.n	80064fa <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8006540:	f7ff fe1f 	bl	8006182 <USBD_CtlError>
          break;
 8006544:	e7d9      	b.n	80064fa <USBD_StdDevReq+0x24>

08006546 <USBD_StdItfReq>:
{
 8006546:	b570      	push	{r4, r5, r6, lr}
 8006548:	4605      	mov	r5, r0
 800654a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800654c:	780b      	ldrb	r3, [r1, #0]
 800654e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006552:	2b20      	cmp	r3, #32
 8006554:	d007      	beq.n	8006566 <USBD_StdItfReq+0x20>
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d005      	beq.n	8006566 <USBD_StdItfReq+0x20>
 800655a:	b123      	cbz	r3, 8006566 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800655c:	f7ff fe11 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006560:	2600      	movs	r6, #0
}
 8006562:	4630      	mov	r0, r6
 8006564:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8006566:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800656a:	3b01      	subs	r3, #1
 800656c:	2b02      	cmp	r3, #2
 800656e:	d818      	bhi.n	80065a2 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006570:	7923      	ldrb	r3, [r4, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d80f      	bhi.n	8006596 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006576:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4621      	mov	r1, r4
 800657e:	4628      	mov	r0, r5
 8006580:	4798      	blx	r3
 8006582:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006584:	88e3      	ldrh	r3, [r4, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1eb      	bne.n	8006562 <USBD_StdItfReq+0x1c>
 800658a:	2800      	cmp	r0, #0
 800658c:	d1e9      	bne.n	8006562 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800658e:	4628      	mov	r0, r5
 8006590:	f000 f94a 	bl	8006828 <USBD_CtlSendStatus>
 8006594:	e7e5      	b.n	8006562 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8006596:	4621      	mov	r1, r4
 8006598:	4628      	mov	r0, r5
 800659a:	f7ff fdf2 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800659e:	2600      	movs	r6, #0
 80065a0:	e7df      	b.n	8006562 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 80065a2:	4621      	mov	r1, r4
 80065a4:	4628      	mov	r0, r5
 80065a6:	f7ff fdec 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80065aa:	2600      	movs	r6, #0
          break;
 80065ac:	e7d9      	b.n	8006562 <USBD_StdItfReq+0x1c>

080065ae <USBD_StdEPReq>:
{
 80065ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b0:	4606      	mov	r6, r0
 80065b2:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80065b4:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	780c      	ldrb	r4, [r1, #0]
 80065b8:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80065bc:	2c20      	cmp	r4, #32
 80065be:	d008      	beq.n	80065d2 <USBD_StdEPReq+0x24>
 80065c0:	b2d9      	uxtb	r1, r3
 80065c2:	2c40      	cmp	r4, #64	; 0x40
 80065c4:	d005      	beq.n	80065d2 <USBD_StdEPReq+0x24>
 80065c6:	b16c      	cbz	r4, 80065e4 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7ff fdda 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80065ce:	2400      	movs	r4, #0
      break;
 80065d0:	e006      	b.n	80065e0 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065d2:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4629      	mov	r1, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	4798      	blx	r3
 80065de:	4604      	mov	r4, r0
}
 80065e0:	4620      	mov	r0, r4
 80065e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 80065e4:	786f      	ldrb	r7, [r5, #1]
 80065e6:	2f01      	cmp	r7, #1
 80065e8:	d02f      	beq.n	800664a <USBD_StdEPReq+0x9c>
 80065ea:	2f03      	cmp	r7, #3
 80065ec:	d005      	beq.n	80065fa <USBD_StdEPReq+0x4c>
 80065ee:	2f00      	cmp	r7, #0
 80065f0:	d059      	beq.n	80066a6 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 80065f2:	4629      	mov	r1, r5
 80065f4:	f7ff fdc5 	bl	8006182 <USBD_CtlError>
          break;
 80065f8:	e7f2      	b.n	80065e0 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80065fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d005      	beq.n	8006610 <USBD_StdEPReq+0x62>
 8006604:	2b03      	cmp	r3, #3
 8006606:	d012      	beq.n	800662e <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8006608:	4629      	mov	r1, r5
 800660a:	f7ff fdba 	bl	8006182 <USBD_CtlError>
              break;
 800660e:	e7e7      	b.n	80065e0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006610:	b109      	cbz	r1, 8006616 <USBD_StdEPReq+0x68>
 8006612:	2980      	cmp	r1, #128	; 0x80
 8006614:	d104      	bne.n	8006620 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8006616:	4629      	mov	r1, r5
 8006618:	4630      	mov	r0, r6
 800661a:	f7ff fdb2 	bl	8006182 <USBD_CtlError>
 800661e:	e7df      	b.n	80065e0 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006620:	f000 fb86 	bl	8006d30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006624:	2180      	movs	r1, #128	; 0x80
 8006626:	4630      	mov	r0, r6
 8006628:	f000 fb82 	bl	8006d30 <USBD_LL_StallEP>
 800662c:	e7d8      	b.n	80065e0 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800662e:	886b      	ldrh	r3, [r5, #2]
 8006630:	b923      	cbnz	r3, 800663c <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006632:	b119      	cbz	r1, 800663c <USBD_StdEPReq+0x8e>
 8006634:	2980      	cmp	r1, #128	; 0x80
 8006636:	d001      	beq.n	800663c <USBD_StdEPReq+0x8e>
 8006638:	88eb      	ldrh	r3, [r5, #6]
 800663a:	b11b      	cbz	r3, 8006644 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800663c:	4630      	mov	r0, r6
 800663e:	f000 f8f3 	bl	8006828 <USBD_CtlSendStatus>
              break;
 8006642:	e7cd      	b.n	80065e0 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006644:	f000 fb74 	bl	8006d30 <USBD_LL_StallEP>
 8006648:	e7f8      	b.n	800663c <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800664a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d005      	beq.n	8006660 <USBD_StdEPReq+0xb2>
 8006654:	2b03      	cmp	r3, #3
 8006656:	d012      	beq.n	800667e <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8006658:	4629      	mov	r1, r5
 800665a:	f7ff fd92 	bl	8006182 <USBD_CtlError>
              break;
 800665e:	e7bf      	b.n	80065e0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006660:	b109      	cbz	r1, 8006666 <USBD_StdEPReq+0xb8>
 8006662:	2980      	cmp	r1, #128	; 0x80
 8006664:	d104      	bne.n	8006670 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8006666:	4629      	mov	r1, r5
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff fd8a 	bl	8006182 <USBD_CtlError>
 800666e:	e7b7      	b.n	80065e0 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006670:	f000 fb5e 	bl	8006d30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	4630      	mov	r0, r6
 8006678:	f000 fb5a 	bl	8006d30 <USBD_LL_StallEP>
 800667c:	e7b0      	b.n	80065e0 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800667e:	886b      	ldrh	r3, [r5, #2]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ad      	bne.n	80065e0 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006684:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006688:	d10a      	bne.n	80066a0 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800668a:	4630      	mov	r0, r6
 800668c:	f000 f8cc 	bl	8006828 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006690:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	4629      	mov	r1, r5
 8006698:	4630      	mov	r0, r6
 800669a:	4798      	blx	r3
 800669c:	4604      	mov	r4, r0
 800669e:	e79f      	b.n	80065e0 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066a0:	f000 fb4e 	bl	8006d40 <USBD_LL_ClearStallEP>
 80066a4:	e7f1      	b.n	800668a <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 80066a6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	2a02      	cmp	r2, #2
 80066ae:	d006      	beq.n	80066be <USBD_StdEPReq+0x110>
 80066b0:	2a03      	cmp	r2, #3
 80066b2:	d029      	beq.n	8006708 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7ff fd64 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	463c      	mov	r4, r7
              break;
 80066bc:	e790      	b.n	80065e0 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066be:	b109      	cbz	r1, 80066c4 <USBD_StdEPReq+0x116>
 80066c0:	2980      	cmp	r1, #128	; 0x80
 80066c2:	d113      	bne.n	80066ec <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066c8:	d115      	bne.n	80066f6 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80066d2:	0089      	lsls	r1, r1, #2
 80066d4:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80066d8:	4431      	add	r1, r6
 80066da:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80066dc:	2300      	movs	r3, #0
 80066de:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066e0:	2202      	movs	r2, #2
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 f874 	bl	80067d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80066e8:	463c      	mov	r4, r7
              break;
 80066ea:	e779      	b.n	80065e0 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7ff fd48 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80066f2:	463c      	mov	r4, r7
                break;
 80066f4:	e774      	b.n	80065e0 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80066fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80066fe:	0089      	lsls	r1, r1, #2
 8006700:	3110      	adds	r1, #16
 8006702:	4431      	add	r1, r6
 8006704:	3104      	adds	r1, #4
 8006706:	e7e9      	b.n	80066dc <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8006708:	b25b      	sxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	db1f      	blt.n	800674e <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800670e:	f001 020f 	and.w	r2, r1, #15
 8006712:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006716:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800671a:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800671e:	b322      	cbz	r2, 800676a <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006720:	2b00      	cmp	r3, #0
 8006722:	db27      	blt.n	8006774 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006724:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006728:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800672c:	009c      	lsls	r4, r3, #2
 800672e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006732:	4434      	add	r4, r6
 8006734:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006736:	b109      	cbz	r1, 800673c <USBD_StdEPReq+0x18e>
 8006738:	2980      	cmp	r1, #128	; 0x80
 800673a:	d124      	bne.n	8006786 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800673c:	2300      	movs	r3, #0
 800673e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006740:	2202      	movs	r2, #2
 8006742:	4621      	mov	r1, r4
 8006744:	4630      	mov	r0, r6
 8006746:	f000 f843 	bl	80067d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800674a:	463c      	mov	r4, r7
              break;
 800674c:	e748      	b.n	80065e0 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800674e:	f001 020f 	and.w	r2, r1, #15
 8006752:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006756:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800675a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800675c:	2a00      	cmp	r2, #0
 800675e:	d1df      	bne.n	8006720 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8006760:	4629      	mov	r1, r5
 8006762:	f7ff fd0e 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006766:	463c      	mov	r4, r7
                  break;
 8006768:	e73a      	b.n	80065e0 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800676a:	4629      	mov	r1, r5
 800676c:	f7ff fd09 	bl	8006182 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006770:	463c      	mov	r4, r7
                  break;
 8006772:	e735      	b.n	80065e0 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006774:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8006778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800677c:	009c      	lsls	r4, r3, #2
 800677e:	3410      	adds	r4, #16
 8006780:	4434      	add	r4, r6
 8006782:	3404      	adds	r4, #4
 8006784:	e7d7      	b.n	8006736 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006786:	4630      	mov	r0, r6
 8006788:	f000 fa8a 	bl	8006ca0 <USBD_LL_IsStallEP>
 800678c:	b110      	cbz	r0, 8006794 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800678e:	2301      	movs	r3, #1
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	e7d5      	b.n	8006740 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8006794:	2300      	movs	r3, #0
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	e7d2      	b.n	8006740 <USBD_StdEPReq+0x192>

0800679a <USBD_GetString>:
  if (desc == NULL)
 800679a:	b1c0      	cbz	r0, 80067ce <USBD_GetString+0x34>
{
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	460d      	mov	r5, r1
 80067a0:	4616      	mov	r6, r2
 80067a2:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067a4:	f7ff fcc6 	bl	8006134 <USBD_GetLen>
 80067a8:	3001      	adds	r0, #1
 80067aa:	0040      	lsls	r0, r0, #1
 80067ac:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80067ae:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067b0:	2303      	movs	r3, #3
 80067b2:	706b      	strb	r3, [r5, #1]
  idx++;
 80067b4:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80067b6:	7822      	ldrb	r2, [r4, #0]
 80067b8:	b142      	cbz	r2, 80067cc <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 80067ba:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80067bc:	3401      	adds	r4, #1
    idx++;
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80067c2:	2100      	movs	r1, #0
 80067c4:	54a9      	strb	r1, [r5, r2]
    idx++;
 80067c6:	3302      	adds	r3, #2
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e7f4      	b.n	80067b6 <USBD_GetString+0x1c>
}
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	4770      	bx	lr

080067d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067d4:	2202      	movs	r2, #2
 80067d6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80067da:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80067dc:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067de:	460a      	mov	r2, r1
 80067e0:	2100      	movs	r1, #0
 80067e2:	f000 fabd 	bl	8006d60 <USBD_LL_Transmit>

  return USBD_OK;
}
 80067e6:	2000      	movs	r0, #0
 80067e8:	bd10      	pop	{r4, pc}

080067ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80067ea:	b508      	push	{r3, lr}
 80067ec:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067ee:	460a      	mov	r2, r1
 80067f0:	2100      	movs	r1, #0
 80067f2:	f000 fab5 	bl	8006d60 <USBD_LL_Transmit>

  return USBD_OK;
}
 80067f6:	2000      	movs	r0, #0
 80067f8:	bd08      	pop	{r3, pc}

080067fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80067fa:	b510      	push	{r4, lr}
 80067fc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067fe:	2203      	movs	r2, #3
 8006800:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006804:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006808:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800680c:	460a      	mov	r2, r1
 800680e:	2100      	movs	r1, #0
 8006810:	f000 faae 	bl	8006d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006814:	2000      	movs	r0, #0
 8006816:	bd10      	pop	{r4, pc}

08006818 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006818:	b508      	push	{r3, lr}
 800681a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800681c:	460a      	mov	r2, r1
 800681e:	2100      	movs	r1, #0
 8006820:	f000 faa6 	bl	8006d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006824:	2000      	movs	r0, #0
 8006826:	bd08      	pop	{r3, pc}

08006828 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006828:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800682a:	2204      	movs	r2, #4
 800682c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006830:	2300      	movs	r3, #0
 8006832:	461a      	mov	r2, r3
 8006834:	4619      	mov	r1, r3
 8006836:	f000 fa93 	bl	8006d60 <USBD_LL_Transmit>

  return USBD_OK;
}
 800683a:	2000      	movs	r0, #0
 800683c:	bd08      	pop	{r3, pc}

0800683e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800683e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006840:	2205      	movs	r2, #5
 8006842:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006846:	2300      	movs	r3, #0
 8006848:	461a      	mov	r2, r3
 800684a:	4619      	mov	r1, r3
 800684c:	f000 fa90 	bl	8006d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006850:	2000      	movs	r0, #0
 8006852:	bd08      	pop	{r3, pc}

08006854 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006856:	2200      	movs	r2, #0
 8006858:	490f      	ldr	r1, [pc, #60]	; (8006898 <MX_USB_DEVICE_Init+0x44>)
 800685a:	4810      	ldr	r0, [pc, #64]	; (800689c <MX_USB_DEVICE_Init+0x48>)
 800685c:	f7ff facf 	bl	8005dfe <USBD_Init>
 8006860:	b970      	cbnz	r0, 8006880 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006862:	490f      	ldr	r1, [pc, #60]	; (80068a0 <MX_USB_DEVICE_Init+0x4c>)
 8006864:	480d      	ldr	r0, [pc, #52]	; (800689c <MX_USB_DEVICE_Init+0x48>)
 8006866:	f7ff fae1 	bl	8005e2c <USBD_RegisterClass>
 800686a:	b960      	cbnz	r0, 8006886 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800686c:	490d      	ldr	r1, [pc, #52]	; (80068a4 <MX_USB_DEVICE_Init+0x50>)
 800686e:	480b      	ldr	r0, [pc, #44]	; (800689c <MX_USB_DEVICE_Init+0x48>)
 8006870:	f7ff fa77 	bl	8005d62 <USBD_CDC_RegisterInterface>
 8006874:	b950      	cbnz	r0, 800688c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006876:	4809      	ldr	r0, [pc, #36]	; (800689c <MX_USB_DEVICE_Init+0x48>)
 8006878:	f7ff faef 	bl	8005e5a <USBD_Start>
 800687c:	b948      	cbnz	r0, 8006892 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800687e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006880:	f7fa fbfe 	bl	8001080 <Error_Handler>
 8006884:	e7ed      	b.n	8006862 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8006886:	f7fa fbfb 	bl	8001080 <Error_Handler>
 800688a:	e7ef      	b.n	800686c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800688c:	f7fa fbf8 	bl	8001080 <Error_Handler>
 8006890:	e7f1      	b.n	8006876 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006892:	f7fa fbf5 	bl	8001080 <Error_Handler>
}
 8006896:	e7f2      	b.n	800687e <MX_USB_DEVICE_Init+0x2a>
 8006898:	20000138 	.word	0x20000138
 800689c:	200015b0 	.word	0x200015b0
 80068a0:	20000014 	.word	0x20000014
 80068a4:	20000124 	.word	0x20000124

080068a8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80068a8:	2000      	movs	r0, #0
 80068aa:	4770      	bx	lr

080068ac <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80068ac:	2000      	movs	r0, #0
 80068ae:	4770      	bx	lr

080068b0 <CDC_Receive_FS>:
{
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	4604      	mov	r4, r0
 80068b4:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068b6:	4e0c      	ldr	r6, [pc, #48]	; (80068e8 <CDC_Receive_FS+0x38>)
 80068b8:	4601      	mov	r1, r0
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff fa63 	bl	8005d86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff fa83 	bl	8005dcc <USBD_CDC_ReceivePacket>
  if(*Len == 5)
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	d004      	beq.n	80068d6 <CDC_Receive_FS+0x26>
  usbCmd = (DSP_UsbCommandReqTypeDef*)usbCmdReceiveBuffer;
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <CDC_Receive_FS+0x3c>)
 80068ce:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <CDC_Receive_FS+0x40>)
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	2000      	movs	r0, #0
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
	for(int i=*Len-1; i>-1; i--)
 80068d6:	3b01      	subs	r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dbf7      	blt.n	80068cc <CDC_Receive_FS+0x1c>
	  usbCmdReceiveBuffer[i] = Buf[i];
 80068dc:	5ce1      	ldrb	r1, [r4, r3]
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <CDC_Receive_FS+0x40>)
 80068e0:	54d1      	strb	r1, [r2, r3]
	for(int i=*Len-1; i>-1; i--)
 80068e2:	3b01      	subs	r3, #1
 80068e4:	e7f8      	b.n	80068d8 <CDC_Receive_FS+0x28>
 80068e6:	bf00      	nop
 80068e8:	200015b0 	.word	0x200015b0
 80068ec:	200005a8 	.word	0x200005a8
 80068f0:	20001880 	.word	0x20001880

080068f4 <CDC_Control_FS>:
{
 80068f4:	b510      	push	{r4, lr}
  req = (USBD_SetupReqTypedef*)pbuf;
 80068f6:	4b16      	ldr	r3, [pc, #88]	; (8006950 <CDC_Control_FS+0x5c>)
 80068f8:	6019      	str	r1, [r3, #0]
  switch(cmd)
 80068fa:	2822      	cmp	r0, #34	; 0x22
 80068fc:	d003      	beq.n	8006906 <CDC_Control_FS+0x12>
 80068fe:	2823      	cmp	r0, #35	; 0x23
 8006900:	d023      	beq.n	800694a <CDC_Control_FS+0x56>
}
 8006902:	2000      	movs	r0, #0
 8006904:	bd10      	pop	{r4, pc}
    	if((req->wValue & 0x0001) == 1)
 8006906:	884b      	ldrh	r3, [r1, #2]
 8006908:	f013 0f01 	tst.w	r3, #1
 800690c:	d010      	beq.n	8006930 <CDC_Control_FS+0x3c>
    		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800690e:	4c11      	ldr	r4, [pc, #68]	; (8006954 <CDC_Control_FS+0x60>)
 8006910:	2100      	movs	r1, #0
 8006912:	4620      	mov	r0, r4
 8006914:	f7fd fcaa 	bl	800426c <HAL_TIM_PWM_Start>
    		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8006918:	2100      	movs	r1, #0
 800691a:	4620      	mov	r0, r4
 800691c:	f7fd fd72 	bl	8004404 <HAL_TIMEx_PWMN_Start>
        	HAL_TIM_Base_Start_IT(&htim9);
 8006920:	480d      	ldr	r0, [pc, #52]	; (8006958 <CDC_Control_FS+0x64>)
 8006922:	f7fd f9a7 	bl	8003c74 <HAL_TIM_Base_Start_IT>
        	TIM9->ARR = 1999; // ARR = (T_sampling dalam us - 1)
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <CDC_Control_FS+0x68>)
 8006928:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800692c:	62da      	str	r2, [r3, #44]	; 0x2c
 800692e:	e7e8      	b.n	8006902 <CDC_Control_FS+0xe>
        	HAL_TIM_Base_Stop_IT(&htim9);
 8006930:	4809      	ldr	r0, [pc, #36]	; (8006958 <CDC_Control_FS+0x64>)
 8006932:	f7fd f9db 	bl	8003cec <HAL_TIM_Base_Stop_IT>
    		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8006936:	4c07      	ldr	r4, [pc, #28]	; (8006954 <CDC_Control_FS+0x60>)
 8006938:	2100      	movs	r1, #0
 800693a:	4620      	mov	r0, r4
 800693c:	f7fd fdd6 	bl	80044ec <HAL_TIMEx_PWMN_Stop>
    		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8006940:	2100      	movs	r1, #0
 8006942:	4620      	mov	r0, r4
 8006944:	f7fd fd0a 	bl	800435c <HAL_TIM_PWM_Stop>
 8006948:	e7db      	b.n	8006902 <CDC_Control_FS+0xe>
    	HAL_NVIC_SystemReset();
 800694a:	f7fb fc8b 	bl	8002264 <HAL_NVIC_SystemReset>
    break;
 800694e:	e7d8      	b.n	8006902 <CDC_Control_FS+0xe>
 8006950:	20001888 	.word	0x20001888
 8006954:	200013d0 	.word	0x200013d0
 8006958:	20001418 	.word	0x20001418
 800695c:	40014000 	.word	0x40014000

08006960 <CDC_Init_FS>:
{
 8006960:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006962:	4c06      	ldr	r4, [pc, #24]	; (800697c <CDC_Init_FS+0x1c>)
 8006964:	2200      	movs	r2, #0
 8006966:	4906      	ldr	r1, [pc, #24]	; (8006980 <CDC_Init_FS+0x20>)
 8006968:	4620      	mov	r0, r4
 800696a:	f7ff fa01 	bl	8005d70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800696e:	4905      	ldr	r1, [pc, #20]	; (8006984 <CDC_Init_FS+0x24>)
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff fa08 	bl	8005d86 <USBD_CDC_SetRxBuffer>
}
 8006976:	2000      	movs	r0, #0
 8006978:	bd10      	pop	{r4, pc}
 800697a:	bf00      	nop
 800697c:	200015b0 	.word	0x200015b0
 8006980:	20001acc 	.word	0x20001acc
 8006984:	2000188c 	.word	0x2000188c

08006988 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <CDC_Transmit_FS+0x28>)
 800698a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800698e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006992:	b10b      	cbz	r3, 8006998 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8006994:	2001      	movs	r0, #1
}
 8006996:	4770      	bx	lr
{
 8006998:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800699a:	4c05      	ldr	r4, [pc, #20]	; (80069b0 <CDC_Transmit_FS+0x28>)
 800699c:	460a      	mov	r2, r1
 800699e:	4601      	mov	r1, r0
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7ff f9e5 	bl	8005d70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7ff f9f6 	bl	8005d98 <USBD_CDC_TransmitPacket>
}
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	bf00      	nop
 80069b0:	200015b0 	.word	0x200015b0

080069b4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069b4:	2312      	movs	r3, #18
 80069b6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80069b8:	4800      	ldr	r0, [pc, #0]	; (80069bc <USBD_FS_DeviceDescriptor+0x8>)
 80069ba:	4770      	bx	lr
 80069bc:	20000154 	.word	0x20000154

080069c0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069c0:	2304      	movs	r3, #4
 80069c2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80069c4:	4800      	ldr	r0, [pc, #0]	; (80069c8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80069c6:	4770      	bx	lr
 80069c8:	20000168 	.word	0x20000168

080069cc <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d217      	bcs.n	8006a02 <IntToUnicode+0x36>
{
 80069d2:	b430      	push	{r4, r5}
 80069d4:	e00b      	b.n	80069ee <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069d6:	3437      	adds	r4, #55	; 0x37
 80069d8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 80069dc:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80069de:	005c      	lsls	r4, r3, #1
 80069e0:	3401      	adds	r4, #1
 80069e2:	2500      	movs	r5, #0
 80069e4:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 80069e6:	3301      	adds	r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d207      	bcs.n	80069fe <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 80069ee:	0f04      	lsrs	r4, r0, #28
 80069f0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80069f4:	d2ef      	bcs.n	80069d6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80069f6:	3430      	adds	r4, #48	; 0x30
 80069f8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 80069fc:	e7ee      	b.n	80069dc <IntToUnicode+0x10>
  }
}
 80069fe:	bc30      	pop	{r4, r5}
 8006a00:	4770      	bx	lr
 8006a02:	4770      	bx	lr

08006a04 <Get_SerialNum>:
{
 8006a04:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <Get_SerialNum+0x2c>)
 8006a08:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a0e:	3304      	adds	r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8006a12:	18c0      	adds	r0, r0, r3
 8006a14:	d100      	bne.n	8006a18 <Get_SerialNum+0x14>
}
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a18:	4d06      	ldr	r5, [pc, #24]	; (8006a34 <Get_SerialNum+0x30>)
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	1ca9      	adds	r1, r5, #2
 8006a1e:	f7ff ffd5 	bl	80069cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a22:	2204      	movs	r2, #4
 8006a24:	f105 0112 	add.w	r1, r5, #18
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff ffcf 	bl	80069cc <IntToUnicode>
}
 8006a2e:	e7f2      	b.n	8006a16 <Get_SerialNum+0x12>
 8006a30:	1fff7a10 	.word	0x1fff7a10
 8006a34:	2000016c 	.word	0x2000016c

08006a38 <USBD_FS_SerialStrDescriptor>:
{
 8006a38:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006a3a:	231a      	movs	r3, #26
 8006a3c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8006a3e:	f7ff ffe1 	bl	8006a04 <Get_SerialNum>
}
 8006a42:	4801      	ldr	r0, [pc, #4]	; (8006a48 <USBD_FS_SerialStrDescriptor+0x10>)
 8006a44:	bd08      	pop	{r3, pc}
 8006a46:	bf00      	nop
 8006a48:	2000016c 	.word	0x2000016c

08006a4c <USBD_FS_ProductStrDescriptor>:
{
 8006a4c:	b508      	push	{r3, lr}
 8006a4e:	460a      	mov	r2, r1
  if(speed == 0)
 8006a50:	b928      	cbnz	r0, 8006a5e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a52:	4905      	ldr	r1, [pc, #20]	; (8006a68 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006a54:	4805      	ldr	r0, [pc, #20]	; (8006a6c <USBD_FS_ProductStrDescriptor+0x20>)
 8006a56:	f7ff fea0 	bl	800679a <USBD_GetString>
}
 8006a5a:	4803      	ldr	r0, [pc, #12]	; (8006a68 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006a5c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a5e:	4902      	ldr	r1, [pc, #8]	; (8006a68 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006a60:	4802      	ldr	r0, [pc, #8]	; (8006a6c <USBD_FS_ProductStrDescriptor+0x20>)
 8006a62:	f7ff fe9a 	bl	800679a <USBD_GetString>
 8006a66:	e7f8      	b.n	8006a5a <USBD_FS_ProductStrDescriptor+0xe>
 8006a68:	20001d4c 	.word	0x20001d4c
 8006a6c:	080097c0 	.word	0x080097c0

08006a70 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006a70:	b510      	push	{r4, lr}
 8006a72:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a74:	4c03      	ldr	r4, [pc, #12]	; (8006a84 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006a76:	4621      	mov	r1, r4
 8006a78:	4803      	ldr	r0, [pc, #12]	; (8006a88 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006a7a:	f7ff fe8e 	bl	800679a <USBD_GetString>
}
 8006a7e:	4620      	mov	r0, r4
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	20001d4c 	.word	0x20001d4c
 8006a88:	080097d8 	.word	0x080097d8

08006a8c <USBD_FS_ConfigStrDescriptor>:
{
 8006a8c:	b508      	push	{r3, lr}
 8006a8e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8006a90:	b928      	cbnz	r0, 8006a9e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a92:	4905      	ldr	r1, [pc, #20]	; (8006aa8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006a94:	4805      	ldr	r0, [pc, #20]	; (8006aac <USBD_FS_ConfigStrDescriptor+0x20>)
 8006a96:	f7ff fe80 	bl	800679a <USBD_GetString>
}
 8006a9a:	4803      	ldr	r0, [pc, #12]	; (8006aa8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006a9c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a9e:	4902      	ldr	r1, [pc, #8]	; (8006aa8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8006aa0:	4802      	ldr	r0, [pc, #8]	; (8006aac <USBD_FS_ConfigStrDescriptor+0x20>)
 8006aa2:	f7ff fe7a 	bl	800679a <USBD_GetString>
 8006aa6:	e7f8      	b.n	8006a9a <USBD_FS_ConfigStrDescriptor+0xe>
 8006aa8:	20001d4c 	.word	0x20001d4c
 8006aac:	080097ec 	.word	0x080097ec

08006ab0 <USBD_FS_InterfaceStrDescriptor>:
{
 8006ab0:	b508      	push	{r3, lr}
 8006ab2:	460a      	mov	r2, r1
  if(speed == 0)
 8006ab4:	b928      	cbnz	r0, 8006ac2 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ab6:	4905      	ldr	r1, [pc, #20]	; (8006acc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006ab8:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006aba:	f7ff fe6e 	bl	800679a <USBD_GetString>
}
 8006abe:	4803      	ldr	r0, [pc, #12]	; (8006acc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006ac0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ac2:	4902      	ldr	r1, [pc, #8]	; (8006acc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006ac4:	4802      	ldr	r0, [pc, #8]	; (8006ad0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006ac6:	f7ff fe68 	bl	800679a <USBD_GetString>
 8006aca:	e7f8      	b.n	8006abe <USBD_FS_InterfaceStrDescriptor+0xe>
 8006acc:	20001d4c 	.word	0x20001d4c
 8006ad0:	080097f8 	.word	0x080097f8

08006ad4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ad4:	b530      	push	{r4, r5, lr}
 8006ad6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9303      	str	r3, [sp, #12]
 8006adc:	9304      	str	r3, [sp, #16]
 8006ade:	9305      	str	r3, [sp, #20]
 8006ae0:	9306      	str	r3, [sp, #24]
 8006ae2:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ae4:	6803      	ldr	r3, [r0, #0]
 8006ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aea:	d001      	beq.n	8006af0 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006aec:	b009      	add	sp, #36	; 0x24
 8006aee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af0:	2500      	movs	r5, #0
 8006af2:	9501      	str	r5, [sp, #4]
 8006af4:	4c17      	ldr	r4, [pc, #92]	; (8006b54 <HAL_PCD_MspInit+0x80>)
 8006af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	6323      	str	r3, [r4, #48]	; 0x30
 8006afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b12:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b14:	2303      	movs	r3, #3
 8006b16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b18:	230a      	movs	r3, #10
 8006b1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b1c:	a903      	add	r1, sp, #12
 8006b1e:	480e      	ldr	r0, [pc, #56]	; (8006b58 <HAL_PCD_MspInit+0x84>)
 8006b20:	f7fb fe2e 	bl	8002780 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	6363      	str	r3, [r4, #52]	; 0x34
 8006b2c:	9502      	str	r5, [sp, #8]
 8006b2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b34:	6463      	str	r3, [r4, #68]	; 0x44
 8006b36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3c:	9302      	str	r3, [sp, #8]
 8006b3e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b40:	462a      	mov	r2, r5
 8006b42:	4629      	mov	r1, r5
 8006b44:	2043      	movs	r0, #67	; 0x43
 8006b46:	f7fb fb4b 	bl	80021e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b4a:	2043      	movs	r0, #67	; 0x43
 8006b4c:	f7fb fb7c 	bl	8002248 <HAL_NVIC_EnableIRQ>
}
 8006b50:	e7cc      	b.n	8006aec <HAL_PCD_MspInit+0x18>
 8006b52:	bf00      	nop
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40020000 	.word	0x40020000

08006b5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b5c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b5e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006b62:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b66:	f7ff f98d 	bl	8005e84 <USBD_LL_SetupStage>
}
 8006b6a:	bd08      	pop	{r3, pc}

08006b6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b6c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b6e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006b72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006b76:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b7a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b7e:	f7ff f9ad 	bl	8005edc <USBD_LL_DataOutStage>
}
 8006b82:	bd08      	pop	{r3, pc}

08006b84 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b84:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b86:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006b8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b90:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b94:	f7ff f9de 	bl	8005f54 <USBD_LL_DataInStage>
}
 8006b98:	bd08      	pop	{r3, pc}

08006b9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b9a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b9c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006ba0:	f7ff fa7e 	bl	80060a0 <USBD_LL_SOF>
}
 8006ba4:	bd08      	pop	{r3, pc}

08006ba6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006baa:	68c3      	ldr	r3, [r0, #12]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d109      	bne.n	8006bc4 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8006bb6:	f7ff fa59 	bl	800606c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bba:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8006bbe:	f7ff fa28 	bl	8006012 <USBD_LL_Reset>
}
 8006bc2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006bc4:	f7fa fa5c 	bl	8001080 <Error_Handler>
 8006bc8:	e7f2      	b.n	8006bb0 <HAL_PCD_ResetCallback+0xa>
	...

08006bcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006bd0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006bd4:	f7ff fa4d 	bl	8006072 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006be6:	6a23      	ldr	r3, [r4, #32]
 8006be8:	b123      	cbz	r3, 8006bf4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bea:	4a03      	ldr	r2, [pc, #12]	; (8006bf8 <HAL_PCD_SuspendCallback+0x2c>)
 8006bec:	6913      	ldr	r3, [r2, #16]
 8006bee:	f043 0306 	orr.w	r3, r3, #6
 8006bf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	e000ed00 	.word	0xe000ed00

08006bfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bfe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006c02:	f7ff fa40 	bl	8006086 <USBD_LL_Resume>
}
 8006c06:	bd08      	pop	{r3, pc}

08006c08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c08:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c0a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006c0e:	f7ff fa6f 	bl	80060f0 <USBD_LL_IsoOUTIncomplete>
}
 8006c12:	bd08      	pop	{r3, pc}

08006c14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c14:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c16:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006c1a:	f7ff fa55 	bl	80060c8 <USBD_LL_IsoINIncomplete>
}
 8006c1e:	bd08      	pop	{r3, pc}

08006c20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c20:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c22:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006c26:	f7ff fa77 	bl	8006118 <USBD_LL_DevConnected>
}
 8006c2a:	bd08      	pop	{r3, pc}

08006c2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c2e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006c32:	f7ff fa73 	bl	800611c <USBD_LL_DevDisconnected>
}
 8006c36:	bd08      	pop	{r3, pc}

08006c38 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c38:	7802      	ldrb	r2, [r0, #0]
 8006c3a:	b10a      	cbz	r2, 8006c40 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	4770      	bx	lr
{
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8006c44:	4815      	ldr	r0, [pc, #84]	; (8006c9c <USBD_LL_Init+0x64>)
 8006c46:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c4a:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c52:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006c54:	2304      	movs	r3, #4
 8006c56:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c58:	2202      	movs	r2, #2
 8006c5a:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c60:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c62:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c64:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c66:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006c68:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c6a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c6c:	f7fb fec9 	bl	8002a02 <HAL_PCD_Init>
 8006c70:	b980      	cbnz	r0, 8006c94 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c72:	4c0a      	ldr	r4, [pc, #40]	; (8006c9c <USBD_LL_Init+0x64>)
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7fc fc08 	bl	800348c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c7c:	2240      	movs	r2, #64	; 0x40
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7fc fbdf 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c86:	2280      	movs	r2, #128	; 0x80
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7fc fbda 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
}
 8006c90:	2000      	movs	r0, #0
 8006c92:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006c94:	f7fa f9f4 	bl	8001080 <Error_Handler>
 8006c98:	e7eb      	b.n	8006c72 <USBD_LL_Init+0x3a>
 8006c9a:	bf00      	nop
 8006c9c:	20001f4c 	.word	0x20001f4c

08006ca0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ca0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8006ca4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ca8:	d108      	bne.n	8006cbc <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006caa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006cae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006cb2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006cb6:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8006cba:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cbc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006cc0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006cc4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006cc8:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8006ccc:	4770      	bx	lr

08006cce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cce:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006cd0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006cd4:	f7fc fb03 	bl	80032de <HAL_PCD_EP_GetRxCount>
}
 8006cd8:	bd08      	pop	{r3, pc}
	...

08006cdc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006cdc:	4800      	ldr	r0, [pc, #0]	; (8006ce0 <USBD_static_malloc+0x4>)
 8006cde:	4770      	bx	lr
 8006ce0:	20000380 	.word	0x20000380

08006ce4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8006ce4:	4770      	bx	lr

08006ce6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006ce6:	2803      	cmp	r0, #3
 8006ce8:	d805      	bhi.n	8006cf6 <USBD_Get_USB_Status+0x10>
 8006cea:	e8df f000 	tbb	[pc, r0]
 8006cee:	0405      	.short	0x0405
 8006cf0:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cf2:	2001      	movs	r0, #1
    break;
 8006cf4:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8006cf6:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006cf8:	4770      	bx	lr

08006cfa <USBD_LL_Start>:
{
 8006cfa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006cfc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d00:	f7fb ff12 	bl	8002b28 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d04:	f7ff ffef 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d08:	bd08      	pop	{r3, pc}

08006d0a <USBD_LL_OpenEP>:
{
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d10:	4623      	mov	r3, r4
 8006d12:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d16:	f7fc fa37 	bl	8003188 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d1a:	f7ff ffe4 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <USBD_LL_CloseEP>:
{
 8006d20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d22:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d26:	f7fc fa72 	bl	800320e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d2a:	f7ff ffdc 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d2e:	bd08      	pop	{r3, pc}

08006d30 <USBD_LL_StallEP>:
{
 8006d30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d32:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d36:	f7fc fb06 	bl	8003346 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d3a:	f7ff ffd4 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d3e:	bd08      	pop	{r3, pc}

08006d40 <USBD_LL_ClearStallEP>:
{
 8006d40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d42:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d46:	f7fc fb42 	bl	80033ce <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d4a:	f7ff ffcc 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d4e:	bd08      	pop	{r3, pc}

08006d50 <USBD_LL_SetUSBAddress>:
{
 8006d50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d52:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d56:	f7fc fa03 	bl	8003160 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d5a:	f7ff ffc4 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d5e:	bd08      	pop	{r3, pc}

08006d60 <USBD_LL_Transmit>:
{
 8006d60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d62:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d66:	f7fc fac3 	bl	80032f0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d6a:	f7ff ffbc 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d6e:	bd08      	pop	{r3, pc}

08006d70 <USBD_LL_PrepareReceive>:
{
 8006d70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d72:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d76:	f7fc fa83 	bl	8003280 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7a:	f7ff ffb4 	bl	8006ce6 <USBD_Get_USB_Status>
}
 8006d7e:	bd08      	pop	{r3, pc}

08006d80 <__errno>:
 8006d80:	4b01      	ldr	r3, [pc, #4]	; (8006d88 <__errno+0x8>)
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000188 	.word	0x20000188

08006d8c <__libc_init_array>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	4d0d      	ldr	r5, [pc, #52]	; (8006dc4 <__libc_init_array+0x38>)
 8006d90:	4c0d      	ldr	r4, [pc, #52]	; (8006dc8 <__libc_init_array+0x3c>)
 8006d92:	1b64      	subs	r4, r4, r5
 8006d94:	10a4      	asrs	r4, r4, #2
 8006d96:	2600      	movs	r6, #0
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	d109      	bne.n	8006db0 <__libc_init_array+0x24>
 8006d9c:	4d0b      	ldr	r5, [pc, #44]	; (8006dcc <__libc_init_array+0x40>)
 8006d9e:	4c0c      	ldr	r4, [pc, #48]	; (8006dd0 <__libc_init_array+0x44>)
 8006da0:	f002 fcf0 	bl	8009784 <_init>
 8006da4:	1b64      	subs	r4, r4, r5
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	2600      	movs	r6, #0
 8006daa:	42a6      	cmp	r6, r4
 8006dac:	d105      	bne.n	8006dba <__libc_init_array+0x2e>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db4:	4798      	blx	r3
 8006db6:	3601      	adds	r6, #1
 8006db8:	e7ee      	b.n	8006d98 <__libc_init_array+0xc>
 8006dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbe:	4798      	blx	r3
 8006dc0:	3601      	adds	r6, #1
 8006dc2:	e7f2      	b.n	8006daa <__libc_init_array+0x1e>
 8006dc4:	08009bf4 	.word	0x08009bf4
 8006dc8:	08009bf4 	.word	0x08009bf4
 8006dcc:	08009bf4 	.word	0x08009bf4
 8006dd0:	08009bf8 	.word	0x08009bf8

08006dd4 <memset>:
 8006dd4:	4402      	add	r2, r0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d100      	bne.n	8006dde <memset+0xa>
 8006ddc:	4770      	bx	lr
 8006dde:	f803 1b01 	strb.w	r1, [r3], #1
 8006de2:	e7f9      	b.n	8006dd8 <memset+0x4>

08006de4 <__cvt>:
 8006de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	ec55 4b10 	vmov	r4, r5, d0
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	460e      	mov	r6, r1
 8006df0:	4619      	mov	r1, r3
 8006df2:	462b      	mov	r3, r5
 8006df4:	bfbb      	ittet	lt
 8006df6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dfa:	461d      	movlt	r5, r3
 8006dfc:	2300      	movge	r3, #0
 8006dfe:	232d      	movlt	r3, #45	; 0x2d
 8006e00:	700b      	strb	r3, [r1, #0]
 8006e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e08:	4691      	mov	r9, r2
 8006e0a:	f023 0820 	bic.w	r8, r3, #32
 8006e0e:	bfbc      	itt	lt
 8006e10:	4622      	movlt	r2, r4
 8006e12:	4614      	movlt	r4, r2
 8006e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e18:	d005      	beq.n	8006e26 <__cvt+0x42>
 8006e1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e1e:	d100      	bne.n	8006e22 <__cvt+0x3e>
 8006e20:	3601      	adds	r6, #1
 8006e22:	2102      	movs	r1, #2
 8006e24:	e000      	b.n	8006e28 <__cvt+0x44>
 8006e26:	2103      	movs	r1, #3
 8006e28:	ab03      	add	r3, sp, #12
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	ab02      	add	r3, sp, #8
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	ec45 4b10 	vmov	d0, r4, r5
 8006e34:	4653      	mov	r3, sl
 8006e36:	4632      	mov	r2, r6
 8006e38:	f000 fcca 	bl	80077d0 <_dtoa_r>
 8006e3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e40:	4607      	mov	r7, r0
 8006e42:	d102      	bne.n	8006e4a <__cvt+0x66>
 8006e44:	f019 0f01 	tst.w	r9, #1
 8006e48:	d022      	beq.n	8006e90 <__cvt+0xac>
 8006e4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e4e:	eb07 0906 	add.w	r9, r7, r6
 8006e52:	d110      	bne.n	8006e76 <__cvt+0x92>
 8006e54:	783b      	ldrb	r3, [r7, #0]
 8006e56:	2b30      	cmp	r3, #48	; 0x30
 8006e58:	d10a      	bne.n	8006e70 <__cvt+0x8c>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 fe39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e66:	b918      	cbnz	r0, 8006e70 <__cvt+0x8c>
 8006e68:	f1c6 0601 	rsb	r6, r6, #1
 8006e6c:	f8ca 6000 	str.w	r6, [sl]
 8006e70:	f8da 3000 	ldr.w	r3, [sl]
 8006e74:	4499      	add	r9, r3
 8006e76:	2200      	movs	r2, #0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f7f9 fe2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e82:	b108      	cbz	r0, 8006e88 <__cvt+0xa4>
 8006e84:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e88:	2230      	movs	r2, #48	; 0x30
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	454b      	cmp	r3, r9
 8006e8e:	d307      	bcc.n	8006ea0 <__cvt+0xbc>
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e94:	1bdb      	subs	r3, r3, r7
 8006e96:	4638      	mov	r0, r7
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	b004      	add	sp, #16
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	9103      	str	r1, [sp, #12]
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e7f0      	b.n	8006e8a <__cvt+0xa6>

08006ea8 <__exponent>:
 8006ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2900      	cmp	r1, #0
 8006eae:	bfb8      	it	lt
 8006eb0:	4249      	neglt	r1, r1
 8006eb2:	f803 2b02 	strb.w	r2, [r3], #2
 8006eb6:	bfb4      	ite	lt
 8006eb8:	222d      	movlt	r2, #45	; 0x2d
 8006eba:	222b      	movge	r2, #43	; 0x2b
 8006ebc:	2909      	cmp	r1, #9
 8006ebe:	7042      	strb	r2, [r0, #1]
 8006ec0:	dd2a      	ble.n	8006f18 <__exponent+0x70>
 8006ec2:	f10d 0407 	add.w	r4, sp, #7
 8006ec6:	46a4      	mov	ip, r4
 8006ec8:	270a      	movs	r7, #10
 8006eca:	46a6      	mov	lr, r4
 8006ecc:	460a      	mov	r2, r1
 8006ece:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ed2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ed6:	3530      	adds	r5, #48	; 0x30
 8006ed8:	2a63      	cmp	r2, #99	; 0x63
 8006eda:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ede:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	dcf1      	bgt.n	8006eca <__exponent+0x22>
 8006ee6:	3130      	adds	r1, #48	; 0x30
 8006ee8:	f1ae 0502 	sub.w	r5, lr, #2
 8006eec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ef0:	1c44      	adds	r4, r0, #1
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4561      	cmp	r1, ip
 8006ef6:	d30a      	bcc.n	8006f0e <__exponent+0x66>
 8006ef8:	f10d 0209 	add.w	r2, sp, #9
 8006efc:	eba2 020e 	sub.w	r2, r2, lr
 8006f00:	4565      	cmp	r5, ip
 8006f02:	bf88      	it	hi
 8006f04:	2200      	movhi	r2, #0
 8006f06:	4413      	add	r3, r2
 8006f08:	1a18      	subs	r0, r3, r0
 8006f0a:	b003      	add	sp, #12
 8006f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f16:	e7ed      	b.n	8006ef4 <__exponent+0x4c>
 8006f18:	2330      	movs	r3, #48	; 0x30
 8006f1a:	3130      	adds	r1, #48	; 0x30
 8006f1c:	7083      	strb	r3, [r0, #2]
 8006f1e:	70c1      	strb	r1, [r0, #3]
 8006f20:	1d03      	adds	r3, r0, #4
 8006f22:	e7f1      	b.n	8006f08 <__exponent+0x60>

08006f24 <_printf_float>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	ed2d 8b02 	vpush	{d8}
 8006f2c:	b08d      	sub	sp, #52	; 0x34
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f34:	4616      	mov	r6, r2
 8006f36:	461f      	mov	r7, r3
 8006f38:	4605      	mov	r5, r0
 8006f3a:	f001 fa35 	bl	80083a8 <_localeconv_r>
 8006f3e:	f8d0 a000 	ldr.w	sl, [r0]
 8006f42:	4650      	mov	r0, sl
 8006f44:	f7f9 f94c 	bl	80001e0 <strlen>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	f8d8 3000 	ldr.w	r3, [r8]
 8006f54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f58:	3307      	adds	r3, #7
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	f103 0208 	add.w	r2, r3, #8
 8006f62:	f8c8 2000 	str.w	r2, [r8]
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f7c:	ee08 0a10 	vmov	s16, r0
 8006f80:	4b9f      	ldr	r3, [pc, #636]	; (8007200 <_printf_float+0x2dc>)
 8006f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8a:	f7f9 fdd7 	bl	8000b3c <__aeabi_dcmpun>
 8006f8e:	bb88      	cbnz	r0, 8006ff4 <_printf_float+0xd0>
 8006f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f94:	4b9a      	ldr	r3, [pc, #616]	; (8007200 <_printf_float+0x2dc>)
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9a:	f7f9 fdb1 	bl	8000b00 <__aeabi_dcmple>
 8006f9e:	bb48      	cbnz	r0, 8006ff4 <_printf_float+0xd0>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 fda0 	bl	8000aec <__aeabi_dcmplt>
 8006fac:	b110      	cbz	r0, 8006fb4 <_printf_float+0x90>
 8006fae:	232d      	movs	r3, #45	; 0x2d
 8006fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb4:	4b93      	ldr	r3, [pc, #588]	; (8007204 <_printf_float+0x2e0>)
 8006fb6:	4894      	ldr	r0, [pc, #592]	; (8007208 <_printf_float+0x2e4>)
 8006fb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006fbc:	bf94      	ite	ls
 8006fbe:	4698      	movls	r8, r3
 8006fc0:	4680      	movhi	r8, r0
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	9b05      	ldr	r3, [sp, #20]
 8006fc8:	f023 0204 	bic.w	r2, r3, #4
 8006fcc:	6022      	str	r2, [r4, #0]
 8006fce:	f04f 0900 	mov.w	r9, #0
 8006fd2:	9700      	str	r7, [sp, #0]
 8006fd4:	4633      	mov	r3, r6
 8006fd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f000 f9d8 	bl	8007390 <_printf_common>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f040 8090 	bne.w	8007106 <_printf_float+0x1e2>
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	b00d      	add	sp, #52	; 0x34
 8006fec:	ecbd 8b02 	vpop	{d8}
 8006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 fd9e 	bl	8000b3c <__aeabi_dcmpun>
 8007000:	b140      	cbz	r0, 8007014 <_printf_float+0xf0>
 8007002:	464b      	mov	r3, r9
 8007004:	2b00      	cmp	r3, #0
 8007006:	bfbc      	itt	lt
 8007008:	232d      	movlt	r3, #45	; 0x2d
 800700a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800700e:	487f      	ldr	r0, [pc, #508]	; (800720c <_printf_float+0x2e8>)
 8007010:	4b7f      	ldr	r3, [pc, #508]	; (8007210 <_printf_float+0x2ec>)
 8007012:	e7d1      	b.n	8006fb8 <_printf_float+0x94>
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800701a:	9206      	str	r2, [sp, #24]
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	d13f      	bne.n	80070a0 <_printf_float+0x17c>
 8007020:	2306      	movs	r3, #6
 8007022:	6063      	str	r3, [r4, #4]
 8007024:	9b05      	ldr	r3, [sp, #20]
 8007026:	6861      	ldr	r1, [r4, #4]
 8007028:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800702c:	2300      	movs	r3, #0
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	ab0a      	add	r3, sp, #40	; 0x28
 8007032:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007036:	ab09      	add	r3, sp, #36	; 0x24
 8007038:	ec49 8b10 	vmov	d0, r8, r9
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	6022      	str	r2, [r4, #0]
 8007040:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fecd 	bl	8006de4 <__cvt>
 800704a:	9b06      	ldr	r3, [sp, #24]
 800704c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800704e:	2b47      	cmp	r3, #71	; 0x47
 8007050:	4680      	mov	r8, r0
 8007052:	d108      	bne.n	8007066 <_printf_float+0x142>
 8007054:	1cc8      	adds	r0, r1, #3
 8007056:	db02      	blt.n	800705e <_printf_float+0x13a>
 8007058:	6863      	ldr	r3, [r4, #4]
 800705a:	4299      	cmp	r1, r3
 800705c:	dd41      	ble.n	80070e2 <_printf_float+0x1be>
 800705e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007062:	fa5f fb8b 	uxtb.w	fp, fp
 8007066:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800706a:	d820      	bhi.n	80070ae <_printf_float+0x18a>
 800706c:	3901      	subs	r1, #1
 800706e:	465a      	mov	r2, fp
 8007070:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007074:	9109      	str	r1, [sp, #36]	; 0x24
 8007076:	f7ff ff17 	bl	8006ea8 <__exponent>
 800707a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800707c:	1813      	adds	r3, r2, r0
 800707e:	2a01      	cmp	r2, #1
 8007080:	4681      	mov	r9, r0
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	dc02      	bgt.n	800708c <_printf_float+0x168>
 8007086:	6822      	ldr	r2, [r4, #0]
 8007088:	07d2      	lsls	r2, r2, #31
 800708a:	d501      	bpl.n	8007090 <_printf_float+0x16c>
 800708c:	3301      	adds	r3, #1
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007094:	2b00      	cmp	r3, #0
 8007096:	d09c      	beq.n	8006fd2 <_printf_float+0xae>
 8007098:	232d      	movs	r3, #45	; 0x2d
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709e:	e798      	b.n	8006fd2 <_printf_float+0xae>
 80070a0:	9a06      	ldr	r2, [sp, #24]
 80070a2:	2a47      	cmp	r2, #71	; 0x47
 80070a4:	d1be      	bne.n	8007024 <_printf_float+0x100>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1bc      	bne.n	8007024 <_printf_float+0x100>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e7b9      	b.n	8007022 <_printf_float+0xfe>
 80070ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070b2:	d118      	bne.n	80070e6 <_printf_float+0x1c2>
 80070b4:	2900      	cmp	r1, #0
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	dd0b      	ble.n	80070d2 <_printf_float+0x1ae>
 80070ba:	6121      	str	r1, [r4, #16]
 80070bc:	b913      	cbnz	r3, 80070c4 <_printf_float+0x1a0>
 80070be:	6822      	ldr	r2, [r4, #0]
 80070c0:	07d0      	lsls	r0, r2, #31
 80070c2:	d502      	bpl.n	80070ca <_printf_float+0x1a6>
 80070c4:	3301      	adds	r3, #1
 80070c6:	440b      	add	r3, r1
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80070cc:	f04f 0900 	mov.w	r9, #0
 80070d0:	e7de      	b.n	8007090 <_printf_float+0x16c>
 80070d2:	b913      	cbnz	r3, 80070da <_printf_float+0x1b6>
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	07d2      	lsls	r2, r2, #31
 80070d8:	d501      	bpl.n	80070de <_printf_float+0x1ba>
 80070da:	3302      	adds	r3, #2
 80070dc:	e7f4      	b.n	80070c8 <_printf_float+0x1a4>
 80070de:	2301      	movs	r3, #1
 80070e0:	e7f2      	b.n	80070c8 <_printf_float+0x1a4>
 80070e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e8:	4299      	cmp	r1, r3
 80070ea:	db05      	blt.n	80070f8 <_printf_float+0x1d4>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	6121      	str	r1, [r4, #16]
 80070f0:	07d8      	lsls	r0, r3, #31
 80070f2:	d5ea      	bpl.n	80070ca <_printf_float+0x1a6>
 80070f4:	1c4b      	adds	r3, r1, #1
 80070f6:	e7e7      	b.n	80070c8 <_printf_float+0x1a4>
 80070f8:	2900      	cmp	r1, #0
 80070fa:	bfd4      	ite	le
 80070fc:	f1c1 0202 	rsble	r2, r1, #2
 8007100:	2201      	movgt	r2, #1
 8007102:	4413      	add	r3, r2
 8007104:	e7e0      	b.n	80070c8 <_printf_float+0x1a4>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	055a      	lsls	r2, r3, #21
 800710a:	d407      	bmi.n	800711c <_printf_float+0x1f8>
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	4642      	mov	r2, r8
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	d12c      	bne.n	8007174 <_printf_float+0x250>
 800711a:	e764      	b.n	8006fe6 <_printf_float+0xc2>
 800711c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007120:	f240 80e0 	bls.w	80072e4 <_printf_float+0x3c0>
 8007124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007128:	2200      	movs	r2, #0
 800712a:	2300      	movs	r3, #0
 800712c:	f7f9 fcd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007130:	2800      	cmp	r0, #0
 8007132:	d034      	beq.n	800719e <_printf_float+0x27a>
 8007134:	4a37      	ldr	r2, [pc, #220]	; (8007214 <_printf_float+0x2f0>)
 8007136:	2301      	movs	r3, #1
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f af51 	beq.w	8006fe6 <_printf_float+0xc2>
 8007144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007148:	429a      	cmp	r2, r3
 800714a:	db02      	blt.n	8007152 <_printf_float+0x22e>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	07d8      	lsls	r0, r3, #31
 8007150:	d510      	bpl.n	8007174 <_printf_float+0x250>
 8007152:	ee18 3a10 	vmov	r3, s16
 8007156:	4652      	mov	r2, sl
 8007158:	4631      	mov	r1, r6
 800715a:	4628      	mov	r0, r5
 800715c:	47b8      	blx	r7
 800715e:	3001      	adds	r0, #1
 8007160:	f43f af41 	beq.w	8006fe6 <_printf_float+0xc2>
 8007164:	f04f 0800 	mov.w	r8, #0
 8007168:	f104 091a 	add.w	r9, r4, #26
 800716c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716e:	3b01      	subs	r3, #1
 8007170:	4543      	cmp	r3, r8
 8007172:	dc09      	bgt.n	8007188 <_printf_float+0x264>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	079b      	lsls	r3, r3, #30
 8007178:	f100 8105 	bmi.w	8007386 <_printf_float+0x462>
 800717c:	68e0      	ldr	r0, [r4, #12]
 800717e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007180:	4298      	cmp	r0, r3
 8007182:	bfb8      	it	lt
 8007184:	4618      	movlt	r0, r3
 8007186:	e730      	b.n	8006fea <_printf_float+0xc6>
 8007188:	2301      	movs	r3, #1
 800718a:	464a      	mov	r2, r9
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af27 	beq.w	8006fe6 <_printf_float+0xc2>
 8007198:	f108 0801 	add.w	r8, r8, #1
 800719c:	e7e6      	b.n	800716c <_printf_float+0x248>
 800719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dc39      	bgt.n	8007218 <_printf_float+0x2f4>
 80071a4:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <_printf_float+0x2f0>)
 80071a6:	2301      	movs	r3, #1
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	f43f af19 	beq.w	8006fe6 <_printf_float+0xc2>
 80071b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d102      	bne.n	80071c2 <_printf_float+0x29e>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	07d9      	lsls	r1, r3, #31
 80071c0:	d5d8      	bpl.n	8007174 <_printf_float+0x250>
 80071c2:	ee18 3a10 	vmov	r3, s16
 80071c6:	4652      	mov	r2, sl
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f af09 	beq.w	8006fe6 <_printf_float+0xc2>
 80071d4:	f04f 0900 	mov.w	r9, #0
 80071d8:	f104 0a1a 	add.w	sl, r4, #26
 80071dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071de:	425b      	negs	r3, r3
 80071e0:	454b      	cmp	r3, r9
 80071e2:	dc01      	bgt.n	80071e8 <_printf_float+0x2c4>
 80071e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e6:	e792      	b.n	800710e <_printf_float+0x1ea>
 80071e8:	2301      	movs	r3, #1
 80071ea:	4652      	mov	r2, sl
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f aef7 	beq.w	8006fe6 <_printf_float+0xc2>
 80071f8:	f109 0901 	add.w	r9, r9, #1
 80071fc:	e7ee      	b.n	80071dc <_printf_float+0x2b8>
 80071fe:	bf00      	nop
 8007200:	7fefffff 	.word	0x7fefffff
 8007204:	0800980c 	.word	0x0800980c
 8007208:	08009810 	.word	0x08009810
 800720c:	08009818 	.word	0x08009818
 8007210:	08009814 	.word	0x08009814
 8007214:	0800981c 	.word	0x0800981c
 8007218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800721a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800721c:	429a      	cmp	r2, r3
 800721e:	bfa8      	it	ge
 8007220:	461a      	movge	r2, r3
 8007222:	2a00      	cmp	r2, #0
 8007224:	4691      	mov	r9, r2
 8007226:	dc37      	bgt.n	8007298 <_printf_float+0x374>
 8007228:	f04f 0b00 	mov.w	fp, #0
 800722c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007230:	f104 021a 	add.w	r2, r4, #26
 8007234:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	eba3 0309 	sub.w	r3, r3, r9
 800723c:	455b      	cmp	r3, fp
 800723e:	dc33      	bgt.n	80072a8 <_printf_float+0x384>
 8007240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007244:	429a      	cmp	r2, r3
 8007246:	db3b      	blt.n	80072c0 <_printf_float+0x39c>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	07da      	lsls	r2, r3, #31
 800724c:	d438      	bmi.n	80072c0 <_printf_float+0x39c>
 800724e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007250:	9b05      	ldr	r3, [sp, #20]
 8007252:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	eba2 0901 	sub.w	r9, r2, r1
 800725a:	4599      	cmp	r9, r3
 800725c:	bfa8      	it	ge
 800725e:	4699      	movge	r9, r3
 8007260:	f1b9 0f00 	cmp.w	r9, #0
 8007264:	dc35      	bgt.n	80072d2 <_printf_float+0x3ae>
 8007266:	f04f 0800 	mov.w	r8, #0
 800726a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800726e:	f104 0a1a 	add.w	sl, r4, #26
 8007272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	eba3 0309 	sub.w	r3, r3, r9
 800727c:	4543      	cmp	r3, r8
 800727e:	f77f af79 	ble.w	8007174 <_printf_float+0x250>
 8007282:	2301      	movs	r3, #1
 8007284:	4652      	mov	r2, sl
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f aeaa 	beq.w	8006fe6 <_printf_float+0xc2>
 8007292:	f108 0801 	add.w	r8, r8, #1
 8007296:	e7ec      	b.n	8007272 <_printf_float+0x34e>
 8007298:	4613      	mov	r3, r2
 800729a:	4631      	mov	r1, r6
 800729c:	4642      	mov	r2, r8
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	d1c0      	bne.n	8007228 <_printf_float+0x304>
 80072a6:	e69e      	b.n	8006fe6 <_printf_float+0xc2>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	9205      	str	r2, [sp, #20]
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f ae97 	beq.w	8006fe6 <_printf_float+0xc2>
 80072b8:	9a05      	ldr	r2, [sp, #20]
 80072ba:	f10b 0b01 	add.w	fp, fp, #1
 80072be:	e7b9      	b.n	8007234 <_printf_float+0x310>
 80072c0:	ee18 3a10 	vmov	r3, s16
 80072c4:	4652      	mov	r2, sl
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b8      	blx	r7
 80072cc:	3001      	adds	r0, #1
 80072ce:	d1be      	bne.n	800724e <_printf_float+0x32a>
 80072d0:	e689      	b.n	8006fe6 <_printf_float+0xc2>
 80072d2:	9a05      	ldr	r2, [sp, #20]
 80072d4:	464b      	mov	r3, r9
 80072d6:	4442      	add	r2, r8
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	d1c1      	bne.n	8007266 <_printf_float+0x342>
 80072e2:	e680      	b.n	8006fe6 <_printf_float+0xc2>
 80072e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072e6:	2a01      	cmp	r2, #1
 80072e8:	dc01      	bgt.n	80072ee <_printf_float+0x3ca>
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	d538      	bpl.n	8007360 <_printf_float+0x43c>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4642      	mov	r2, r8
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae74 	beq.w	8006fe6 <_printf_float+0xc2>
 80072fe:	ee18 3a10 	vmov	r3, s16
 8007302:	4652      	mov	r2, sl
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f ae6b 	beq.w	8006fe6 <_printf_float+0xc2>
 8007310:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007314:	2200      	movs	r2, #0
 8007316:	2300      	movs	r3, #0
 8007318:	f7f9 fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800731c:	b9d8      	cbnz	r0, 8007356 <_printf_float+0x432>
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	f108 0201 	add.w	r2, r8, #1
 8007324:	3b01      	subs	r3, #1
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	d10e      	bne.n	800734e <_printf_float+0x42a>
 8007330:	e659      	b.n	8006fe6 <_printf_float+0xc2>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f ae52 	beq.w	8006fe6 <_printf_float+0xc2>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007348:	3b01      	subs	r3, #1
 800734a:	4543      	cmp	r3, r8
 800734c:	dcf1      	bgt.n	8007332 <_printf_float+0x40e>
 800734e:	464b      	mov	r3, r9
 8007350:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007354:	e6dc      	b.n	8007110 <_printf_float+0x1ec>
 8007356:	f04f 0800 	mov.w	r8, #0
 800735a:	f104 0a1a 	add.w	sl, r4, #26
 800735e:	e7f2      	b.n	8007346 <_printf_float+0x422>
 8007360:	2301      	movs	r3, #1
 8007362:	4642      	mov	r2, r8
 8007364:	e7df      	b.n	8007326 <_printf_float+0x402>
 8007366:	2301      	movs	r3, #1
 8007368:	464a      	mov	r2, r9
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae38 	beq.w	8006fe6 <_printf_float+0xc2>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800737e:	1a5b      	subs	r3, r3, r1
 8007380:	4543      	cmp	r3, r8
 8007382:	dcf0      	bgt.n	8007366 <_printf_float+0x442>
 8007384:	e6fa      	b.n	800717c <_printf_float+0x258>
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	f104 0919 	add.w	r9, r4, #25
 800738e:	e7f4      	b.n	800737a <_printf_float+0x456>

08007390 <_printf_common>:
 8007390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	4616      	mov	r6, r2
 8007396:	4699      	mov	r9, r3
 8007398:	688a      	ldr	r2, [r1, #8]
 800739a:	690b      	ldr	r3, [r1, #16]
 800739c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bfb8      	it	lt
 80073a4:	4613      	movlt	r3, r2
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073ac:	4607      	mov	r7, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	b10a      	cbz	r2, 80073b6 <_printf_common+0x26>
 80073b2:	3301      	adds	r3, #1
 80073b4:	6033      	str	r3, [r6, #0]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	0699      	lsls	r1, r3, #26
 80073ba:	bf42      	ittt	mi
 80073bc:	6833      	ldrmi	r3, [r6, #0]
 80073be:	3302      	addmi	r3, #2
 80073c0:	6033      	strmi	r3, [r6, #0]
 80073c2:	6825      	ldr	r5, [r4, #0]
 80073c4:	f015 0506 	ands.w	r5, r5, #6
 80073c8:	d106      	bne.n	80073d8 <_printf_common+0x48>
 80073ca:	f104 0a19 	add.w	sl, r4, #25
 80073ce:	68e3      	ldr	r3, [r4, #12]
 80073d0:	6832      	ldr	r2, [r6, #0]
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	42ab      	cmp	r3, r5
 80073d6:	dc26      	bgt.n	8007426 <_printf_common+0x96>
 80073d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073dc:	1e13      	subs	r3, r2, #0
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	bf18      	it	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	0692      	lsls	r2, r2, #26
 80073e6:	d42b      	bmi.n	8007440 <_printf_common+0xb0>
 80073e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ec:	4649      	mov	r1, r9
 80073ee:	4638      	mov	r0, r7
 80073f0:	47c0      	blx	r8
 80073f2:	3001      	adds	r0, #1
 80073f4:	d01e      	beq.n	8007434 <_printf_common+0xa4>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	68e5      	ldr	r5, [r4, #12]
 80073fa:	6832      	ldr	r2, [r6, #0]
 80073fc:	f003 0306 	and.w	r3, r3, #6
 8007400:	2b04      	cmp	r3, #4
 8007402:	bf08      	it	eq
 8007404:	1aad      	subeq	r5, r5, r2
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	6922      	ldr	r2, [r4, #16]
 800740a:	bf0c      	ite	eq
 800740c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007410:	2500      	movne	r5, #0
 8007412:	4293      	cmp	r3, r2
 8007414:	bfc4      	itt	gt
 8007416:	1a9b      	subgt	r3, r3, r2
 8007418:	18ed      	addgt	r5, r5, r3
 800741a:	2600      	movs	r6, #0
 800741c:	341a      	adds	r4, #26
 800741e:	42b5      	cmp	r5, r6
 8007420:	d11a      	bne.n	8007458 <_printf_common+0xc8>
 8007422:	2000      	movs	r0, #0
 8007424:	e008      	b.n	8007438 <_printf_common+0xa8>
 8007426:	2301      	movs	r3, #1
 8007428:	4652      	mov	r2, sl
 800742a:	4649      	mov	r1, r9
 800742c:	4638      	mov	r0, r7
 800742e:	47c0      	blx	r8
 8007430:	3001      	adds	r0, #1
 8007432:	d103      	bne.n	800743c <_printf_common+0xac>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743c:	3501      	adds	r5, #1
 800743e:	e7c6      	b.n	80073ce <_printf_common+0x3e>
 8007440:	18e1      	adds	r1, r4, r3
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	2030      	movs	r0, #48	; 0x30
 8007446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800744a:	4422      	add	r2, r4
 800744c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007454:	3302      	adds	r3, #2
 8007456:	e7c7      	b.n	80073e8 <_printf_common+0x58>
 8007458:	2301      	movs	r3, #1
 800745a:	4622      	mov	r2, r4
 800745c:	4649      	mov	r1, r9
 800745e:	4638      	mov	r0, r7
 8007460:	47c0      	blx	r8
 8007462:	3001      	adds	r0, #1
 8007464:	d0e6      	beq.n	8007434 <_printf_common+0xa4>
 8007466:	3601      	adds	r6, #1
 8007468:	e7d9      	b.n	800741e <_printf_common+0x8e>
	...

0800746c <_printf_i>:
 800746c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	460c      	mov	r4, r1
 8007472:	4691      	mov	r9, r2
 8007474:	7e27      	ldrb	r7, [r4, #24]
 8007476:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007478:	2f78      	cmp	r7, #120	; 0x78
 800747a:	4680      	mov	r8, r0
 800747c:	469a      	mov	sl, r3
 800747e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007482:	d807      	bhi.n	8007494 <_printf_i+0x28>
 8007484:	2f62      	cmp	r7, #98	; 0x62
 8007486:	d80a      	bhi.n	800749e <_printf_i+0x32>
 8007488:	2f00      	cmp	r7, #0
 800748a:	f000 80d8 	beq.w	800763e <_printf_i+0x1d2>
 800748e:	2f58      	cmp	r7, #88	; 0x58
 8007490:	f000 80a3 	beq.w	80075da <_printf_i+0x16e>
 8007494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800749c:	e03a      	b.n	8007514 <_printf_i+0xa8>
 800749e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074a2:	2b15      	cmp	r3, #21
 80074a4:	d8f6      	bhi.n	8007494 <_printf_i+0x28>
 80074a6:	a001      	add	r0, pc, #4	; (adr r0, 80074ac <_printf_i+0x40>)
 80074a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074ac:	08007505 	.word	0x08007505
 80074b0:	08007519 	.word	0x08007519
 80074b4:	08007495 	.word	0x08007495
 80074b8:	08007495 	.word	0x08007495
 80074bc:	08007495 	.word	0x08007495
 80074c0:	08007495 	.word	0x08007495
 80074c4:	08007519 	.word	0x08007519
 80074c8:	08007495 	.word	0x08007495
 80074cc:	08007495 	.word	0x08007495
 80074d0:	08007495 	.word	0x08007495
 80074d4:	08007495 	.word	0x08007495
 80074d8:	08007625 	.word	0x08007625
 80074dc:	08007549 	.word	0x08007549
 80074e0:	08007607 	.word	0x08007607
 80074e4:	08007495 	.word	0x08007495
 80074e8:	08007495 	.word	0x08007495
 80074ec:	08007647 	.word	0x08007647
 80074f0:	08007495 	.word	0x08007495
 80074f4:	08007549 	.word	0x08007549
 80074f8:	08007495 	.word	0x08007495
 80074fc:	08007495 	.word	0x08007495
 8007500:	0800760f 	.word	0x0800760f
 8007504:	680b      	ldr	r3, [r1, #0]
 8007506:	1d1a      	adds	r2, r3, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	600a      	str	r2, [r1, #0]
 800750c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007514:	2301      	movs	r3, #1
 8007516:	e0a3      	b.n	8007660 <_printf_i+0x1f4>
 8007518:	6825      	ldr	r5, [r4, #0]
 800751a:	6808      	ldr	r0, [r1, #0]
 800751c:	062e      	lsls	r6, r5, #24
 800751e:	f100 0304 	add.w	r3, r0, #4
 8007522:	d50a      	bpl.n	800753a <_printf_i+0xce>
 8007524:	6805      	ldr	r5, [r0, #0]
 8007526:	600b      	str	r3, [r1, #0]
 8007528:	2d00      	cmp	r5, #0
 800752a:	da03      	bge.n	8007534 <_printf_i+0xc8>
 800752c:	232d      	movs	r3, #45	; 0x2d
 800752e:	426d      	negs	r5, r5
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007534:	485e      	ldr	r0, [pc, #376]	; (80076b0 <_printf_i+0x244>)
 8007536:	230a      	movs	r3, #10
 8007538:	e019      	b.n	800756e <_printf_i+0x102>
 800753a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800753e:	6805      	ldr	r5, [r0, #0]
 8007540:	600b      	str	r3, [r1, #0]
 8007542:	bf18      	it	ne
 8007544:	b22d      	sxthne	r5, r5
 8007546:	e7ef      	b.n	8007528 <_printf_i+0xbc>
 8007548:	680b      	ldr	r3, [r1, #0]
 800754a:	6825      	ldr	r5, [r4, #0]
 800754c:	1d18      	adds	r0, r3, #4
 800754e:	6008      	str	r0, [r1, #0]
 8007550:	0628      	lsls	r0, r5, #24
 8007552:	d501      	bpl.n	8007558 <_printf_i+0xec>
 8007554:	681d      	ldr	r5, [r3, #0]
 8007556:	e002      	b.n	800755e <_printf_i+0xf2>
 8007558:	0669      	lsls	r1, r5, #25
 800755a:	d5fb      	bpl.n	8007554 <_printf_i+0xe8>
 800755c:	881d      	ldrh	r5, [r3, #0]
 800755e:	4854      	ldr	r0, [pc, #336]	; (80076b0 <_printf_i+0x244>)
 8007560:	2f6f      	cmp	r7, #111	; 0x6f
 8007562:	bf0c      	ite	eq
 8007564:	2308      	moveq	r3, #8
 8007566:	230a      	movne	r3, #10
 8007568:	2100      	movs	r1, #0
 800756a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800756e:	6866      	ldr	r6, [r4, #4]
 8007570:	60a6      	str	r6, [r4, #8]
 8007572:	2e00      	cmp	r6, #0
 8007574:	bfa2      	ittt	ge
 8007576:	6821      	ldrge	r1, [r4, #0]
 8007578:	f021 0104 	bicge.w	r1, r1, #4
 800757c:	6021      	strge	r1, [r4, #0]
 800757e:	b90d      	cbnz	r5, 8007584 <_printf_i+0x118>
 8007580:	2e00      	cmp	r6, #0
 8007582:	d04d      	beq.n	8007620 <_printf_i+0x1b4>
 8007584:	4616      	mov	r6, r2
 8007586:	fbb5 f1f3 	udiv	r1, r5, r3
 800758a:	fb03 5711 	mls	r7, r3, r1, r5
 800758e:	5dc7      	ldrb	r7, [r0, r7]
 8007590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007594:	462f      	mov	r7, r5
 8007596:	42bb      	cmp	r3, r7
 8007598:	460d      	mov	r5, r1
 800759a:	d9f4      	bls.n	8007586 <_printf_i+0x11a>
 800759c:	2b08      	cmp	r3, #8
 800759e:	d10b      	bne.n	80075b8 <_printf_i+0x14c>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	07df      	lsls	r7, r3, #31
 80075a4:	d508      	bpl.n	80075b8 <_printf_i+0x14c>
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	4299      	cmp	r1, r3
 80075ac:	bfde      	ittt	le
 80075ae:	2330      	movle	r3, #48	; 0x30
 80075b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075b8:	1b92      	subs	r2, r2, r6
 80075ba:	6122      	str	r2, [r4, #16]
 80075bc:	f8cd a000 	str.w	sl, [sp]
 80075c0:	464b      	mov	r3, r9
 80075c2:	aa03      	add	r2, sp, #12
 80075c4:	4621      	mov	r1, r4
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7ff fee2 	bl	8007390 <_printf_common>
 80075cc:	3001      	adds	r0, #1
 80075ce:	d14c      	bne.n	800766a <_printf_i+0x1fe>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b004      	add	sp, #16
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	4835      	ldr	r0, [pc, #212]	; (80076b0 <_printf_i+0x244>)
 80075dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	680e      	ldr	r6, [r1, #0]
 80075e4:	061f      	lsls	r7, r3, #24
 80075e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80075ea:	600e      	str	r6, [r1, #0]
 80075ec:	d514      	bpl.n	8007618 <_printf_i+0x1ac>
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	bf44      	itt	mi
 80075f2:	f043 0320 	orrmi.w	r3, r3, #32
 80075f6:	6023      	strmi	r3, [r4, #0]
 80075f8:	b91d      	cbnz	r5, 8007602 <_printf_i+0x196>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	f023 0320 	bic.w	r3, r3, #32
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	2310      	movs	r3, #16
 8007604:	e7b0      	b.n	8007568 <_printf_i+0xfc>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	f043 0320 	orr.w	r3, r3, #32
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	2378      	movs	r3, #120	; 0x78
 8007610:	4828      	ldr	r0, [pc, #160]	; (80076b4 <_printf_i+0x248>)
 8007612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007616:	e7e3      	b.n	80075e0 <_printf_i+0x174>
 8007618:	065e      	lsls	r6, r3, #25
 800761a:	bf48      	it	mi
 800761c:	b2ad      	uxthmi	r5, r5
 800761e:	e7e6      	b.n	80075ee <_printf_i+0x182>
 8007620:	4616      	mov	r6, r2
 8007622:	e7bb      	b.n	800759c <_printf_i+0x130>
 8007624:	680b      	ldr	r3, [r1, #0]
 8007626:	6826      	ldr	r6, [r4, #0]
 8007628:	6960      	ldr	r0, [r4, #20]
 800762a:	1d1d      	adds	r5, r3, #4
 800762c:	600d      	str	r5, [r1, #0]
 800762e:	0635      	lsls	r5, r6, #24
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	d501      	bpl.n	8007638 <_printf_i+0x1cc>
 8007634:	6018      	str	r0, [r3, #0]
 8007636:	e002      	b.n	800763e <_printf_i+0x1d2>
 8007638:	0671      	lsls	r1, r6, #25
 800763a:	d5fb      	bpl.n	8007634 <_printf_i+0x1c8>
 800763c:	8018      	strh	r0, [r3, #0]
 800763e:	2300      	movs	r3, #0
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	4616      	mov	r6, r2
 8007644:	e7ba      	b.n	80075bc <_printf_i+0x150>
 8007646:	680b      	ldr	r3, [r1, #0]
 8007648:	1d1a      	adds	r2, r3, #4
 800764a:	600a      	str	r2, [r1, #0]
 800764c:	681e      	ldr	r6, [r3, #0]
 800764e:	6862      	ldr	r2, [r4, #4]
 8007650:	2100      	movs	r1, #0
 8007652:	4630      	mov	r0, r6
 8007654:	f7f8 fdcc 	bl	80001f0 <memchr>
 8007658:	b108      	cbz	r0, 800765e <_printf_i+0x1f2>
 800765a:	1b80      	subs	r0, r0, r6
 800765c:	6060      	str	r0, [r4, #4]
 800765e:	6863      	ldr	r3, [r4, #4]
 8007660:	6123      	str	r3, [r4, #16]
 8007662:	2300      	movs	r3, #0
 8007664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007668:	e7a8      	b.n	80075bc <_printf_i+0x150>
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	4632      	mov	r2, r6
 800766e:	4649      	mov	r1, r9
 8007670:	4640      	mov	r0, r8
 8007672:	47d0      	blx	sl
 8007674:	3001      	adds	r0, #1
 8007676:	d0ab      	beq.n	80075d0 <_printf_i+0x164>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	d413      	bmi.n	80076a6 <_printf_i+0x23a>
 800767e:	68e0      	ldr	r0, [r4, #12]
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	4298      	cmp	r0, r3
 8007684:	bfb8      	it	lt
 8007686:	4618      	movlt	r0, r3
 8007688:	e7a4      	b.n	80075d4 <_printf_i+0x168>
 800768a:	2301      	movs	r3, #1
 800768c:	4632      	mov	r2, r6
 800768e:	4649      	mov	r1, r9
 8007690:	4640      	mov	r0, r8
 8007692:	47d0      	blx	sl
 8007694:	3001      	adds	r0, #1
 8007696:	d09b      	beq.n	80075d0 <_printf_i+0x164>
 8007698:	3501      	adds	r5, #1
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	9903      	ldr	r1, [sp, #12]
 800769e:	1a5b      	subs	r3, r3, r1
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dcf2      	bgt.n	800768a <_printf_i+0x21e>
 80076a4:	e7eb      	b.n	800767e <_printf_i+0x212>
 80076a6:	2500      	movs	r5, #0
 80076a8:	f104 0619 	add.w	r6, r4, #25
 80076ac:	e7f5      	b.n	800769a <_printf_i+0x22e>
 80076ae:	bf00      	nop
 80076b0:	0800981e 	.word	0x0800981e
 80076b4:	0800982f 	.word	0x0800982f

080076b8 <quorem>:
 80076b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	6903      	ldr	r3, [r0, #16]
 80076be:	690c      	ldr	r4, [r1, #16]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	4607      	mov	r7, r0
 80076c4:	f2c0 8081 	blt.w	80077ca <quorem+0x112>
 80076c8:	3c01      	subs	r4, #1
 80076ca:	f101 0814 	add.w	r8, r1, #20
 80076ce:	f100 0514 	add.w	r5, r0, #20
 80076d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e0:	3301      	adds	r3, #1
 80076e2:	429a      	cmp	r2, r3
 80076e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80076f0:	d331      	bcc.n	8007756 <quorem+0x9e>
 80076f2:	f04f 0e00 	mov.w	lr, #0
 80076f6:	4640      	mov	r0, r8
 80076f8:	46ac      	mov	ip, r5
 80076fa:	46f2      	mov	sl, lr
 80076fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007700:	b293      	uxth	r3, r2
 8007702:	fb06 e303 	mla	r3, r6, r3, lr
 8007706:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800770a:	b29b      	uxth	r3, r3
 800770c:	ebaa 0303 	sub.w	r3, sl, r3
 8007710:	0c12      	lsrs	r2, r2, #16
 8007712:	f8dc a000 	ldr.w	sl, [ip]
 8007716:	fb06 e202 	mla	r2, r6, r2, lr
 800771a:	fa13 f38a 	uxtah	r3, r3, sl
 800771e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007722:	fa1f fa82 	uxth.w	sl, r2
 8007726:	f8dc 2000 	ldr.w	r2, [ip]
 800772a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800772e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007738:	4581      	cmp	r9, r0
 800773a:	f84c 3b04 	str.w	r3, [ip], #4
 800773e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007742:	d2db      	bcs.n	80076fc <quorem+0x44>
 8007744:	f855 300b 	ldr.w	r3, [r5, fp]
 8007748:	b92b      	cbnz	r3, 8007756 <quorem+0x9e>
 800774a:	9b01      	ldr	r3, [sp, #4]
 800774c:	3b04      	subs	r3, #4
 800774e:	429d      	cmp	r5, r3
 8007750:	461a      	mov	r2, r3
 8007752:	d32e      	bcc.n	80077b2 <quorem+0xfa>
 8007754:	613c      	str	r4, [r7, #16]
 8007756:	4638      	mov	r0, r7
 8007758:	f001 f8be 	bl	80088d8 <__mcmp>
 800775c:	2800      	cmp	r0, #0
 800775e:	db24      	blt.n	80077aa <quorem+0xf2>
 8007760:	3601      	adds	r6, #1
 8007762:	4628      	mov	r0, r5
 8007764:	f04f 0c00 	mov.w	ip, #0
 8007768:	f858 2b04 	ldr.w	r2, [r8], #4
 800776c:	f8d0 e000 	ldr.w	lr, [r0]
 8007770:	b293      	uxth	r3, r2
 8007772:	ebac 0303 	sub.w	r3, ip, r3
 8007776:	0c12      	lsrs	r2, r2, #16
 8007778:	fa13 f38e 	uxtah	r3, r3, lr
 800777c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007784:	b29b      	uxth	r3, r3
 8007786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778a:	45c1      	cmp	r9, r8
 800778c:	f840 3b04 	str.w	r3, [r0], #4
 8007790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007794:	d2e8      	bcs.n	8007768 <quorem+0xb0>
 8007796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800779a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779e:	b922      	cbnz	r2, 80077aa <quorem+0xf2>
 80077a0:	3b04      	subs	r3, #4
 80077a2:	429d      	cmp	r5, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	d30a      	bcc.n	80077be <quorem+0x106>
 80077a8:	613c      	str	r4, [r7, #16]
 80077aa:	4630      	mov	r0, r6
 80077ac:	b003      	add	sp, #12
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d1cc      	bne.n	8007754 <quorem+0x9c>
 80077ba:	3c01      	subs	r4, #1
 80077bc:	e7c7      	b.n	800774e <quorem+0x96>
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	d1f0      	bne.n	80077a8 <quorem+0xf0>
 80077c6:	3c01      	subs	r4, #1
 80077c8:	e7eb      	b.n	80077a2 <quorem+0xea>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e7ee      	b.n	80077ac <quorem+0xf4>
	...

080077d0 <_dtoa_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	ed2d 8b02 	vpush	{d8}
 80077d8:	ec57 6b10 	vmov	r6, r7, d0
 80077dc:	b095      	sub	sp, #84	; 0x54
 80077de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077e4:	9105      	str	r1, [sp, #20]
 80077e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80077ea:	4604      	mov	r4, r0
 80077ec:	9209      	str	r2, [sp, #36]	; 0x24
 80077ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80077f0:	b975      	cbnz	r5, 8007810 <_dtoa_r+0x40>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f000 fddc 	bl	80083b0 <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6260      	str	r0, [r4, #36]	; 0x24
 80077fc:	b920      	cbnz	r0, 8007808 <_dtoa_r+0x38>
 80077fe:	4bb2      	ldr	r3, [pc, #712]	; (8007ac8 <_dtoa_r+0x2f8>)
 8007800:	21ea      	movs	r1, #234	; 0xea
 8007802:	48b2      	ldr	r0, [pc, #712]	; (8007acc <_dtoa_r+0x2fc>)
 8007804:	f001 fa32 	bl	8008c6c <__assert_func>
 8007808:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800780c:	6005      	str	r5, [r0, #0]
 800780e:	60c5      	str	r5, [r0, #12]
 8007810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	b151      	cbz	r1, 800782c <_dtoa_r+0x5c>
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	604a      	str	r2, [r1, #4]
 800781a:	2301      	movs	r3, #1
 800781c:	4093      	lsls	r3, r2
 800781e:	608b      	str	r3, [r1, #8]
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fe1b 	bl	800845c <_Bfree>
 8007826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	1e3b      	subs	r3, r7, #0
 800782e:	bfb9      	ittee	lt
 8007830:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007834:	9303      	strlt	r3, [sp, #12]
 8007836:	2300      	movge	r3, #0
 8007838:	f8c8 3000 	strge.w	r3, [r8]
 800783c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007840:	4ba3      	ldr	r3, [pc, #652]	; (8007ad0 <_dtoa_r+0x300>)
 8007842:	bfbc      	itt	lt
 8007844:	2201      	movlt	r2, #1
 8007846:	f8c8 2000 	strlt.w	r2, [r8]
 800784a:	ea33 0309 	bics.w	r3, r3, r9
 800784e:	d11b      	bne.n	8007888 <_dtoa_r+0xb8>
 8007850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007852:	f242 730f 	movw	r3, #9999	; 0x270f
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800785c:	4333      	orrs	r3, r6
 800785e:	f000 857a 	beq.w	8008356 <_dtoa_r+0xb86>
 8007862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007864:	b963      	cbnz	r3, 8007880 <_dtoa_r+0xb0>
 8007866:	4b9b      	ldr	r3, [pc, #620]	; (8007ad4 <_dtoa_r+0x304>)
 8007868:	e024      	b.n	80078b4 <_dtoa_r+0xe4>
 800786a:	4b9b      	ldr	r3, [pc, #620]	; (8007ad8 <_dtoa_r+0x308>)
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	9800      	ldr	r0, [sp, #0]
 8007876:	b015      	add	sp, #84	; 0x54
 8007878:	ecbd 8b02 	vpop	{d8}
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	4b94      	ldr	r3, [pc, #592]	; (8007ad4 <_dtoa_r+0x304>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	3303      	adds	r3, #3
 8007886:	e7f3      	b.n	8007870 <_dtoa_r+0xa0>
 8007888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	ec51 0b17 	vmov	r0, r1, d7
 8007892:	2300      	movs	r3, #0
 8007894:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007898:	f7f9 f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800789c:	4680      	mov	r8, r0
 800789e:	b158      	cbz	r0, 80078b8 <_dtoa_r+0xe8>
 80078a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078a2:	2301      	movs	r3, #1
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8551 	beq.w	8008350 <_dtoa_r+0xb80>
 80078ae:	488b      	ldr	r0, [pc, #556]	; (8007adc <_dtoa_r+0x30c>)
 80078b0:	6018      	str	r0, [r3, #0]
 80078b2:	1e43      	subs	r3, r0, #1
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	e7dd      	b.n	8007874 <_dtoa_r+0xa4>
 80078b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80078bc:	aa12      	add	r2, sp, #72	; 0x48
 80078be:	a913      	add	r1, sp, #76	; 0x4c
 80078c0:	4620      	mov	r0, r4
 80078c2:	f001 f8ad 	bl	8008a20 <__d2b>
 80078c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078ca:	4683      	mov	fp, r0
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	d07c      	beq.n	80079ca <_dtoa_r+0x1fa>
 80078d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80078d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80078de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80078e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80078e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078ea:	4b7d      	ldr	r3, [pc, #500]	; (8007ae0 <_dtoa_r+0x310>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	4630      	mov	r0, r6
 80078f0:	4639      	mov	r1, r7
 80078f2:	f7f8 fcd1 	bl	8000298 <__aeabi_dsub>
 80078f6:	a36e      	add	r3, pc, #440	; (adr r3, 8007ab0 <_dtoa_r+0x2e0>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f7f8 fe84 	bl	8000608 <__aeabi_dmul>
 8007900:	a36d      	add	r3, pc, #436	; (adr r3, 8007ab8 <_dtoa_r+0x2e8>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fcc9 	bl	800029c <__adddf3>
 800790a:	4606      	mov	r6, r0
 800790c:	4628      	mov	r0, r5
 800790e:	460f      	mov	r7, r1
 8007910:	f7f8 fe10 	bl	8000534 <__aeabi_i2d>
 8007914:	a36a      	add	r3, pc, #424	; (adr r3, 8007ac0 <_dtoa_r+0x2f0>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fe75 	bl	8000608 <__aeabi_dmul>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4630      	mov	r0, r6
 8007924:	4639      	mov	r1, r7
 8007926:	f7f8 fcb9 	bl	800029c <__adddf3>
 800792a:	4606      	mov	r6, r0
 800792c:	460f      	mov	r7, r1
 800792e:	f7f9 f91b 	bl	8000b68 <__aeabi_d2iz>
 8007932:	2200      	movs	r2, #0
 8007934:	4682      	mov	sl, r0
 8007936:	2300      	movs	r3, #0
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f9 f8d6 	bl	8000aec <__aeabi_dcmplt>
 8007940:	b148      	cbz	r0, 8007956 <_dtoa_r+0x186>
 8007942:	4650      	mov	r0, sl
 8007944:	f7f8 fdf6 	bl	8000534 <__aeabi_i2d>
 8007948:	4632      	mov	r2, r6
 800794a:	463b      	mov	r3, r7
 800794c:	f7f9 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007950:	b908      	cbnz	r0, 8007956 <_dtoa_r+0x186>
 8007952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007956:	f1ba 0f16 	cmp.w	sl, #22
 800795a:	d854      	bhi.n	8007a06 <_dtoa_r+0x236>
 800795c:	4b61      	ldr	r3, [pc, #388]	; (8007ae4 <_dtoa_r+0x314>)
 800795e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800796a:	f7f9 f8bf 	bl	8000aec <__aeabi_dcmplt>
 800796e:	2800      	cmp	r0, #0
 8007970:	d04b      	beq.n	8007a0a <_dtoa_r+0x23a>
 8007972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007976:	2300      	movs	r3, #0
 8007978:	930e      	str	r3, [sp, #56]	; 0x38
 800797a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800797c:	1b5d      	subs	r5, r3, r5
 800797e:	1e6b      	subs	r3, r5, #1
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	bf43      	ittte	mi
 8007984:	2300      	movmi	r3, #0
 8007986:	f1c5 0801 	rsbmi	r8, r5, #1
 800798a:	9304      	strmi	r3, [sp, #16]
 800798c:	f04f 0800 	movpl.w	r8, #0
 8007990:	f1ba 0f00 	cmp.w	sl, #0
 8007994:	db3b      	blt.n	8007a0e <_dtoa_r+0x23e>
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800799c:	4453      	add	r3, sl
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9306      	str	r3, [sp, #24]
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d869      	bhi.n	8007a7e <_dtoa_r+0x2ae>
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	bfc4      	itt	gt
 80079ae:	3b04      	subgt	r3, #4
 80079b0:	9305      	strgt	r3, [sp, #20]
 80079b2:	9b05      	ldr	r3, [sp, #20]
 80079b4:	f1a3 0302 	sub.w	r3, r3, #2
 80079b8:	bfcc      	ite	gt
 80079ba:	2500      	movgt	r5, #0
 80079bc:	2501      	movle	r5, #1
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d869      	bhi.n	8007a96 <_dtoa_r+0x2c6>
 80079c2:	e8df f003 	tbb	[pc, r3]
 80079c6:	4e2c      	.short	0x4e2c
 80079c8:	5a4c      	.short	0x5a4c
 80079ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80079ce:	441d      	add	r5, r3
 80079d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	bfc1      	itttt	gt
 80079d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80079e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80079e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80079e8:	bfda      	itte	le
 80079ea:	f1c3 0320 	rsble	r3, r3, #32
 80079ee:	fa06 f003 	lslle.w	r0, r6, r3
 80079f2:	4318      	orrgt	r0, r3
 80079f4:	f7f8 fd8e 	bl	8000514 <__aeabi_ui2d>
 80079f8:	2301      	movs	r3, #1
 80079fa:	4606      	mov	r6, r0
 80079fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a00:	3d01      	subs	r5, #1
 8007a02:	9310      	str	r3, [sp, #64]	; 0x40
 8007a04:	e771      	b.n	80078ea <_dtoa_r+0x11a>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e7b6      	b.n	8007978 <_dtoa_r+0x1a8>
 8007a0a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a0c:	e7b5      	b.n	800797a <_dtoa_r+0x1aa>
 8007a0e:	f1ca 0300 	rsb	r3, sl, #0
 8007a12:	9306      	str	r3, [sp, #24]
 8007a14:	2300      	movs	r3, #0
 8007a16:	eba8 080a 	sub.w	r8, r8, sl
 8007a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a1c:	e7c2      	b.n	80079a4 <_dtoa_r+0x1d4>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9308      	str	r3, [sp, #32]
 8007a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dc39      	bgt.n	8007a9c <_dtoa_r+0x2cc>
 8007a28:	f04f 0901 	mov.w	r9, #1
 8007a2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a30:	464b      	mov	r3, r9
 8007a32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6042      	str	r2, [r0, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f102 0614 	add.w	r6, r2, #20
 8007a42:	429e      	cmp	r6, r3
 8007a44:	6841      	ldr	r1, [r0, #4]
 8007a46:	d92f      	bls.n	8007aa8 <_dtoa_r+0x2d8>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fcc7 	bl	80083dc <_Balloc>
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d14b      	bne.n	8007aec <_dtoa_r+0x31c>
 8007a54:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <_dtoa_r+0x318>)
 8007a56:	4602      	mov	r2, r0
 8007a58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a5c:	e6d1      	b.n	8007802 <_dtoa_r+0x32>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7de      	b.n	8007a20 <_dtoa_r+0x250>
 8007a62:	2300      	movs	r3, #0
 8007a64:	9308      	str	r3, [sp, #32]
 8007a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a68:	eb0a 0903 	add.w	r9, sl, r3
 8007a6c:	f109 0301 	add.w	r3, r9, #1
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	bfb8      	it	lt
 8007a76:	2301      	movlt	r3, #1
 8007a78:	e7dd      	b.n	8007a36 <_dtoa_r+0x266>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e7f2      	b.n	8007a64 <_dtoa_r+0x294>
 8007a7e:	2501      	movs	r5, #1
 8007a80:	2300      	movs	r3, #0
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	9508      	str	r5, [sp, #32]
 8007a86:	f04f 39ff 	mov.w	r9, #4294967295
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a90:	2312      	movs	r3, #18
 8007a92:	9209      	str	r2, [sp, #36]	; 0x24
 8007a94:	e7cf      	b.n	8007a36 <_dtoa_r+0x266>
 8007a96:	2301      	movs	r3, #1
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	e7f4      	b.n	8007a86 <_dtoa_r+0x2b6>
 8007a9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007aa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	e7c6      	b.n	8007a36 <_dtoa_r+0x266>
 8007aa8:	3101      	adds	r1, #1
 8007aaa:	6041      	str	r1, [r0, #4]
 8007aac:	0052      	lsls	r2, r2, #1
 8007aae:	e7c6      	b.n	8007a3e <_dtoa_r+0x26e>
 8007ab0:	636f4361 	.word	0x636f4361
 8007ab4:	3fd287a7 	.word	0x3fd287a7
 8007ab8:	8b60c8b3 	.word	0x8b60c8b3
 8007abc:	3fc68a28 	.word	0x3fc68a28
 8007ac0:	509f79fb 	.word	0x509f79fb
 8007ac4:	3fd34413 	.word	0x3fd34413
 8007ac8:	0800984d 	.word	0x0800984d
 8007acc:	08009864 	.word	0x08009864
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	08009849 	.word	0x08009849
 8007ad8:	08009840 	.word	0x08009840
 8007adc:	0800981d 	.word	0x0800981d
 8007ae0:	3ff80000 	.word	0x3ff80000
 8007ae4:	08009960 	.word	0x08009960
 8007ae8:	080098c3 	.word	0x080098c3
 8007aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aee:	9a00      	ldr	r2, [sp, #0]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	9b01      	ldr	r3, [sp, #4]
 8007af4:	2b0e      	cmp	r3, #14
 8007af6:	f200 80ad 	bhi.w	8007c54 <_dtoa_r+0x484>
 8007afa:	2d00      	cmp	r5, #0
 8007afc:	f000 80aa 	beq.w	8007c54 <_dtoa_r+0x484>
 8007b00:	f1ba 0f00 	cmp.w	sl, #0
 8007b04:	dd36      	ble.n	8007b74 <_dtoa_r+0x3a4>
 8007b06:	4ac3      	ldr	r2, [pc, #780]	; (8007e14 <_dtoa_r+0x644>)
 8007b08:	f00a 030f 	and.w	r3, sl, #15
 8007b0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b10:	ed93 7b00 	vldr	d7, [r3]
 8007b14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b1c:	eeb0 8a47 	vmov.f32	s16, s14
 8007b20:	eef0 8a67 	vmov.f32	s17, s15
 8007b24:	d016      	beq.n	8007b54 <_dtoa_r+0x384>
 8007b26:	4bbc      	ldr	r3, [pc, #752]	; (8007e18 <_dtoa_r+0x648>)
 8007b28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b30:	f7f8 fe94 	bl	800085c <__aeabi_ddiv>
 8007b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b38:	f007 070f 	and.w	r7, r7, #15
 8007b3c:	2503      	movs	r5, #3
 8007b3e:	4eb6      	ldr	r6, [pc, #728]	; (8007e18 <_dtoa_r+0x648>)
 8007b40:	b957      	cbnz	r7, 8007b58 <_dtoa_r+0x388>
 8007b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b46:	ec53 2b18 	vmov	r2, r3, d8
 8007b4a:	f7f8 fe87 	bl	800085c <__aeabi_ddiv>
 8007b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b52:	e029      	b.n	8007ba8 <_dtoa_r+0x3d8>
 8007b54:	2502      	movs	r5, #2
 8007b56:	e7f2      	b.n	8007b3e <_dtoa_r+0x36e>
 8007b58:	07f9      	lsls	r1, r7, #31
 8007b5a:	d508      	bpl.n	8007b6e <_dtoa_r+0x39e>
 8007b5c:	ec51 0b18 	vmov	r0, r1, d8
 8007b60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b64:	f7f8 fd50 	bl	8000608 <__aeabi_dmul>
 8007b68:	ec41 0b18 	vmov	d8, r0, r1
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	107f      	asrs	r7, r7, #1
 8007b70:	3608      	adds	r6, #8
 8007b72:	e7e5      	b.n	8007b40 <_dtoa_r+0x370>
 8007b74:	f000 80a6 	beq.w	8007cc4 <_dtoa_r+0x4f4>
 8007b78:	f1ca 0600 	rsb	r6, sl, #0
 8007b7c:	4ba5      	ldr	r3, [pc, #660]	; (8007e14 <_dtoa_r+0x644>)
 8007b7e:	4fa6      	ldr	r7, [pc, #664]	; (8007e18 <_dtoa_r+0x648>)
 8007b80:	f006 020f 	and.w	r2, r6, #15
 8007b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b90:	f7f8 fd3a 	bl	8000608 <__aeabi_dmul>
 8007b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b98:	1136      	asrs	r6, r6, #4
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2502      	movs	r5, #2
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	f040 8085 	bne.w	8007cae <_dtoa_r+0x4de>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1d2      	bne.n	8007b4e <_dtoa_r+0x37e>
 8007ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 808c 	beq.w	8007cc8 <_dtoa_r+0x4f8>
 8007bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bb4:	4b99      	ldr	r3, [pc, #612]	; (8007e1c <_dtoa_r+0x64c>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4630      	mov	r0, r6
 8007bba:	4639      	mov	r1, r7
 8007bbc:	f7f8 ff96 	bl	8000aec <__aeabi_dcmplt>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f000 8081 	beq.w	8007cc8 <_dtoa_r+0x4f8>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d07d      	beq.n	8007cc8 <_dtoa_r+0x4f8>
 8007bcc:	f1b9 0f00 	cmp.w	r9, #0
 8007bd0:	dd3c      	ble.n	8007c4c <_dtoa_r+0x47c>
 8007bd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007bd6:	9307      	str	r3, [sp, #28]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4b91      	ldr	r3, [pc, #580]	; (8007e20 <_dtoa_r+0x650>)
 8007bdc:	4630      	mov	r0, r6
 8007bde:	4639      	mov	r1, r7
 8007be0:	f7f8 fd12 	bl	8000608 <__aeabi_dmul>
 8007be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be8:	3501      	adds	r5, #1
 8007bea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007bee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7f8 fc9e 	bl	8000534 <__aeabi_i2d>
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	f7f8 fd04 	bl	8000608 <__aeabi_dmul>
 8007c00:	4b88      	ldr	r3, [pc, #544]	; (8007e24 <_dtoa_r+0x654>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f7f8 fb4a 	bl	800029c <__adddf3>
 8007c08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d15c      	bne.n	8007cd2 <_dtoa_r+0x502>
 8007c18:	4b83      	ldr	r3, [pc, #524]	; (8007e28 <_dtoa_r+0x658>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fb3a 	bl	8000298 <__aeabi_dsub>
 8007c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	f7f8 ff7c 	bl	8000b28 <__aeabi_dcmpgt>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f040 8296 	bne.w	8008162 <_dtoa_r+0x992>
 8007c36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c40:	4639      	mov	r1, r7
 8007c42:	f7f8 ff53 	bl	8000aec <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f040 8288 	bne.w	800815c <_dtoa_r+0x98c>
 8007c4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f2c0 8158 	blt.w	8007f0c <_dtoa_r+0x73c>
 8007c5c:	f1ba 0f0e 	cmp.w	sl, #14
 8007c60:	f300 8154 	bgt.w	8007f0c <_dtoa_r+0x73c>
 8007c64:	4b6b      	ldr	r3, [pc, #428]	; (8007e14 <_dtoa_r+0x644>)
 8007c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f280 80e3 	bge.w	8007e3c <_dtoa_r+0x66c>
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f300 80df 	bgt.w	8007e3c <_dtoa_r+0x66c>
 8007c7e:	f040 826d 	bne.w	800815c <_dtoa_r+0x98c>
 8007c82:	4b69      	ldr	r3, [pc, #420]	; (8007e28 <_dtoa_r+0x658>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	4640      	mov	r0, r8
 8007c88:	4649      	mov	r1, r9
 8007c8a:	f7f8 fcbd 	bl	8000608 <__aeabi_dmul>
 8007c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c92:	f7f8 ff3f 	bl	8000b14 <__aeabi_dcmpge>
 8007c96:	9e01      	ldr	r6, [sp, #4]
 8007c98:	4637      	mov	r7, r6
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	f040 8243 	bne.w	8008126 <_dtoa_r+0x956>
 8007ca0:	9d00      	ldr	r5, [sp, #0]
 8007ca2:	2331      	movs	r3, #49	; 0x31
 8007ca4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ca8:	f10a 0a01 	add.w	sl, sl, #1
 8007cac:	e23f      	b.n	800812e <_dtoa_r+0x95e>
 8007cae:	07f2      	lsls	r2, r6, #31
 8007cb0:	d505      	bpl.n	8007cbe <_dtoa_r+0x4ee>
 8007cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb6:	f7f8 fca7 	bl	8000608 <__aeabi_dmul>
 8007cba:	3501      	adds	r5, #1
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	1076      	asrs	r6, r6, #1
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	e76c      	b.n	8007b9e <_dtoa_r+0x3ce>
 8007cc4:	2502      	movs	r5, #2
 8007cc6:	e76f      	b.n	8007ba8 <_dtoa_r+0x3d8>
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	f8cd a01c 	str.w	sl, [sp, #28]
 8007cce:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd0:	e78d      	b.n	8007bee <_dtoa_r+0x41e>
 8007cd2:	9900      	ldr	r1, [sp, #0]
 8007cd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cd8:	4b4e      	ldr	r3, [pc, #312]	; (8007e14 <_dtoa_r+0x644>)
 8007cda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cde:	4401      	add	r1, r0
 8007ce0:	9102      	str	r1, [sp, #8]
 8007ce2:	9908      	ldr	r1, [sp, #32]
 8007ce4:	eeb0 8a47 	vmov.f32	s16, s14
 8007ce8:	eef0 8a67 	vmov.f32	s17, s15
 8007cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d045      	beq.n	8007d84 <_dtoa_r+0x5b4>
 8007cf8:	494c      	ldr	r1, [pc, #304]	; (8007e2c <_dtoa_r+0x65c>)
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f7f8 fdae 	bl	800085c <__aeabi_ddiv>
 8007d00:	ec53 2b18 	vmov	r2, r3, d8
 8007d04:	f7f8 fac8 	bl	8000298 <__aeabi_dsub>
 8007d08:	9d00      	ldr	r5, [sp, #0]
 8007d0a:	ec41 0b18 	vmov	d8, r0, r1
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4630      	mov	r0, r6
 8007d12:	f7f8 ff29 	bl	8000b68 <__aeabi_d2iz>
 8007d16:	900c      	str	r0, [sp, #48]	; 0x30
 8007d18:	f7f8 fc0c 	bl	8000534 <__aeabi_i2d>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fab8 	bl	8000298 <__aeabi_dsub>
 8007d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d2a:	3330      	adds	r3, #48	; 0x30
 8007d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d30:	ec53 2b18 	vmov	r2, r3, d8
 8007d34:	4606      	mov	r6, r0
 8007d36:	460f      	mov	r7, r1
 8007d38:	f7f8 fed8 	bl	8000aec <__aeabi_dcmplt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d165      	bne.n	8007e0c <_dtoa_r+0x63c>
 8007d40:	4632      	mov	r2, r6
 8007d42:	463b      	mov	r3, r7
 8007d44:	4935      	ldr	r1, [pc, #212]	; (8007e1c <_dtoa_r+0x64c>)
 8007d46:	2000      	movs	r0, #0
 8007d48:	f7f8 faa6 	bl	8000298 <__aeabi_dsub>
 8007d4c:	ec53 2b18 	vmov	r2, r3, d8
 8007d50:	f7f8 fecc 	bl	8000aec <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f040 80b9 	bne.w	8007ecc <_dtoa_r+0x6fc>
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	429d      	cmp	r5, r3
 8007d5e:	f43f af75 	beq.w	8007c4c <_dtoa_r+0x47c>
 8007d62:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <_dtoa_r+0x650>)
 8007d64:	ec51 0b18 	vmov	r0, r1, d8
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7f8 fc4d 	bl	8000608 <__aeabi_dmul>
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <_dtoa_r+0x650>)
 8007d70:	ec41 0b18 	vmov	d8, r0, r1
 8007d74:	2200      	movs	r2, #0
 8007d76:	4630      	mov	r0, r6
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fc45 	bl	8000608 <__aeabi_dmul>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	e7c4      	b.n	8007d0e <_dtoa_r+0x53e>
 8007d84:	ec51 0b17 	vmov	r0, r1, d7
 8007d88:	f7f8 fc3e 	bl	8000608 <__aeabi_dmul>
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	9d00      	ldr	r5, [sp, #0]
 8007d90:	930c      	str	r3, [sp, #48]	; 0x30
 8007d92:	ec41 0b18 	vmov	d8, r0, r1
 8007d96:	4639      	mov	r1, r7
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7f8 fee5 	bl	8000b68 <__aeabi_d2iz>
 8007d9e:	9011      	str	r0, [sp, #68]	; 0x44
 8007da0:	f7f8 fbc8 	bl	8000534 <__aeabi_i2d>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa74 	bl	8000298 <__aeabi_dsub>
 8007db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007db2:	3330      	adds	r3, #48	; 0x30
 8007db4:	f805 3b01 	strb.w	r3, [r5], #1
 8007db8:	9b02      	ldr	r3, [sp, #8]
 8007dba:	429d      	cmp	r5, r3
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	d134      	bne.n	8007e30 <_dtoa_r+0x660>
 8007dc6:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <_dtoa_r+0x65c>)
 8007dc8:	ec51 0b18 	vmov	r0, r1, d8
 8007dcc:	f7f8 fa66 	bl	800029c <__adddf3>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fea6 	bl	8000b28 <__aeabi_dcmpgt>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d175      	bne.n	8007ecc <_dtoa_r+0x6fc>
 8007de0:	ec53 2b18 	vmov	r2, r3, d8
 8007de4:	4911      	ldr	r1, [pc, #68]	; (8007e2c <_dtoa_r+0x65c>)
 8007de6:	2000      	movs	r0, #0
 8007de8:	f7f8 fa56 	bl	8000298 <__aeabi_dsub>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4630      	mov	r0, r6
 8007df2:	4639      	mov	r1, r7
 8007df4:	f7f8 fe7a 	bl	8000aec <__aeabi_dcmplt>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f43f af27 	beq.w	8007c4c <_dtoa_r+0x47c>
 8007dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e00:	1e6b      	subs	r3, r5, #1
 8007e02:	930c      	str	r3, [sp, #48]	; 0x30
 8007e04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e08:	2b30      	cmp	r3, #48	; 0x30
 8007e0a:	d0f8      	beq.n	8007dfe <_dtoa_r+0x62e>
 8007e0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e10:	e04a      	b.n	8007ea8 <_dtoa_r+0x6d8>
 8007e12:	bf00      	nop
 8007e14:	08009960 	.word	0x08009960
 8007e18:	08009938 	.word	0x08009938
 8007e1c:	3ff00000 	.word	0x3ff00000
 8007e20:	40240000 	.word	0x40240000
 8007e24:	401c0000 	.word	0x401c0000
 8007e28:	40140000 	.word	0x40140000
 8007e2c:	3fe00000 	.word	0x3fe00000
 8007e30:	4baf      	ldr	r3, [pc, #700]	; (80080f0 <_dtoa_r+0x920>)
 8007e32:	f7f8 fbe9 	bl	8000608 <__aeabi_dmul>
 8007e36:	4606      	mov	r6, r0
 8007e38:	460f      	mov	r7, r1
 8007e3a:	e7ac      	b.n	8007d96 <_dtoa_r+0x5c6>
 8007e3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e40:	9d00      	ldr	r5, [sp, #0]
 8007e42:	4642      	mov	r2, r8
 8007e44:	464b      	mov	r3, r9
 8007e46:	4630      	mov	r0, r6
 8007e48:	4639      	mov	r1, r7
 8007e4a:	f7f8 fd07 	bl	800085c <__aeabi_ddiv>
 8007e4e:	f7f8 fe8b 	bl	8000b68 <__aeabi_d2iz>
 8007e52:	9002      	str	r0, [sp, #8]
 8007e54:	f7f8 fb6e 	bl	8000534 <__aeabi_i2d>
 8007e58:	4642      	mov	r2, r8
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	f7f8 fbd4 	bl	8000608 <__aeabi_dmul>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4630      	mov	r0, r6
 8007e66:	4639      	mov	r1, r7
 8007e68:	f7f8 fa16 	bl	8000298 <__aeabi_dsub>
 8007e6c:	9e02      	ldr	r6, [sp, #8]
 8007e6e:	9f01      	ldr	r7, [sp, #4]
 8007e70:	3630      	adds	r6, #48	; 0x30
 8007e72:	f805 6b01 	strb.w	r6, [r5], #1
 8007e76:	9e00      	ldr	r6, [sp, #0]
 8007e78:	1bae      	subs	r6, r5, r6
 8007e7a:	42b7      	cmp	r7, r6
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	d137      	bne.n	8007ef2 <_dtoa_r+0x722>
 8007e82:	f7f8 fa0b 	bl	800029c <__adddf3>
 8007e86:	4642      	mov	r2, r8
 8007e88:	464b      	mov	r3, r9
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	f7f8 fe4b 	bl	8000b28 <__aeabi_dcmpgt>
 8007e92:	b9c8      	cbnz	r0, 8007ec8 <_dtoa_r+0x6f8>
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	4630      	mov	r0, r6
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	f7f8 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea0:	b110      	cbz	r0, 8007ea8 <_dtoa_r+0x6d8>
 8007ea2:	9b02      	ldr	r3, [sp, #8]
 8007ea4:	07d9      	lsls	r1, r3, #31
 8007ea6:	d40f      	bmi.n	8007ec8 <_dtoa_r+0x6f8>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	4659      	mov	r1, fp
 8007eac:	f000 fad6 	bl	800845c <_Bfree>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	702b      	strb	r3, [r5, #0]
 8007eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eb6:	f10a 0001 	add.w	r0, sl, #1
 8007eba:	6018      	str	r0, [r3, #0]
 8007ebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f43f acd8 	beq.w	8007874 <_dtoa_r+0xa4>
 8007ec4:	601d      	str	r5, [r3, #0]
 8007ec6:	e4d5      	b.n	8007874 <_dtoa_r+0xa4>
 8007ec8:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ecc:	462b      	mov	r3, r5
 8007ece:	461d      	mov	r5, r3
 8007ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ed4:	2a39      	cmp	r2, #57	; 0x39
 8007ed6:	d108      	bne.n	8007eea <_dtoa_r+0x71a>
 8007ed8:	9a00      	ldr	r2, [sp, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d1f7      	bne.n	8007ece <_dtoa_r+0x6fe>
 8007ede:	9a07      	ldr	r2, [sp, #28]
 8007ee0:	9900      	ldr	r1, [sp, #0]
 8007ee2:	3201      	adds	r2, #1
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	2230      	movs	r2, #48	; 0x30
 8007ee8:	700a      	strb	r2, [r1, #0]
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	3201      	adds	r2, #1
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	e78c      	b.n	8007e0c <_dtoa_r+0x63c>
 8007ef2:	4b7f      	ldr	r3, [pc, #508]	; (80080f0 <_dtoa_r+0x920>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f7f8 fb87 	bl	8000608 <__aeabi_dmul>
 8007efa:	2200      	movs	r2, #0
 8007efc:	2300      	movs	r3, #0
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	f7f8 fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d09b      	beq.n	8007e42 <_dtoa_r+0x672>
 8007f0a:	e7cd      	b.n	8007ea8 <_dtoa_r+0x6d8>
 8007f0c:	9a08      	ldr	r2, [sp, #32]
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	f000 80c4 	beq.w	800809c <_dtoa_r+0x8cc>
 8007f14:	9a05      	ldr	r2, [sp, #20]
 8007f16:	2a01      	cmp	r2, #1
 8007f18:	f300 80a8 	bgt.w	800806c <_dtoa_r+0x89c>
 8007f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	f000 80a0 	beq.w	8008064 <_dtoa_r+0x894>
 8007f24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f28:	9e06      	ldr	r6, [sp, #24]
 8007f2a:	4645      	mov	r5, r8
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	2101      	movs	r1, #1
 8007f30:	441a      	add	r2, r3
 8007f32:	4620      	mov	r0, r4
 8007f34:	4498      	add	r8, r3
 8007f36:	9204      	str	r2, [sp, #16]
 8007f38:	f000 fb4c 	bl	80085d4 <__i2b>
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	dd0b      	ble.n	8007f5a <_dtoa_r+0x78a>
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd08      	ble.n	8007f5a <_dtoa_r+0x78a>
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	9a04      	ldr	r2, [sp, #16]
 8007f4c:	bfa8      	it	ge
 8007f4e:	462b      	movge	r3, r5
 8007f50:	eba8 0803 	sub.w	r8, r8, r3
 8007f54:	1aed      	subs	r5, r5, r3
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	9b06      	ldr	r3, [sp, #24]
 8007f5c:	b1fb      	cbz	r3, 8007f9e <_dtoa_r+0x7ce>
 8007f5e:	9b08      	ldr	r3, [sp, #32]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 809f 	beq.w	80080a4 <_dtoa_r+0x8d4>
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	dd11      	ble.n	8007f8e <_dtoa_r+0x7be>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fbec 	bl	800874c <__pow5mult>
 8007f74:	465a      	mov	r2, fp
 8007f76:	4601      	mov	r1, r0
 8007f78:	4607      	mov	r7, r0
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fb40 	bl	8008600 <__multiply>
 8007f80:	4659      	mov	r1, fp
 8007f82:	9007      	str	r0, [sp, #28]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fa69 	bl	800845c <_Bfree>
 8007f8a:	9b07      	ldr	r3, [sp, #28]
 8007f8c:	469b      	mov	fp, r3
 8007f8e:	9b06      	ldr	r3, [sp, #24]
 8007f90:	1b9a      	subs	r2, r3, r6
 8007f92:	d004      	beq.n	8007f9e <_dtoa_r+0x7ce>
 8007f94:	4659      	mov	r1, fp
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 fbd8 	bl	800874c <__pow5mult>
 8007f9c:	4683      	mov	fp, r0
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fb17 	bl	80085d4 <__i2b>
 8007fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	4606      	mov	r6, r0
 8007fac:	dd7c      	ble.n	80080a8 <_dtoa_r+0x8d8>
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4601      	mov	r1, r0
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fbca 	bl	800874c <__pow5mult>
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	dd76      	ble.n	80080ae <_dtoa_r+0x8de>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9306      	str	r3, [sp, #24]
 8007fc4:	6933      	ldr	r3, [r6, #16]
 8007fc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fca:	6918      	ldr	r0, [r3, #16]
 8007fcc:	f000 fab2 	bl	8008534 <__hi0bits>
 8007fd0:	f1c0 0020 	rsb	r0, r0, #32
 8007fd4:	9b04      	ldr	r3, [sp, #16]
 8007fd6:	4418      	add	r0, r3
 8007fd8:	f010 001f 	ands.w	r0, r0, #31
 8007fdc:	f000 8086 	beq.w	80080ec <_dtoa_r+0x91c>
 8007fe0:	f1c0 0320 	rsb	r3, r0, #32
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	dd7f      	ble.n	80080e8 <_dtoa_r+0x918>
 8007fe8:	f1c0 001c 	rsb	r0, r0, #28
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	4403      	add	r3, r0
 8007ff0:	4480      	add	r8, r0
 8007ff2:	4405      	add	r5, r0
 8007ff4:	9304      	str	r3, [sp, #16]
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	dd05      	ble.n	8008008 <_dtoa_r+0x838>
 8007ffc:	4659      	mov	r1, fp
 8007ffe:	4642      	mov	r2, r8
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fbfd 	bl	8008800 <__lshift>
 8008006:	4683      	mov	fp, r0
 8008008:	9b04      	ldr	r3, [sp, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd05      	ble.n	800801a <_dtoa_r+0x84a>
 800800e:	4631      	mov	r1, r6
 8008010:	461a      	mov	r2, r3
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fbf4 	bl	8008800 <__lshift>
 8008018:	4606      	mov	r6, r0
 800801a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d069      	beq.n	80080f4 <_dtoa_r+0x924>
 8008020:	4631      	mov	r1, r6
 8008022:	4658      	mov	r0, fp
 8008024:	f000 fc58 	bl	80088d8 <__mcmp>
 8008028:	2800      	cmp	r0, #0
 800802a:	da63      	bge.n	80080f4 <_dtoa_r+0x924>
 800802c:	2300      	movs	r3, #0
 800802e:	4659      	mov	r1, fp
 8008030:	220a      	movs	r2, #10
 8008032:	4620      	mov	r0, r4
 8008034:	f000 fa34 	bl	80084a0 <__multadd>
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800803e:	4683      	mov	fp, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 818f 	beq.w	8008364 <_dtoa_r+0xb94>
 8008046:	4639      	mov	r1, r7
 8008048:	2300      	movs	r3, #0
 800804a:	220a      	movs	r2, #10
 800804c:	4620      	mov	r0, r4
 800804e:	f000 fa27 	bl	80084a0 <__multadd>
 8008052:	f1b9 0f00 	cmp.w	r9, #0
 8008056:	4607      	mov	r7, r0
 8008058:	f300 808e 	bgt.w	8008178 <_dtoa_r+0x9a8>
 800805c:	9b05      	ldr	r3, [sp, #20]
 800805e:	2b02      	cmp	r3, #2
 8008060:	dc50      	bgt.n	8008104 <_dtoa_r+0x934>
 8008062:	e089      	b.n	8008178 <_dtoa_r+0x9a8>
 8008064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800806a:	e75d      	b.n	8007f28 <_dtoa_r+0x758>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	1e5e      	subs	r6, r3, #1
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	42b3      	cmp	r3, r6
 8008074:	bfbf      	itttt	lt
 8008076:	9b06      	ldrlt	r3, [sp, #24]
 8008078:	9606      	strlt	r6, [sp, #24]
 800807a:	1af2      	sublt	r2, r6, r3
 800807c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800807e:	bfb6      	itet	lt
 8008080:	189b      	addlt	r3, r3, r2
 8008082:	1b9e      	subge	r6, r3, r6
 8008084:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008086:	9b01      	ldr	r3, [sp, #4]
 8008088:	bfb8      	it	lt
 800808a:	2600      	movlt	r6, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	bfb5      	itete	lt
 8008090:	eba8 0503 	sublt.w	r5, r8, r3
 8008094:	9b01      	ldrge	r3, [sp, #4]
 8008096:	2300      	movlt	r3, #0
 8008098:	4645      	movge	r5, r8
 800809a:	e747      	b.n	8007f2c <_dtoa_r+0x75c>
 800809c:	9e06      	ldr	r6, [sp, #24]
 800809e:	9f08      	ldr	r7, [sp, #32]
 80080a0:	4645      	mov	r5, r8
 80080a2:	e74c      	b.n	8007f3e <_dtoa_r+0x76e>
 80080a4:	9a06      	ldr	r2, [sp, #24]
 80080a6:	e775      	b.n	8007f94 <_dtoa_r+0x7c4>
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	dc18      	bgt.n	80080e0 <_dtoa_r+0x910>
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	b9b3      	cbnz	r3, 80080e0 <_dtoa_r+0x910>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b8:	b9a3      	cbnz	r3, 80080e4 <_dtoa_r+0x914>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080c0:	0d1b      	lsrs	r3, r3, #20
 80080c2:	051b      	lsls	r3, r3, #20
 80080c4:	b12b      	cbz	r3, 80080d2 <_dtoa_r+0x902>
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	3301      	adds	r3, #1
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	f108 0801 	add.w	r8, r8, #1
 80080d0:	2301      	movs	r3, #1
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f47f af74 	bne.w	8007fc4 <_dtoa_r+0x7f4>
 80080dc:	2001      	movs	r0, #1
 80080de:	e779      	b.n	8007fd4 <_dtoa_r+0x804>
 80080e0:	2300      	movs	r3, #0
 80080e2:	e7f6      	b.n	80080d2 <_dtoa_r+0x902>
 80080e4:	9b02      	ldr	r3, [sp, #8]
 80080e6:	e7f4      	b.n	80080d2 <_dtoa_r+0x902>
 80080e8:	d085      	beq.n	8007ff6 <_dtoa_r+0x826>
 80080ea:	4618      	mov	r0, r3
 80080ec:	301c      	adds	r0, #28
 80080ee:	e77d      	b.n	8007fec <_dtoa_r+0x81c>
 80080f0:	40240000 	.word	0x40240000
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dc38      	bgt.n	800816c <_dtoa_r+0x99c>
 80080fa:	9b05      	ldr	r3, [sp, #20]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	dd35      	ble.n	800816c <_dtoa_r+0x99c>
 8008100:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008104:	f1b9 0f00 	cmp.w	r9, #0
 8008108:	d10d      	bne.n	8008126 <_dtoa_r+0x956>
 800810a:	4631      	mov	r1, r6
 800810c:	464b      	mov	r3, r9
 800810e:	2205      	movs	r2, #5
 8008110:	4620      	mov	r0, r4
 8008112:	f000 f9c5 	bl	80084a0 <__multadd>
 8008116:	4601      	mov	r1, r0
 8008118:	4606      	mov	r6, r0
 800811a:	4658      	mov	r0, fp
 800811c:	f000 fbdc 	bl	80088d8 <__mcmp>
 8008120:	2800      	cmp	r0, #0
 8008122:	f73f adbd 	bgt.w	8007ca0 <_dtoa_r+0x4d0>
 8008126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008128:	9d00      	ldr	r5, [sp, #0]
 800812a:	ea6f 0a03 	mvn.w	sl, r3
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	4631      	mov	r1, r6
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f991 	bl	800845c <_Bfree>
 800813a:	2f00      	cmp	r7, #0
 800813c:	f43f aeb4 	beq.w	8007ea8 <_dtoa_r+0x6d8>
 8008140:	f1b8 0f00 	cmp.w	r8, #0
 8008144:	d005      	beq.n	8008152 <_dtoa_r+0x982>
 8008146:	45b8      	cmp	r8, r7
 8008148:	d003      	beq.n	8008152 <_dtoa_r+0x982>
 800814a:	4641      	mov	r1, r8
 800814c:	4620      	mov	r0, r4
 800814e:	f000 f985 	bl	800845c <_Bfree>
 8008152:	4639      	mov	r1, r7
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f981 	bl	800845c <_Bfree>
 800815a:	e6a5      	b.n	8007ea8 <_dtoa_r+0x6d8>
 800815c:	2600      	movs	r6, #0
 800815e:	4637      	mov	r7, r6
 8008160:	e7e1      	b.n	8008126 <_dtoa_r+0x956>
 8008162:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008164:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008168:	4637      	mov	r7, r6
 800816a:	e599      	b.n	8007ca0 <_dtoa_r+0x4d0>
 800816c:	9b08      	ldr	r3, [sp, #32]
 800816e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80fd 	beq.w	8008372 <_dtoa_r+0xba2>
 8008178:	2d00      	cmp	r5, #0
 800817a:	dd05      	ble.n	8008188 <_dtoa_r+0x9b8>
 800817c:	4639      	mov	r1, r7
 800817e:	462a      	mov	r2, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fb3d 	bl	8008800 <__lshift>
 8008186:	4607      	mov	r7, r0
 8008188:	9b06      	ldr	r3, [sp, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d05c      	beq.n	8008248 <_dtoa_r+0xa78>
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f923 	bl	80083dc <_Balloc>
 8008196:	4605      	mov	r5, r0
 8008198:	b928      	cbnz	r0, 80081a6 <_dtoa_r+0x9d6>
 800819a:	4b80      	ldr	r3, [pc, #512]	; (800839c <_dtoa_r+0xbcc>)
 800819c:	4602      	mov	r2, r0
 800819e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081a2:	f7ff bb2e 	b.w	8007802 <_dtoa_r+0x32>
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	3202      	adds	r2, #2
 80081aa:	0092      	lsls	r2, r2, #2
 80081ac:	f107 010c 	add.w	r1, r7, #12
 80081b0:	300c      	adds	r0, #12
 80081b2:	f000 f905 	bl	80083c0 <memcpy>
 80081b6:	2201      	movs	r2, #1
 80081b8:	4629      	mov	r1, r5
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fb20 	bl	8008800 <__lshift>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	9b00      	ldr	r3, [sp, #0]
 80081c8:	444b      	add	r3, r9
 80081ca:	9307      	str	r3, [sp, #28]
 80081cc:	9b02      	ldr	r3, [sp, #8]
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	46b8      	mov	r8, r7
 80081d4:	9306      	str	r3, [sp, #24]
 80081d6:	4607      	mov	r7, r0
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	4631      	mov	r1, r6
 80081dc:	3b01      	subs	r3, #1
 80081de:	4658      	mov	r0, fp
 80081e0:	9302      	str	r3, [sp, #8]
 80081e2:	f7ff fa69 	bl	80076b8 <quorem>
 80081e6:	4603      	mov	r3, r0
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	9004      	str	r0, [sp, #16]
 80081ec:	4641      	mov	r1, r8
 80081ee:	4658      	mov	r0, fp
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	f000 fb71 	bl	80088d8 <__mcmp>
 80081f6:	463a      	mov	r2, r7
 80081f8:	4681      	mov	r9, r0
 80081fa:	4631      	mov	r1, r6
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fb87 	bl	8008910 <__mdiff>
 8008202:	68c2      	ldr	r2, [r0, #12]
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	4605      	mov	r5, r0
 8008208:	bb02      	cbnz	r2, 800824c <_dtoa_r+0xa7c>
 800820a:	4601      	mov	r1, r0
 800820c:	4658      	mov	r0, fp
 800820e:	f000 fb63 	bl	80088d8 <__mcmp>
 8008212:	9b08      	ldr	r3, [sp, #32]
 8008214:	4602      	mov	r2, r0
 8008216:	4629      	mov	r1, r5
 8008218:	4620      	mov	r0, r4
 800821a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800821e:	f000 f91d 	bl	800845c <_Bfree>
 8008222:	9b05      	ldr	r3, [sp, #20]
 8008224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008226:	9d01      	ldr	r5, [sp, #4]
 8008228:	ea43 0102 	orr.w	r1, r3, r2
 800822c:	9b06      	ldr	r3, [sp, #24]
 800822e:	430b      	orrs	r3, r1
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	d10d      	bne.n	8008250 <_dtoa_r+0xa80>
 8008234:	2b39      	cmp	r3, #57	; 0x39
 8008236:	d029      	beq.n	800828c <_dtoa_r+0xabc>
 8008238:	f1b9 0f00 	cmp.w	r9, #0
 800823c:	dd01      	ble.n	8008242 <_dtoa_r+0xa72>
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	3331      	adds	r3, #49	; 0x31
 8008242:	9a02      	ldr	r2, [sp, #8]
 8008244:	7013      	strb	r3, [r2, #0]
 8008246:	e774      	b.n	8008132 <_dtoa_r+0x962>
 8008248:	4638      	mov	r0, r7
 800824a:	e7b9      	b.n	80081c0 <_dtoa_r+0x9f0>
 800824c:	2201      	movs	r2, #1
 800824e:	e7e2      	b.n	8008216 <_dtoa_r+0xa46>
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	db06      	blt.n	8008264 <_dtoa_r+0xa94>
 8008256:	9905      	ldr	r1, [sp, #20]
 8008258:	ea41 0909 	orr.w	r9, r1, r9
 800825c:	9906      	ldr	r1, [sp, #24]
 800825e:	ea59 0101 	orrs.w	r1, r9, r1
 8008262:	d120      	bne.n	80082a6 <_dtoa_r+0xad6>
 8008264:	2a00      	cmp	r2, #0
 8008266:	ddec      	ble.n	8008242 <_dtoa_r+0xa72>
 8008268:	4659      	mov	r1, fp
 800826a:	2201      	movs	r2, #1
 800826c:	4620      	mov	r0, r4
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f000 fac6 	bl	8008800 <__lshift>
 8008274:	4631      	mov	r1, r6
 8008276:	4683      	mov	fp, r0
 8008278:	f000 fb2e 	bl	80088d8 <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	dc02      	bgt.n	8008288 <_dtoa_r+0xab8>
 8008282:	d1de      	bne.n	8008242 <_dtoa_r+0xa72>
 8008284:	07da      	lsls	r2, r3, #31
 8008286:	d5dc      	bpl.n	8008242 <_dtoa_r+0xa72>
 8008288:	2b39      	cmp	r3, #57	; 0x39
 800828a:	d1d8      	bne.n	800823e <_dtoa_r+0xa6e>
 800828c:	9a02      	ldr	r2, [sp, #8]
 800828e:	2339      	movs	r3, #57	; 0x39
 8008290:	7013      	strb	r3, [r2, #0]
 8008292:	462b      	mov	r3, r5
 8008294:	461d      	mov	r5, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800829c:	2a39      	cmp	r2, #57	; 0x39
 800829e:	d050      	beq.n	8008342 <_dtoa_r+0xb72>
 80082a0:	3201      	adds	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e745      	b.n	8008132 <_dtoa_r+0x962>
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	dd03      	ble.n	80082b2 <_dtoa_r+0xae2>
 80082aa:	2b39      	cmp	r3, #57	; 0x39
 80082ac:	d0ee      	beq.n	800828c <_dtoa_r+0xabc>
 80082ae:	3301      	adds	r3, #1
 80082b0:	e7c7      	b.n	8008242 <_dtoa_r+0xa72>
 80082b2:	9a01      	ldr	r2, [sp, #4]
 80082b4:	9907      	ldr	r1, [sp, #28]
 80082b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082ba:	428a      	cmp	r2, r1
 80082bc:	d02a      	beq.n	8008314 <_dtoa_r+0xb44>
 80082be:	4659      	mov	r1, fp
 80082c0:	2300      	movs	r3, #0
 80082c2:	220a      	movs	r2, #10
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 f8eb 	bl	80084a0 <__multadd>
 80082ca:	45b8      	cmp	r8, r7
 80082cc:	4683      	mov	fp, r0
 80082ce:	f04f 0300 	mov.w	r3, #0
 80082d2:	f04f 020a 	mov.w	r2, #10
 80082d6:	4641      	mov	r1, r8
 80082d8:	4620      	mov	r0, r4
 80082da:	d107      	bne.n	80082ec <_dtoa_r+0xb1c>
 80082dc:	f000 f8e0 	bl	80084a0 <__multadd>
 80082e0:	4680      	mov	r8, r0
 80082e2:	4607      	mov	r7, r0
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	3301      	adds	r3, #1
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	e775      	b.n	80081d8 <_dtoa_r+0xa08>
 80082ec:	f000 f8d8 	bl	80084a0 <__multadd>
 80082f0:	4639      	mov	r1, r7
 80082f2:	4680      	mov	r8, r0
 80082f4:	2300      	movs	r3, #0
 80082f6:	220a      	movs	r2, #10
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 f8d1 	bl	80084a0 <__multadd>
 80082fe:	4607      	mov	r7, r0
 8008300:	e7f0      	b.n	80082e4 <_dtoa_r+0xb14>
 8008302:	f1b9 0f00 	cmp.w	r9, #0
 8008306:	9a00      	ldr	r2, [sp, #0]
 8008308:	bfcc      	ite	gt
 800830a:	464d      	movgt	r5, r9
 800830c:	2501      	movle	r5, #1
 800830e:	4415      	add	r5, r2
 8008310:	f04f 0800 	mov.w	r8, #0
 8008314:	4659      	mov	r1, fp
 8008316:	2201      	movs	r2, #1
 8008318:	4620      	mov	r0, r4
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	f000 fa70 	bl	8008800 <__lshift>
 8008320:	4631      	mov	r1, r6
 8008322:	4683      	mov	fp, r0
 8008324:	f000 fad8 	bl	80088d8 <__mcmp>
 8008328:	2800      	cmp	r0, #0
 800832a:	dcb2      	bgt.n	8008292 <_dtoa_r+0xac2>
 800832c:	d102      	bne.n	8008334 <_dtoa_r+0xb64>
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	07db      	lsls	r3, r3, #31
 8008332:	d4ae      	bmi.n	8008292 <_dtoa_r+0xac2>
 8008334:	462b      	mov	r3, r5
 8008336:	461d      	mov	r5, r3
 8008338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800833c:	2a30      	cmp	r2, #48	; 0x30
 800833e:	d0fa      	beq.n	8008336 <_dtoa_r+0xb66>
 8008340:	e6f7      	b.n	8008132 <_dtoa_r+0x962>
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d1a5      	bne.n	8008294 <_dtoa_r+0xac4>
 8008348:	f10a 0a01 	add.w	sl, sl, #1
 800834c:	2331      	movs	r3, #49	; 0x31
 800834e:	e779      	b.n	8008244 <_dtoa_r+0xa74>
 8008350:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <_dtoa_r+0xbd0>)
 8008352:	f7ff baaf 	b.w	80078b4 <_dtoa_r+0xe4>
 8008356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008358:	2b00      	cmp	r3, #0
 800835a:	f47f aa86 	bne.w	800786a <_dtoa_r+0x9a>
 800835e:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <_dtoa_r+0xbd4>)
 8008360:	f7ff baa8 	b.w	80078b4 <_dtoa_r+0xe4>
 8008364:	f1b9 0f00 	cmp.w	r9, #0
 8008368:	dc03      	bgt.n	8008372 <_dtoa_r+0xba2>
 800836a:	9b05      	ldr	r3, [sp, #20]
 800836c:	2b02      	cmp	r3, #2
 800836e:	f73f aec9 	bgt.w	8008104 <_dtoa_r+0x934>
 8008372:	9d00      	ldr	r5, [sp, #0]
 8008374:	4631      	mov	r1, r6
 8008376:	4658      	mov	r0, fp
 8008378:	f7ff f99e 	bl	80076b8 <quorem>
 800837c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008380:	f805 3b01 	strb.w	r3, [r5], #1
 8008384:	9a00      	ldr	r2, [sp, #0]
 8008386:	1aaa      	subs	r2, r5, r2
 8008388:	4591      	cmp	r9, r2
 800838a:	ddba      	ble.n	8008302 <_dtoa_r+0xb32>
 800838c:	4659      	mov	r1, fp
 800838e:	2300      	movs	r3, #0
 8008390:	220a      	movs	r2, #10
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f884 	bl	80084a0 <__multadd>
 8008398:	4683      	mov	fp, r0
 800839a:	e7eb      	b.n	8008374 <_dtoa_r+0xba4>
 800839c:	080098c3 	.word	0x080098c3
 80083a0:	0800981c 	.word	0x0800981c
 80083a4:	08009840 	.word	0x08009840

080083a8 <_localeconv_r>:
 80083a8:	4800      	ldr	r0, [pc, #0]	; (80083ac <_localeconv_r+0x4>)
 80083aa:	4770      	bx	lr
 80083ac:	200002dc 	.word	0x200002dc

080083b0 <malloc>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <malloc+0xc>)
 80083b2:	4601      	mov	r1, r0
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f000 bbef 	b.w	8008b98 <_malloc_r>
 80083ba:	bf00      	nop
 80083bc:	20000188 	.word	0x20000188

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <_Balloc>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083e0:	4604      	mov	r4, r0
 80083e2:	460d      	mov	r5, r1
 80083e4:	b976      	cbnz	r6, 8008404 <_Balloc+0x28>
 80083e6:	2010      	movs	r0, #16
 80083e8:	f7ff ffe2 	bl	80083b0 <malloc>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6260      	str	r0, [r4, #36]	; 0x24
 80083f0:	b920      	cbnz	r0, 80083fc <_Balloc+0x20>
 80083f2:	4b18      	ldr	r3, [pc, #96]	; (8008454 <_Balloc+0x78>)
 80083f4:	4818      	ldr	r0, [pc, #96]	; (8008458 <_Balloc+0x7c>)
 80083f6:	2166      	movs	r1, #102	; 0x66
 80083f8:	f000 fc38 	bl	8008c6c <__assert_func>
 80083fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008400:	6006      	str	r6, [r0, #0]
 8008402:	60c6      	str	r6, [r0, #12]
 8008404:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008406:	68f3      	ldr	r3, [r6, #12]
 8008408:	b183      	cbz	r3, 800842c <_Balloc+0x50>
 800840a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008412:	b9b8      	cbnz	r0, 8008444 <_Balloc+0x68>
 8008414:	2101      	movs	r1, #1
 8008416:	fa01 f605 	lsl.w	r6, r1, r5
 800841a:	1d72      	adds	r2, r6, #5
 800841c:	0092      	lsls	r2, r2, #2
 800841e:	4620      	mov	r0, r4
 8008420:	f000 fb5a 	bl	8008ad8 <_calloc_r>
 8008424:	b160      	cbz	r0, 8008440 <_Balloc+0x64>
 8008426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800842a:	e00e      	b.n	800844a <_Balloc+0x6e>
 800842c:	2221      	movs	r2, #33	; 0x21
 800842e:	2104      	movs	r1, #4
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fb51 	bl	8008ad8 <_calloc_r>
 8008436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008438:	60f0      	str	r0, [r6, #12]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e4      	bne.n	800840a <_Balloc+0x2e>
 8008440:	2000      	movs	r0, #0
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	6802      	ldr	r2, [r0, #0]
 8008446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800844a:	2300      	movs	r3, #0
 800844c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008450:	e7f7      	b.n	8008442 <_Balloc+0x66>
 8008452:	bf00      	nop
 8008454:	0800984d 	.word	0x0800984d
 8008458:	080098d4 	.word	0x080098d4

0800845c <_Bfree>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008460:	4605      	mov	r5, r0
 8008462:	460c      	mov	r4, r1
 8008464:	b976      	cbnz	r6, 8008484 <_Bfree+0x28>
 8008466:	2010      	movs	r0, #16
 8008468:	f7ff ffa2 	bl	80083b0 <malloc>
 800846c:	4602      	mov	r2, r0
 800846e:	6268      	str	r0, [r5, #36]	; 0x24
 8008470:	b920      	cbnz	r0, 800847c <_Bfree+0x20>
 8008472:	4b09      	ldr	r3, [pc, #36]	; (8008498 <_Bfree+0x3c>)
 8008474:	4809      	ldr	r0, [pc, #36]	; (800849c <_Bfree+0x40>)
 8008476:	218a      	movs	r1, #138	; 0x8a
 8008478:	f000 fbf8 	bl	8008c6c <__assert_func>
 800847c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008480:	6006      	str	r6, [r0, #0]
 8008482:	60c6      	str	r6, [r0, #12]
 8008484:	b13c      	cbz	r4, 8008496 <_Bfree+0x3a>
 8008486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008488:	6862      	ldr	r2, [r4, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008490:	6021      	str	r1, [r4, #0]
 8008492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	0800984d 	.word	0x0800984d
 800849c:	080098d4 	.word	0x080098d4

080084a0 <__multadd>:
 80084a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a4:	690e      	ldr	r6, [r1, #16]
 80084a6:	4607      	mov	r7, r0
 80084a8:	4698      	mov	r8, r3
 80084aa:	460c      	mov	r4, r1
 80084ac:	f101 0014 	add.w	r0, r1, #20
 80084b0:	2300      	movs	r3, #0
 80084b2:	6805      	ldr	r5, [r0, #0]
 80084b4:	b2a9      	uxth	r1, r5
 80084b6:	fb02 8101 	mla	r1, r2, r1, r8
 80084ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80084be:	0c2d      	lsrs	r5, r5, #16
 80084c0:	fb02 c505 	mla	r5, r2, r5, ip
 80084c4:	b289      	uxth	r1, r1
 80084c6:	3301      	adds	r3, #1
 80084c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80084cc:	429e      	cmp	r6, r3
 80084ce:	f840 1b04 	str.w	r1, [r0], #4
 80084d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80084d6:	dcec      	bgt.n	80084b2 <__multadd+0x12>
 80084d8:	f1b8 0f00 	cmp.w	r8, #0
 80084dc:	d022      	beq.n	8008524 <__multadd+0x84>
 80084de:	68a3      	ldr	r3, [r4, #8]
 80084e0:	42b3      	cmp	r3, r6
 80084e2:	dc19      	bgt.n	8008518 <__multadd+0x78>
 80084e4:	6861      	ldr	r1, [r4, #4]
 80084e6:	4638      	mov	r0, r7
 80084e8:	3101      	adds	r1, #1
 80084ea:	f7ff ff77 	bl	80083dc <_Balloc>
 80084ee:	4605      	mov	r5, r0
 80084f0:	b928      	cbnz	r0, 80084fe <__multadd+0x5e>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <__multadd+0x8c>)
 80084f6:	480e      	ldr	r0, [pc, #56]	; (8008530 <__multadd+0x90>)
 80084f8:	21b5      	movs	r1, #181	; 0xb5
 80084fa:	f000 fbb7 	bl	8008c6c <__assert_func>
 80084fe:	6922      	ldr	r2, [r4, #16]
 8008500:	3202      	adds	r2, #2
 8008502:	f104 010c 	add.w	r1, r4, #12
 8008506:	0092      	lsls	r2, r2, #2
 8008508:	300c      	adds	r0, #12
 800850a:	f7ff ff59 	bl	80083c0 <memcpy>
 800850e:	4621      	mov	r1, r4
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff ffa3 	bl	800845c <_Bfree>
 8008516:	462c      	mov	r4, r5
 8008518:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800851c:	3601      	adds	r6, #1
 800851e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008522:	6126      	str	r6, [r4, #16]
 8008524:	4620      	mov	r0, r4
 8008526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852a:	bf00      	nop
 800852c:	080098c3 	.word	0x080098c3
 8008530:	080098d4 	.word	0x080098d4

08008534 <__hi0bits>:
 8008534:	0c03      	lsrs	r3, r0, #16
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	b9d3      	cbnz	r3, 8008570 <__hi0bits+0x3c>
 800853a:	0400      	lsls	r0, r0, #16
 800853c:	2310      	movs	r3, #16
 800853e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008542:	bf04      	itt	eq
 8008544:	0200      	lsleq	r0, r0, #8
 8008546:	3308      	addeq	r3, #8
 8008548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800854c:	bf04      	itt	eq
 800854e:	0100      	lsleq	r0, r0, #4
 8008550:	3304      	addeq	r3, #4
 8008552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008556:	bf04      	itt	eq
 8008558:	0080      	lsleq	r0, r0, #2
 800855a:	3302      	addeq	r3, #2
 800855c:	2800      	cmp	r0, #0
 800855e:	db05      	blt.n	800856c <__hi0bits+0x38>
 8008560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008564:	f103 0301 	add.w	r3, r3, #1
 8008568:	bf08      	it	eq
 800856a:	2320      	moveq	r3, #32
 800856c:	4618      	mov	r0, r3
 800856e:	4770      	bx	lr
 8008570:	2300      	movs	r3, #0
 8008572:	e7e4      	b.n	800853e <__hi0bits+0xa>

08008574 <__lo0bits>:
 8008574:	6803      	ldr	r3, [r0, #0]
 8008576:	f013 0207 	ands.w	r2, r3, #7
 800857a:	4601      	mov	r1, r0
 800857c:	d00b      	beq.n	8008596 <__lo0bits+0x22>
 800857e:	07da      	lsls	r2, r3, #31
 8008580:	d424      	bmi.n	80085cc <__lo0bits+0x58>
 8008582:	0798      	lsls	r0, r3, #30
 8008584:	bf49      	itett	mi
 8008586:	085b      	lsrmi	r3, r3, #1
 8008588:	089b      	lsrpl	r3, r3, #2
 800858a:	2001      	movmi	r0, #1
 800858c:	600b      	strmi	r3, [r1, #0]
 800858e:	bf5c      	itt	pl
 8008590:	600b      	strpl	r3, [r1, #0]
 8008592:	2002      	movpl	r0, #2
 8008594:	4770      	bx	lr
 8008596:	b298      	uxth	r0, r3
 8008598:	b9b0      	cbnz	r0, 80085c8 <__lo0bits+0x54>
 800859a:	0c1b      	lsrs	r3, r3, #16
 800859c:	2010      	movs	r0, #16
 800859e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085a2:	bf04      	itt	eq
 80085a4:	0a1b      	lsreq	r3, r3, #8
 80085a6:	3008      	addeq	r0, #8
 80085a8:	071a      	lsls	r2, r3, #28
 80085aa:	bf04      	itt	eq
 80085ac:	091b      	lsreq	r3, r3, #4
 80085ae:	3004      	addeq	r0, #4
 80085b0:	079a      	lsls	r2, r3, #30
 80085b2:	bf04      	itt	eq
 80085b4:	089b      	lsreq	r3, r3, #2
 80085b6:	3002      	addeq	r0, #2
 80085b8:	07da      	lsls	r2, r3, #31
 80085ba:	d403      	bmi.n	80085c4 <__lo0bits+0x50>
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	f100 0001 	add.w	r0, r0, #1
 80085c2:	d005      	beq.n	80085d0 <__lo0bits+0x5c>
 80085c4:	600b      	str	r3, [r1, #0]
 80085c6:	4770      	bx	lr
 80085c8:	4610      	mov	r0, r2
 80085ca:	e7e8      	b.n	800859e <__lo0bits+0x2a>
 80085cc:	2000      	movs	r0, #0
 80085ce:	4770      	bx	lr
 80085d0:	2020      	movs	r0, #32
 80085d2:	4770      	bx	lr

080085d4 <__i2b>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	460c      	mov	r4, r1
 80085d8:	2101      	movs	r1, #1
 80085da:	f7ff feff 	bl	80083dc <_Balloc>
 80085de:	4602      	mov	r2, r0
 80085e0:	b928      	cbnz	r0, 80085ee <__i2b+0x1a>
 80085e2:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <__i2b+0x24>)
 80085e4:	4805      	ldr	r0, [pc, #20]	; (80085fc <__i2b+0x28>)
 80085e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085ea:	f000 fb3f 	bl	8008c6c <__assert_func>
 80085ee:	2301      	movs	r3, #1
 80085f0:	6144      	str	r4, [r0, #20]
 80085f2:	6103      	str	r3, [r0, #16]
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	bf00      	nop
 80085f8:	080098c3 	.word	0x080098c3
 80085fc:	080098d4 	.word	0x080098d4

08008600 <__multiply>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	4614      	mov	r4, r2
 8008606:	690a      	ldr	r2, [r1, #16]
 8008608:	6923      	ldr	r3, [r4, #16]
 800860a:	429a      	cmp	r2, r3
 800860c:	bfb8      	it	lt
 800860e:	460b      	movlt	r3, r1
 8008610:	460d      	mov	r5, r1
 8008612:	bfbc      	itt	lt
 8008614:	4625      	movlt	r5, r4
 8008616:	461c      	movlt	r4, r3
 8008618:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800861c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008620:	68ab      	ldr	r3, [r5, #8]
 8008622:	6869      	ldr	r1, [r5, #4]
 8008624:	eb0a 0709 	add.w	r7, sl, r9
 8008628:	42bb      	cmp	r3, r7
 800862a:	b085      	sub	sp, #20
 800862c:	bfb8      	it	lt
 800862e:	3101      	addlt	r1, #1
 8008630:	f7ff fed4 	bl	80083dc <_Balloc>
 8008634:	b930      	cbnz	r0, 8008644 <__multiply+0x44>
 8008636:	4602      	mov	r2, r0
 8008638:	4b42      	ldr	r3, [pc, #264]	; (8008744 <__multiply+0x144>)
 800863a:	4843      	ldr	r0, [pc, #268]	; (8008748 <__multiply+0x148>)
 800863c:	f240 115d 	movw	r1, #349	; 0x15d
 8008640:	f000 fb14 	bl	8008c6c <__assert_func>
 8008644:	f100 0614 	add.w	r6, r0, #20
 8008648:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800864c:	4633      	mov	r3, r6
 800864e:	2200      	movs	r2, #0
 8008650:	4543      	cmp	r3, r8
 8008652:	d31e      	bcc.n	8008692 <__multiply+0x92>
 8008654:	f105 0c14 	add.w	ip, r5, #20
 8008658:	f104 0314 	add.w	r3, r4, #20
 800865c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008660:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008664:	9202      	str	r2, [sp, #8]
 8008666:	ebac 0205 	sub.w	r2, ip, r5
 800866a:	3a15      	subs	r2, #21
 800866c:	f022 0203 	bic.w	r2, r2, #3
 8008670:	3204      	adds	r2, #4
 8008672:	f105 0115 	add.w	r1, r5, #21
 8008676:	458c      	cmp	ip, r1
 8008678:	bf38      	it	cc
 800867a:	2204      	movcc	r2, #4
 800867c:	9201      	str	r2, [sp, #4]
 800867e:	9a02      	ldr	r2, [sp, #8]
 8008680:	9303      	str	r3, [sp, #12]
 8008682:	429a      	cmp	r2, r3
 8008684:	d808      	bhi.n	8008698 <__multiply+0x98>
 8008686:	2f00      	cmp	r7, #0
 8008688:	dc55      	bgt.n	8008736 <__multiply+0x136>
 800868a:	6107      	str	r7, [r0, #16]
 800868c:	b005      	add	sp, #20
 800868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008692:	f843 2b04 	str.w	r2, [r3], #4
 8008696:	e7db      	b.n	8008650 <__multiply+0x50>
 8008698:	f8b3 a000 	ldrh.w	sl, [r3]
 800869c:	f1ba 0f00 	cmp.w	sl, #0
 80086a0:	d020      	beq.n	80086e4 <__multiply+0xe4>
 80086a2:	f105 0e14 	add.w	lr, r5, #20
 80086a6:	46b1      	mov	r9, r6
 80086a8:	2200      	movs	r2, #0
 80086aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80086ae:	f8d9 b000 	ldr.w	fp, [r9]
 80086b2:	b2a1      	uxth	r1, r4
 80086b4:	fa1f fb8b 	uxth.w	fp, fp
 80086b8:	fb0a b101 	mla	r1, sl, r1, fp
 80086bc:	4411      	add	r1, r2
 80086be:	f8d9 2000 	ldr.w	r2, [r9]
 80086c2:	0c24      	lsrs	r4, r4, #16
 80086c4:	0c12      	lsrs	r2, r2, #16
 80086c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80086ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80086ce:	b289      	uxth	r1, r1
 80086d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80086d4:	45f4      	cmp	ip, lr
 80086d6:	f849 1b04 	str.w	r1, [r9], #4
 80086da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80086de:	d8e4      	bhi.n	80086aa <__multiply+0xaa>
 80086e0:	9901      	ldr	r1, [sp, #4]
 80086e2:	5072      	str	r2, [r6, r1]
 80086e4:	9a03      	ldr	r2, [sp, #12]
 80086e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086ea:	3304      	adds	r3, #4
 80086ec:	f1b9 0f00 	cmp.w	r9, #0
 80086f0:	d01f      	beq.n	8008732 <__multiply+0x132>
 80086f2:	6834      	ldr	r4, [r6, #0]
 80086f4:	f105 0114 	add.w	r1, r5, #20
 80086f8:	46b6      	mov	lr, r6
 80086fa:	f04f 0a00 	mov.w	sl, #0
 80086fe:	880a      	ldrh	r2, [r1, #0]
 8008700:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008704:	fb09 b202 	mla	r2, r9, r2, fp
 8008708:	4492      	add	sl, r2
 800870a:	b2a4      	uxth	r4, r4
 800870c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008710:	f84e 4b04 	str.w	r4, [lr], #4
 8008714:	f851 4b04 	ldr.w	r4, [r1], #4
 8008718:	f8be 2000 	ldrh.w	r2, [lr]
 800871c:	0c24      	lsrs	r4, r4, #16
 800871e:	fb09 2404 	mla	r4, r9, r4, r2
 8008722:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008726:	458c      	cmp	ip, r1
 8008728:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800872c:	d8e7      	bhi.n	80086fe <__multiply+0xfe>
 800872e:	9a01      	ldr	r2, [sp, #4]
 8008730:	50b4      	str	r4, [r6, r2]
 8008732:	3604      	adds	r6, #4
 8008734:	e7a3      	b.n	800867e <__multiply+0x7e>
 8008736:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1a5      	bne.n	800868a <__multiply+0x8a>
 800873e:	3f01      	subs	r7, #1
 8008740:	e7a1      	b.n	8008686 <__multiply+0x86>
 8008742:	bf00      	nop
 8008744:	080098c3 	.word	0x080098c3
 8008748:	080098d4 	.word	0x080098d4

0800874c <__pow5mult>:
 800874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008750:	4615      	mov	r5, r2
 8008752:	f012 0203 	ands.w	r2, r2, #3
 8008756:	4606      	mov	r6, r0
 8008758:	460f      	mov	r7, r1
 800875a:	d007      	beq.n	800876c <__pow5mult+0x20>
 800875c:	4c25      	ldr	r4, [pc, #148]	; (80087f4 <__pow5mult+0xa8>)
 800875e:	3a01      	subs	r2, #1
 8008760:	2300      	movs	r3, #0
 8008762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008766:	f7ff fe9b 	bl	80084a0 <__multadd>
 800876a:	4607      	mov	r7, r0
 800876c:	10ad      	asrs	r5, r5, #2
 800876e:	d03d      	beq.n	80087ec <__pow5mult+0xa0>
 8008770:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008772:	b97c      	cbnz	r4, 8008794 <__pow5mult+0x48>
 8008774:	2010      	movs	r0, #16
 8008776:	f7ff fe1b 	bl	80083b0 <malloc>
 800877a:	4602      	mov	r2, r0
 800877c:	6270      	str	r0, [r6, #36]	; 0x24
 800877e:	b928      	cbnz	r0, 800878c <__pow5mult+0x40>
 8008780:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <__pow5mult+0xac>)
 8008782:	481e      	ldr	r0, [pc, #120]	; (80087fc <__pow5mult+0xb0>)
 8008784:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008788:	f000 fa70 	bl	8008c6c <__assert_func>
 800878c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008790:	6004      	str	r4, [r0, #0]
 8008792:	60c4      	str	r4, [r0, #12]
 8008794:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800879c:	b94c      	cbnz	r4, 80087b2 <__pow5mult+0x66>
 800879e:	f240 2171 	movw	r1, #625	; 0x271
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7ff ff16 	bl	80085d4 <__i2b>
 80087a8:	2300      	movs	r3, #0
 80087aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80087ae:	4604      	mov	r4, r0
 80087b0:	6003      	str	r3, [r0, #0]
 80087b2:	f04f 0900 	mov.w	r9, #0
 80087b6:	07eb      	lsls	r3, r5, #31
 80087b8:	d50a      	bpl.n	80087d0 <__pow5mult+0x84>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4622      	mov	r2, r4
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ff1e 	bl	8008600 <__multiply>
 80087c4:	4639      	mov	r1, r7
 80087c6:	4680      	mov	r8, r0
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff fe47 	bl	800845c <_Bfree>
 80087ce:	4647      	mov	r7, r8
 80087d0:	106d      	asrs	r5, r5, #1
 80087d2:	d00b      	beq.n	80087ec <__pow5mult+0xa0>
 80087d4:	6820      	ldr	r0, [r4, #0]
 80087d6:	b938      	cbnz	r0, 80087e8 <__pow5mult+0x9c>
 80087d8:	4622      	mov	r2, r4
 80087da:	4621      	mov	r1, r4
 80087dc:	4630      	mov	r0, r6
 80087de:	f7ff ff0f 	bl	8008600 <__multiply>
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	f8c0 9000 	str.w	r9, [r0]
 80087e8:	4604      	mov	r4, r0
 80087ea:	e7e4      	b.n	80087b6 <__pow5mult+0x6a>
 80087ec:	4638      	mov	r0, r7
 80087ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f2:	bf00      	nop
 80087f4:	08009a28 	.word	0x08009a28
 80087f8:	0800984d 	.word	0x0800984d
 80087fc:	080098d4 	.word	0x080098d4

08008800 <__lshift>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	460c      	mov	r4, r1
 8008806:	6849      	ldr	r1, [r1, #4]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	4607      	mov	r7, r0
 8008812:	4691      	mov	r9, r2
 8008814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008818:	f108 0601 	add.w	r6, r8, #1
 800881c:	42b3      	cmp	r3, r6
 800881e:	db0b      	blt.n	8008838 <__lshift+0x38>
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff fddb 	bl	80083dc <_Balloc>
 8008826:	4605      	mov	r5, r0
 8008828:	b948      	cbnz	r0, 800883e <__lshift+0x3e>
 800882a:	4602      	mov	r2, r0
 800882c:	4b28      	ldr	r3, [pc, #160]	; (80088d0 <__lshift+0xd0>)
 800882e:	4829      	ldr	r0, [pc, #164]	; (80088d4 <__lshift+0xd4>)
 8008830:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008834:	f000 fa1a 	bl	8008c6c <__assert_func>
 8008838:	3101      	adds	r1, #1
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	e7ee      	b.n	800881c <__lshift+0x1c>
 800883e:	2300      	movs	r3, #0
 8008840:	f100 0114 	add.w	r1, r0, #20
 8008844:	f100 0210 	add.w	r2, r0, #16
 8008848:	4618      	mov	r0, r3
 800884a:	4553      	cmp	r3, sl
 800884c:	db33      	blt.n	80088b6 <__lshift+0xb6>
 800884e:	6920      	ldr	r0, [r4, #16]
 8008850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008854:	f104 0314 	add.w	r3, r4, #20
 8008858:	f019 091f 	ands.w	r9, r9, #31
 800885c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008864:	d02b      	beq.n	80088be <__lshift+0xbe>
 8008866:	f1c9 0e20 	rsb	lr, r9, #32
 800886a:	468a      	mov	sl, r1
 800886c:	2200      	movs	r2, #0
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	fa00 f009 	lsl.w	r0, r0, r9
 8008874:	4302      	orrs	r2, r0
 8008876:	f84a 2b04 	str.w	r2, [sl], #4
 800887a:	f853 2b04 	ldr.w	r2, [r3], #4
 800887e:	459c      	cmp	ip, r3
 8008880:	fa22 f20e 	lsr.w	r2, r2, lr
 8008884:	d8f3      	bhi.n	800886e <__lshift+0x6e>
 8008886:	ebac 0304 	sub.w	r3, ip, r4
 800888a:	3b15      	subs	r3, #21
 800888c:	f023 0303 	bic.w	r3, r3, #3
 8008890:	3304      	adds	r3, #4
 8008892:	f104 0015 	add.w	r0, r4, #21
 8008896:	4584      	cmp	ip, r0
 8008898:	bf38      	it	cc
 800889a:	2304      	movcc	r3, #4
 800889c:	50ca      	str	r2, [r1, r3]
 800889e:	b10a      	cbz	r2, 80088a4 <__lshift+0xa4>
 80088a0:	f108 0602 	add.w	r6, r8, #2
 80088a4:	3e01      	subs	r6, #1
 80088a6:	4638      	mov	r0, r7
 80088a8:	612e      	str	r6, [r5, #16]
 80088aa:	4621      	mov	r1, r4
 80088ac:	f7ff fdd6 	bl	800845c <_Bfree>
 80088b0:	4628      	mov	r0, r5
 80088b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ba:	3301      	adds	r3, #1
 80088bc:	e7c5      	b.n	800884a <__lshift+0x4a>
 80088be:	3904      	subs	r1, #4
 80088c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80088c8:	459c      	cmp	ip, r3
 80088ca:	d8f9      	bhi.n	80088c0 <__lshift+0xc0>
 80088cc:	e7ea      	b.n	80088a4 <__lshift+0xa4>
 80088ce:	bf00      	nop
 80088d0:	080098c3 	.word	0x080098c3
 80088d4:	080098d4 	.word	0x080098d4

080088d8 <__mcmp>:
 80088d8:	b530      	push	{r4, r5, lr}
 80088da:	6902      	ldr	r2, [r0, #16]
 80088dc:	690c      	ldr	r4, [r1, #16]
 80088de:	1b12      	subs	r2, r2, r4
 80088e0:	d10e      	bne.n	8008900 <__mcmp+0x28>
 80088e2:	f100 0314 	add.w	r3, r0, #20
 80088e6:	3114      	adds	r1, #20
 80088e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088f8:	42a5      	cmp	r5, r4
 80088fa:	d003      	beq.n	8008904 <__mcmp+0x2c>
 80088fc:	d305      	bcc.n	800890a <__mcmp+0x32>
 80088fe:	2201      	movs	r2, #1
 8008900:	4610      	mov	r0, r2
 8008902:	bd30      	pop	{r4, r5, pc}
 8008904:	4283      	cmp	r3, r0
 8008906:	d3f3      	bcc.n	80088f0 <__mcmp+0x18>
 8008908:	e7fa      	b.n	8008900 <__mcmp+0x28>
 800890a:	f04f 32ff 	mov.w	r2, #4294967295
 800890e:	e7f7      	b.n	8008900 <__mcmp+0x28>

08008910 <__mdiff>:
 8008910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	460c      	mov	r4, r1
 8008916:	4606      	mov	r6, r0
 8008918:	4611      	mov	r1, r2
 800891a:	4620      	mov	r0, r4
 800891c:	4617      	mov	r7, r2
 800891e:	f7ff ffdb 	bl	80088d8 <__mcmp>
 8008922:	1e05      	subs	r5, r0, #0
 8008924:	d110      	bne.n	8008948 <__mdiff+0x38>
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff fd57 	bl	80083dc <_Balloc>
 800892e:	b930      	cbnz	r0, 800893e <__mdiff+0x2e>
 8008930:	4b39      	ldr	r3, [pc, #228]	; (8008a18 <__mdiff+0x108>)
 8008932:	4602      	mov	r2, r0
 8008934:	f240 2132 	movw	r1, #562	; 0x232
 8008938:	4838      	ldr	r0, [pc, #224]	; (8008a1c <__mdiff+0x10c>)
 800893a:	f000 f997 	bl	8008c6c <__assert_func>
 800893e:	2301      	movs	r3, #1
 8008940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008948:	bfa4      	itt	ge
 800894a:	463b      	movge	r3, r7
 800894c:	4627      	movge	r7, r4
 800894e:	4630      	mov	r0, r6
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	bfa6      	itte	ge
 8008954:	461c      	movge	r4, r3
 8008956:	2500      	movge	r5, #0
 8008958:	2501      	movlt	r5, #1
 800895a:	f7ff fd3f 	bl	80083dc <_Balloc>
 800895e:	b920      	cbnz	r0, 800896a <__mdiff+0x5a>
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <__mdiff+0x108>)
 8008962:	4602      	mov	r2, r0
 8008964:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008968:	e7e6      	b.n	8008938 <__mdiff+0x28>
 800896a:	693e      	ldr	r6, [r7, #16]
 800896c:	60c5      	str	r5, [r0, #12]
 800896e:	6925      	ldr	r5, [r4, #16]
 8008970:	f107 0114 	add.w	r1, r7, #20
 8008974:	f104 0914 	add.w	r9, r4, #20
 8008978:	f100 0e14 	add.w	lr, r0, #20
 800897c:	f107 0210 	add.w	r2, r7, #16
 8008980:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008984:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008988:	46f2      	mov	sl, lr
 800898a:	2700      	movs	r7, #0
 800898c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008990:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008994:	fa1f f883 	uxth.w	r8, r3
 8008998:	fa17 f78b 	uxtah	r7, r7, fp
 800899c:	0c1b      	lsrs	r3, r3, #16
 800899e:	eba7 0808 	sub.w	r8, r7, r8
 80089a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089aa:	fa1f f888 	uxth.w	r8, r8
 80089ae:	141f      	asrs	r7, r3, #16
 80089b0:	454d      	cmp	r5, r9
 80089b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089b6:	f84a 3b04 	str.w	r3, [sl], #4
 80089ba:	d8e7      	bhi.n	800898c <__mdiff+0x7c>
 80089bc:	1b2b      	subs	r3, r5, r4
 80089be:	3b15      	subs	r3, #21
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	3304      	adds	r3, #4
 80089c6:	3415      	adds	r4, #21
 80089c8:	42a5      	cmp	r5, r4
 80089ca:	bf38      	it	cc
 80089cc:	2304      	movcc	r3, #4
 80089ce:	4419      	add	r1, r3
 80089d0:	4473      	add	r3, lr
 80089d2:	469e      	mov	lr, r3
 80089d4:	460d      	mov	r5, r1
 80089d6:	4565      	cmp	r5, ip
 80089d8:	d30e      	bcc.n	80089f8 <__mdiff+0xe8>
 80089da:	f10c 0203 	add.w	r2, ip, #3
 80089de:	1a52      	subs	r2, r2, r1
 80089e0:	f022 0203 	bic.w	r2, r2, #3
 80089e4:	3903      	subs	r1, #3
 80089e6:	458c      	cmp	ip, r1
 80089e8:	bf38      	it	cc
 80089ea:	2200      	movcc	r2, #0
 80089ec:	441a      	add	r2, r3
 80089ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089f2:	b17b      	cbz	r3, 8008a14 <__mdiff+0x104>
 80089f4:	6106      	str	r6, [r0, #16]
 80089f6:	e7a5      	b.n	8008944 <__mdiff+0x34>
 80089f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80089fc:	fa17 f488 	uxtah	r4, r7, r8
 8008a00:	1422      	asrs	r2, r4, #16
 8008a02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008a06:	b2a4      	uxth	r4, r4
 8008a08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008a0c:	f84e 4b04 	str.w	r4, [lr], #4
 8008a10:	1417      	asrs	r7, r2, #16
 8008a12:	e7e0      	b.n	80089d6 <__mdiff+0xc6>
 8008a14:	3e01      	subs	r6, #1
 8008a16:	e7ea      	b.n	80089ee <__mdiff+0xde>
 8008a18:	080098c3 	.word	0x080098c3
 8008a1c:	080098d4 	.word	0x080098d4

08008a20 <__d2b>:
 8008a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a24:	4689      	mov	r9, r1
 8008a26:	2101      	movs	r1, #1
 8008a28:	ec57 6b10 	vmov	r6, r7, d0
 8008a2c:	4690      	mov	r8, r2
 8008a2e:	f7ff fcd5 	bl	80083dc <_Balloc>
 8008a32:	4604      	mov	r4, r0
 8008a34:	b930      	cbnz	r0, 8008a44 <__d2b+0x24>
 8008a36:	4602      	mov	r2, r0
 8008a38:	4b25      	ldr	r3, [pc, #148]	; (8008ad0 <__d2b+0xb0>)
 8008a3a:	4826      	ldr	r0, [pc, #152]	; (8008ad4 <__d2b+0xb4>)
 8008a3c:	f240 310a 	movw	r1, #778	; 0x30a
 8008a40:	f000 f914 	bl	8008c6c <__assert_func>
 8008a44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a4c:	bb35      	cbnz	r5, 8008a9c <__d2b+0x7c>
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	d028      	beq.n	8008aa6 <__d2b+0x86>
 8008a54:	4668      	mov	r0, sp
 8008a56:	9600      	str	r6, [sp, #0]
 8008a58:	f7ff fd8c 	bl	8008574 <__lo0bits>
 8008a5c:	9900      	ldr	r1, [sp, #0]
 8008a5e:	b300      	cbz	r0, 8008aa2 <__d2b+0x82>
 8008a60:	9a01      	ldr	r2, [sp, #4]
 8008a62:	f1c0 0320 	rsb	r3, r0, #32
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	40c2      	lsrs	r2, r0
 8008a6e:	6163      	str	r3, [r4, #20]
 8008a70:	9201      	str	r2, [sp, #4]
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	61a3      	str	r3, [r4, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bf14      	ite	ne
 8008a7a:	2202      	movne	r2, #2
 8008a7c:	2201      	moveq	r2, #1
 8008a7e:	6122      	str	r2, [r4, #16]
 8008a80:	b1d5      	cbz	r5, 8008ab8 <__d2b+0x98>
 8008a82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a86:	4405      	add	r5, r0
 8008a88:	f8c9 5000 	str.w	r5, [r9]
 8008a8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a90:	f8c8 0000 	str.w	r0, [r8]
 8008a94:	4620      	mov	r0, r4
 8008a96:	b003      	add	sp, #12
 8008a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aa0:	e7d5      	b.n	8008a4e <__d2b+0x2e>
 8008aa2:	6161      	str	r1, [r4, #20]
 8008aa4:	e7e5      	b.n	8008a72 <__d2b+0x52>
 8008aa6:	a801      	add	r0, sp, #4
 8008aa8:	f7ff fd64 	bl	8008574 <__lo0bits>
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	6163      	str	r3, [r4, #20]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	6122      	str	r2, [r4, #16]
 8008ab4:	3020      	adds	r0, #32
 8008ab6:	e7e3      	b.n	8008a80 <__d2b+0x60>
 8008ab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008abc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ac0:	f8c9 0000 	str.w	r0, [r9]
 8008ac4:	6918      	ldr	r0, [r3, #16]
 8008ac6:	f7ff fd35 	bl	8008534 <__hi0bits>
 8008aca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ace:	e7df      	b.n	8008a90 <__d2b+0x70>
 8008ad0:	080098c3 	.word	0x080098c3
 8008ad4:	080098d4 	.word	0x080098d4

08008ad8 <_calloc_r>:
 8008ad8:	b513      	push	{r0, r1, r4, lr}
 8008ada:	434a      	muls	r2, r1
 8008adc:	4611      	mov	r1, r2
 8008ade:	9201      	str	r2, [sp, #4]
 8008ae0:	f000 f85a 	bl	8008b98 <_malloc_r>
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	b118      	cbz	r0, 8008af0 <_calloc_r+0x18>
 8008ae8:	9a01      	ldr	r2, [sp, #4]
 8008aea:	2100      	movs	r1, #0
 8008aec:	f7fe f972 	bl	8006dd4 <memset>
 8008af0:	4620      	mov	r0, r4
 8008af2:	b002      	add	sp, #8
 8008af4:	bd10      	pop	{r4, pc}
	...

08008af8 <_free_r>:
 8008af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008afa:	2900      	cmp	r1, #0
 8008afc:	d048      	beq.n	8008b90 <_free_r+0x98>
 8008afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b02:	9001      	str	r0, [sp, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f1a1 0404 	sub.w	r4, r1, #4
 8008b0a:	bfb8      	it	lt
 8008b0c:	18e4      	addlt	r4, r4, r3
 8008b0e:	f000 f8ef 	bl	8008cf0 <__malloc_lock>
 8008b12:	4a20      	ldr	r2, [pc, #128]	; (8008b94 <_free_r+0x9c>)
 8008b14:	9801      	ldr	r0, [sp, #4]
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	4615      	mov	r5, r2
 8008b1a:	b933      	cbnz	r3, 8008b2a <_free_r+0x32>
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	6014      	str	r4, [r2, #0]
 8008b20:	b003      	add	sp, #12
 8008b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b26:	f000 b8e9 	b.w	8008cfc <__malloc_unlock>
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	d90b      	bls.n	8008b46 <_free_r+0x4e>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	1862      	adds	r2, r4, r1
 8008b32:	4293      	cmp	r3, r2
 8008b34:	bf04      	itt	eq
 8008b36:	681a      	ldreq	r2, [r3, #0]
 8008b38:	685b      	ldreq	r3, [r3, #4]
 8008b3a:	6063      	str	r3, [r4, #4]
 8008b3c:	bf04      	itt	eq
 8008b3e:	1852      	addeq	r2, r2, r1
 8008b40:	6022      	streq	r2, [r4, #0]
 8008b42:	602c      	str	r4, [r5, #0]
 8008b44:	e7ec      	b.n	8008b20 <_free_r+0x28>
 8008b46:	461a      	mov	r2, r3
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	b10b      	cbz	r3, 8008b50 <_free_r+0x58>
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	d9fa      	bls.n	8008b46 <_free_r+0x4e>
 8008b50:	6811      	ldr	r1, [r2, #0]
 8008b52:	1855      	adds	r5, r2, r1
 8008b54:	42a5      	cmp	r5, r4
 8008b56:	d10b      	bne.n	8008b70 <_free_r+0x78>
 8008b58:	6824      	ldr	r4, [r4, #0]
 8008b5a:	4421      	add	r1, r4
 8008b5c:	1854      	adds	r4, r2, r1
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	6011      	str	r1, [r2, #0]
 8008b62:	d1dd      	bne.n	8008b20 <_free_r+0x28>
 8008b64:	681c      	ldr	r4, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	6053      	str	r3, [r2, #4]
 8008b6a:	4421      	add	r1, r4
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	e7d7      	b.n	8008b20 <_free_r+0x28>
 8008b70:	d902      	bls.n	8008b78 <_free_r+0x80>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6003      	str	r3, [r0, #0]
 8008b76:	e7d3      	b.n	8008b20 <_free_r+0x28>
 8008b78:	6825      	ldr	r5, [r4, #0]
 8008b7a:	1961      	adds	r1, r4, r5
 8008b7c:	428b      	cmp	r3, r1
 8008b7e:	bf04      	itt	eq
 8008b80:	6819      	ldreq	r1, [r3, #0]
 8008b82:	685b      	ldreq	r3, [r3, #4]
 8008b84:	6063      	str	r3, [r4, #4]
 8008b86:	bf04      	itt	eq
 8008b88:	1949      	addeq	r1, r1, r5
 8008b8a:	6021      	streq	r1, [r4, #0]
 8008b8c:	6054      	str	r4, [r2, #4]
 8008b8e:	e7c7      	b.n	8008b20 <_free_r+0x28>
 8008b90:	b003      	add	sp, #12
 8008b92:	bd30      	pop	{r4, r5, pc}
 8008b94:	200005a0 	.word	0x200005a0

08008b98 <_malloc_r>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	1ccd      	adds	r5, r1, #3
 8008b9c:	f025 0503 	bic.w	r5, r5, #3
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	2d0c      	cmp	r5, #12
 8008ba4:	bf38      	it	cc
 8008ba6:	250c      	movcc	r5, #12
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	4606      	mov	r6, r0
 8008bac:	db01      	blt.n	8008bb2 <_malloc_r+0x1a>
 8008bae:	42a9      	cmp	r1, r5
 8008bb0:	d903      	bls.n	8008bba <_malloc_r+0x22>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	6033      	str	r3, [r6, #0]
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bba:	f000 f899 	bl	8008cf0 <__malloc_lock>
 8008bbe:	4921      	ldr	r1, [pc, #132]	; (8008c44 <_malloc_r+0xac>)
 8008bc0:	680a      	ldr	r2, [r1, #0]
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	b99c      	cbnz	r4, 8008bee <_malloc_r+0x56>
 8008bc6:	4f20      	ldr	r7, [pc, #128]	; (8008c48 <_malloc_r+0xb0>)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	b923      	cbnz	r3, 8008bd6 <_malloc_r+0x3e>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f83c 	bl	8008c4c <_sbrk_r>
 8008bd4:	6038      	str	r0, [r7, #0]
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f837 	bl	8008c4c <_sbrk_r>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d123      	bne.n	8008c2a <_malloc_r+0x92>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	4630      	mov	r0, r6
 8008be8:	f000 f888 	bl	8008cfc <__malloc_unlock>
 8008bec:	e7e3      	b.n	8008bb6 <_malloc_r+0x1e>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	1b5b      	subs	r3, r3, r5
 8008bf2:	d417      	bmi.n	8008c24 <_malloc_r+0x8c>
 8008bf4:	2b0b      	cmp	r3, #11
 8008bf6:	d903      	bls.n	8008c00 <_malloc_r+0x68>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	441c      	add	r4, r3
 8008bfc:	6025      	str	r5, [r4, #0]
 8008bfe:	e004      	b.n	8008c0a <_malloc_r+0x72>
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	42a2      	cmp	r2, r4
 8008c04:	bf0c      	ite	eq
 8008c06:	600b      	streq	r3, [r1, #0]
 8008c08:	6053      	strne	r3, [r2, #4]
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f000 f876 	bl	8008cfc <__malloc_unlock>
 8008c10:	f104 000b 	add.w	r0, r4, #11
 8008c14:	1d23      	adds	r3, r4, #4
 8008c16:	f020 0007 	bic.w	r0, r0, #7
 8008c1a:	1ac2      	subs	r2, r0, r3
 8008c1c:	d0cc      	beq.n	8008bb8 <_malloc_r+0x20>
 8008c1e:	1a1b      	subs	r3, r3, r0
 8008c20:	50a3      	str	r3, [r4, r2]
 8008c22:	e7c9      	b.n	8008bb8 <_malloc_r+0x20>
 8008c24:	4622      	mov	r2, r4
 8008c26:	6864      	ldr	r4, [r4, #4]
 8008c28:	e7cc      	b.n	8008bc4 <_malloc_r+0x2c>
 8008c2a:	1cc4      	adds	r4, r0, #3
 8008c2c:	f024 0403 	bic.w	r4, r4, #3
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d0e3      	beq.n	8008bfc <_malloc_r+0x64>
 8008c34:	1a21      	subs	r1, r4, r0
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 f808 	bl	8008c4c <_sbrk_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d1dd      	bne.n	8008bfc <_malloc_r+0x64>
 8008c40:	e7cf      	b.n	8008be2 <_malloc_r+0x4a>
 8008c42:	bf00      	nop
 8008c44:	200005a0 	.word	0x200005a0
 8008c48:	200005a4 	.word	0x200005a4

08008c4c <_sbrk_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d06      	ldr	r5, [pc, #24]	; (8008c68 <_sbrk_r+0x1c>)
 8008c50:	2300      	movs	r3, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	f7f8 ff36 	bl	8001ac8 <_sbrk>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_sbrk_r+0x1a>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_sbrk_r+0x1a>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20002354 	.word	0x20002354

08008c6c <__assert_func>:
 8008c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c6e:	4614      	mov	r4, r2
 8008c70:	461a      	mov	r2, r3
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <__assert_func+0x2c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	68d8      	ldr	r0, [r3, #12]
 8008c7a:	b14c      	cbz	r4, 8008c90 <__assert_func+0x24>
 8008c7c:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <__assert_func+0x30>)
 8008c7e:	9100      	str	r1, [sp, #0]
 8008c80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c84:	4906      	ldr	r1, [pc, #24]	; (8008ca0 <__assert_func+0x34>)
 8008c86:	462b      	mov	r3, r5
 8008c88:	f000 f80e 	bl	8008ca8 <fiprintf>
 8008c8c:	f000 fa64 	bl	8009158 <abort>
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <__assert_func+0x38>)
 8008c92:	461c      	mov	r4, r3
 8008c94:	e7f3      	b.n	8008c7e <__assert_func+0x12>
 8008c96:	bf00      	nop
 8008c98:	20000188 	.word	0x20000188
 8008c9c:	08009a34 	.word	0x08009a34
 8008ca0:	08009a41 	.word	0x08009a41
 8008ca4:	08009a6f 	.word	0x08009a6f

08008ca8 <fiprintf>:
 8008ca8:	b40e      	push	{r1, r2, r3}
 8008caa:	b503      	push	{r0, r1, lr}
 8008cac:	4601      	mov	r1, r0
 8008cae:	ab03      	add	r3, sp, #12
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <fiprintf+0x20>)
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f000 f84f 	bl	8008d5c <_vfiprintf_r>
 8008cbe:	b002      	add	sp, #8
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	20000188 	.word	0x20000188

08008ccc <__ascii_mbtowc>:
 8008ccc:	b082      	sub	sp, #8
 8008cce:	b901      	cbnz	r1, 8008cd2 <__ascii_mbtowc+0x6>
 8008cd0:	a901      	add	r1, sp, #4
 8008cd2:	b142      	cbz	r2, 8008ce6 <__ascii_mbtowc+0x1a>
 8008cd4:	b14b      	cbz	r3, 8008cea <__ascii_mbtowc+0x1e>
 8008cd6:	7813      	ldrb	r3, [r2, #0]
 8008cd8:	600b      	str	r3, [r1, #0]
 8008cda:	7812      	ldrb	r2, [r2, #0]
 8008cdc:	1e10      	subs	r0, r2, #0
 8008cde:	bf18      	it	ne
 8008ce0:	2001      	movne	r0, #1
 8008ce2:	b002      	add	sp, #8
 8008ce4:	4770      	bx	lr
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	e7fb      	b.n	8008ce2 <__ascii_mbtowc+0x16>
 8008cea:	f06f 0001 	mvn.w	r0, #1
 8008cee:	e7f8      	b.n	8008ce2 <__ascii_mbtowc+0x16>

08008cf0 <__malloc_lock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__malloc_lock+0x8>)
 8008cf2:	f000 bbf1 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	2000235c 	.word	0x2000235c

08008cfc <__malloc_unlock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	; (8008d04 <__malloc_unlock+0x8>)
 8008cfe:	f000 bbec 	b.w	80094da <__retarget_lock_release_recursive>
 8008d02:	bf00      	nop
 8008d04:	2000235c 	.word	0x2000235c

08008d08 <__sfputc_r>:
 8008d08:	6893      	ldr	r3, [r2, #8]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	b410      	push	{r4}
 8008d10:	6093      	str	r3, [r2, #8]
 8008d12:	da08      	bge.n	8008d26 <__sfputc_r+0x1e>
 8008d14:	6994      	ldr	r4, [r2, #24]
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	db01      	blt.n	8008d1e <__sfputc_r+0x16>
 8008d1a:	290a      	cmp	r1, #10
 8008d1c:	d103      	bne.n	8008d26 <__sfputc_r+0x1e>
 8008d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d22:	f000 b94b 	b.w	8008fbc <__swbuf_r>
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	1c58      	adds	r0, r3, #1
 8008d2a:	6010      	str	r0, [r2, #0]
 8008d2c:	7019      	strb	r1, [r3, #0]
 8008d2e:	4608      	mov	r0, r1
 8008d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <__sfputs_r>:
 8008d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d38:	4606      	mov	r6, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	18d5      	adds	r5, r2, r3
 8008d40:	42ac      	cmp	r4, r5
 8008d42:	d101      	bne.n	8008d48 <__sfputs_r+0x12>
 8008d44:	2000      	movs	r0, #0
 8008d46:	e007      	b.n	8008d58 <__sfputs_r+0x22>
 8008d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4c:	463a      	mov	r2, r7
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff ffda 	bl	8008d08 <__sfputc_r>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d1f3      	bne.n	8008d40 <__sfputs_r+0xa>
 8008d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d5c <_vfiprintf_r>:
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	460d      	mov	r5, r1
 8008d62:	b09d      	sub	sp, #116	; 0x74
 8008d64:	4614      	mov	r4, r2
 8008d66:	4698      	mov	r8, r3
 8008d68:	4606      	mov	r6, r0
 8008d6a:	b118      	cbz	r0, 8008d74 <_vfiprintf_r+0x18>
 8008d6c:	6983      	ldr	r3, [r0, #24]
 8008d6e:	b90b      	cbnz	r3, 8008d74 <_vfiprintf_r+0x18>
 8008d70:	f000 fb14 	bl	800939c <__sinit>
 8008d74:	4b89      	ldr	r3, [pc, #548]	; (8008f9c <_vfiprintf_r+0x240>)
 8008d76:	429d      	cmp	r5, r3
 8008d78:	d11b      	bne.n	8008db2 <_vfiprintf_r+0x56>
 8008d7a:	6875      	ldr	r5, [r6, #4]
 8008d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7e:	07d9      	lsls	r1, r3, #31
 8008d80:	d405      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	059a      	lsls	r2, r3, #22
 8008d86:	d402      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8a:	f000 fba5 	bl	80094d8 <__retarget_lock_acquire_recursive>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	071b      	lsls	r3, r3, #28
 8008d92:	d501      	bpl.n	8008d98 <_vfiprintf_r+0x3c>
 8008d94:	692b      	ldr	r3, [r5, #16]
 8008d96:	b9eb      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x78>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 f96e 	bl	800907c <__swsetup_r>
 8008da0:	b1c0      	cbz	r0, 8008dd4 <_vfiprintf_r+0x78>
 8008da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da4:	07dc      	lsls	r4, r3, #31
 8008da6:	d50e      	bpl.n	8008dc6 <_vfiprintf_r+0x6a>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	b01d      	add	sp, #116	; 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	4b7b      	ldr	r3, [pc, #492]	; (8008fa0 <_vfiprintf_r+0x244>)
 8008db4:	429d      	cmp	r5, r3
 8008db6:	d101      	bne.n	8008dbc <_vfiprintf_r+0x60>
 8008db8:	68b5      	ldr	r5, [r6, #8]
 8008dba:	e7df      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dbc:	4b79      	ldr	r3, [pc, #484]	; (8008fa4 <_vfiprintf_r+0x248>)
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	bf08      	it	eq
 8008dc2:	68f5      	ldreq	r5, [r6, #12]
 8008dc4:	e7da      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	0598      	lsls	r0, r3, #22
 8008dca:	d4ed      	bmi.n	8008da8 <_vfiprintf_r+0x4c>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dce:	f000 fb84 	bl	80094da <__retarget_lock_release_recursive>
 8008dd2:	e7e9      	b.n	8008da8 <_vfiprintf_r+0x4c>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de2:	2330      	movs	r3, #48	; 0x30
 8008de4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fa8 <_vfiprintf_r+0x24c>
 8008de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dec:	f04f 0901 	mov.w	r9, #1
 8008df0:	4623      	mov	r3, r4
 8008df2:	469a      	mov	sl, r3
 8008df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df8:	b10a      	cbz	r2, 8008dfe <_vfiprintf_r+0xa2>
 8008dfa:	2a25      	cmp	r2, #37	; 0x25
 8008dfc:	d1f9      	bne.n	8008df2 <_vfiprintf_r+0x96>
 8008dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8008e02:	d00b      	beq.n	8008e1c <_vfiprintf_r+0xc0>
 8008e04:	465b      	mov	r3, fp
 8008e06:	4622      	mov	r2, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ff93 	bl	8008d36 <__sfputs_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	f000 80aa 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e18:	445a      	add	r2, fp
 8008e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80a2 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e30:	f10a 0a01 	add.w	sl, sl, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e3e:	4654      	mov	r4, sl
 8008e40:	2205      	movs	r2, #5
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	4858      	ldr	r0, [pc, #352]	; (8008fa8 <_vfiprintf_r+0x24c>)
 8008e48:	f7f7 f9d2 	bl	80001f0 <memchr>
 8008e4c:	9a04      	ldr	r2, [sp, #16]
 8008e4e:	b9d8      	cbnz	r0, 8008e88 <_vfiprintf_r+0x12c>
 8008e50:	06d1      	lsls	r1, r2, #27
 8008e52:	bf44      	itt	mi
 8008e54:	2320      	movmi	r3, #32
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5a:	0713      	lsls	r3, r2, #28
 8008e5c:	bf44      	itt	mi
 8008e5e:	232b      	movmi	r3, #43	; 0x2b
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b2a      	cmp	r3, #42	; 0x2a
 8008e6a:	d015      	beq.n	8008e98 <_vfiprintf_r+0x13c>
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2000      	movs	r0, #0
 8008e72:	f04f 0c0a 	mov.w	ip, #10
 8008e76:	4621      	mov	r1, r4
 8008e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7c:	3b30      	subs	r3, #48	; 0x30
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d94e      	bls.n	8008f20 <_vfiprintf_r+0x1c4>
 8008e82:	b1b0      	cbz	r0, 8008eb2 <_vfiprintf_r+0x156>
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	e014      	b.n	8008eb2 <_vfiprintf_r+0x156>
 8008e88:	eba0 0308 	sub.w	r3, r0, r8
 8008e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	46a2      	mov	sl, r4
 8008e96:	e7d2      	b.n	8008e3e <_vfiprintf_r+0xe2>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfbb      	ittet	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eaa:	9307      	strge	r3, [sp, #28]
 8008eac:	9307      	strlt	r3, [sp, #28]
 8008eae:	bfb8      	it	lt
 8008eb0:	9204      	strlt	r2, [sp, #16]
 8008eb2:	7823      	ldrb	r3, [r4, #0]
 8008eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb6:	d10c      	bne.n	8008ed2 <_vfiprintf_r+0x176>
 8008eb8:	7863      	ldrb	r3, [r4, #1]
 8008eba:	2b2a      	cmp	r3, #42	; 0x2a
 8008ebc:	d135      	bne.n	8008f2a <_vfiprintf_r+0x1ce>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	9203      	str	r2, [sp, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfb8      	it	lt
 8008eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ece:	3402      	adds	r4, #2
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fb8 <_vfiprintf_r+0x25c>
 8008ed6:	7821      	ldrb	r1, [r4, #0]
 8008ed8:	2203      	movs	r2, #3
 8008eda:	4650      	mov	r0, sl
 8008edc:	f7f7 f988 	bl	80001f0 <memchr>
 8008ee0:	b140      	cbz	r0, 8008ef4 <_vfiprintf_r+0x198>
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	eba0 000a 	sub.w	r0, r0, sl
 8008ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4303      	orrs	r3, r0
 8008ef0:	3401      	adds	r4, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	482c      	ldr	r0, [pc, #176]	; (8008fac <_vfiprintf_r+0x250>)
 8008efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008efe:	2206      	movs	r2, #6
 8008f00:	f7f7 f976 	bl	80001f0 <memchr>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d03f      	beq.n	8008f88 <_vfiprintf_r+0x22c>
 8008f08:	4b29      	ldr	r3, [pc, #164]	; (8008fb0 <_vfiprintf_r+0x254>)
 8008f0a:	bb1b      	cbnz	r3, 8008f54 <_vfiprintf_r+0x1f8>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	3307      	adds	r3, #7
 8008f10:	f023 0307 	bic.w	r3, r3, #7
 8008f14:	3308      	adds	r3, #8
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	443b      	add	r3, r7
 8008f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1e:	e767      	b.n	8008df0 <_vfiprintf_r+0x94>
 8008f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f24:	460c      	mov	r4, r1
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7a5      	b.n	8008e76 <_vfiprintf_r+0x11a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9305      	str	r3, [sp, #20]
 8008f30:	4619      	mov	r1, r3
 8008f32:	f04f 0c0a 	mov.w	ip, #10
 8008f36:	4620      	mov	r0, r4
 8008f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3c:	3a30      	subs	r2, #48	; 0x30
 8008f3e:	2a09      	cmp	r2, #9
 8008f40:	d903      	bls.n	8008f4a <_vfiprintf_r+0x1ee>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0c5      	beq.n	8008ed2 <_vfiprintf_r+0x176>
 8008f46:	9105      	str	r1, [sp, #20]
 8008f48:	e7c3      	b.n	8008ed2 <_vfiprintf_r+0x176>
 8008f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4e:	4604      	mov	r4, r0
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7f0      	b.n	8008f36 <_vfiprintf_r+0x1da>
 8008f54:	ab03      	add	r3, sp, #12
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4b16      	ldr	r3, [pc, #88]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f5c:	a904      	add	r1, sp, #16
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7fd ffe0 	bl	8006f24 <_printf_float>
 8008f64:	4607      	mov	r7, r0
 8008f66:	1c78      	adds	r0, r7, #1
 8008f68:	d1d6      	bne.n	8008f18 <_vfiprintf_r+0x1bc>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	d405      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f70:	89ab      	ldrh	r3, [r5, #12]
 8008f72:	059a      	lsls	r2, r3, #22
 8008f74:	d402      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f78:	f000 faaf 	bl	80094da <__retarget_lock_release_recursive>
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	065b      	lsls	r3, r3, #25
 8008f80:	f53f af12 	bmi.w	8008da8 <_vfiprintf_r+0x4c>
 8008f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f86:	e711      	b.n	8008dac <_vfiprintf_r+0x50>
 8008f88:	ab03      	add	r3, sp, #12
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f90:	a904      	add	r1, sp, #16
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7fe fa6a 	bl	800746c <_printf_i>
 8008f98:	e7e4      	b.n	8008f64 <_vfiprintf_r+0x208>
 8008f9a:	bf00      	nop
 8008f9c:	08009bac 	.word	0x08009bac
 8008fa0:	08009bcc 	.word	0x08009bcc
 8008fa4:	08009b8c 	.word	0x08009b8c
 8008fa8:	08009a7a 	.word	0x08009a7a
 8008fac:	08009a84 	.word	0x08009a84
 8008fb0:	08006f25 	.word	0x08006f25
 8008fb4:	08008d37 	.word	0x08008d37
 8008fb8:	08009a80 	.word	0x08009a80

08008fbc <__swbuf_r>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	460e      	mov	r6, r1
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	b118      	cbz	r0, 8008fce <__swbuf_r+0x12>
 8008fc6:	6983      	ldr	r3, [r0, #24]
 8008fc8:	b90b      	cbnz	r3, 8008fce <__swbuf_r+0x12>
 8008fca:	f000 f9e7 	bl	800939c <__sinit>
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <__swbuf_r+0x98>)
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d12b      	bne.n	800902c <__swbuf_r+0x70>
 8008fd4:	686c      	ldr	r4, [r5, #4]
 8008fd6:	69a3      	ldr	r3, [r4, #24]
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	071a      	lsls	r2, r3, #28
 8008fde:	d52f      	bpl.n	8009040 <__swbuf_r+0x84>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b36b      	cbz	r3, 8009040 <__swbuf_r+0x84>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	6963      	ldr	r3, [r4, #20]
 8008fec:	b2f6      	uxtb	r6, r6
 8008fee:	4283      	cmp	r3, r0
 8008ff0:	4637      	mov	r7, r6
 8008ff2:	dc04      	bgt.n	8008ffe <__swbuf_r+0x42>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 f93c 	bl	8009274 <_fflush_r>
 8008ffc:	bb30      	cbnz	r0, 800904c <__swbuf_r+0x90>
 8008ffe:	68a3      	ldr	r3, [r4, #8]
 8009000:	3b01      	subs	r3, #1
 8009002:	60a3      	str	r3, [r4, #8]
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	6022      	str	r2, [r4, #0]
 800900a:	701e      	strb	r6, [r3, #0]
 800900c:	6963      	ldr	r3, [r4, #20]
 800900e:	3001      	adds	r0, #1
 8009010:	4283      	cmp	r3, r0
 8009012:	d004      	beq.n	800901e <__swbuf_r+0x62>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	07db      	lsls	r3, r3, #31
 8009018:	d506      	bpl.n	8009028 <__swbuf_r+0x6c>
 800901a:	2e0a      	cmp	r6, #10
 800901c:	d104      	bne.n	8009028 <__swbuf_r+0x6c>
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 f927 	bl	8009274 <_fflush_r>
 8009026:	b988      	cbnz	r0, 800904c <__swbuf_r+0x90>
 8009028:	4638      	mov	r0, r7
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <__swbuf_r+0x9c>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <__swbuf_r+0x7a>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7cf      	b.n	8008fd6 <__swbuf_r+0x1a>
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <__swbuf_r+0xa0>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7ca      	b.n	8008fd6 <__swbuf_r+0x1a>
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f81a 	bl	800907c <__swsetup_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0cb      	beq.n	8008fe4 <__swbuf_r+0x28>
 800904c:	f04f 37ff 	mov.w	r7, #4294967295
 8009050:	e7ea      	b.n	8009028 <__swbuf_r+0x6c>
 8009052:	bf00      	nop
 8009054:	08009bac 	.word	0x08009bac
 8009058:	08009bcc 	.word	0x08009bcc
 800905c:	08009b8c 	.word	0x08009b8c

08009060 <__ascii_wctomb>:
 8009060:	b149      	cbz	r1, 8009076 <__ascii_wctomb+0x16>
 8009062:	2aff      	cmp	r2, #255	; 0xff
 8009064:	bf85      	ittet	hi
 8009066:	238a      	movhi	r3, #138	; 0x8a
 8009068:	6003      	strhi	r3, [r0, #0]
 800906a:	700a      	strbls	r2, [r1, #0]
 800906c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009070:	bf98      	it	ls
 8009072:	2001      	movls	r0, #1
 8009074:	4770      	bx	lr
 8009076:	4608      	mov	r0, r1
 8009078:	4770      	bx	lr
	...

0800907c <__swsetup_r>:
 800907c:	4b32      	ldr	r3, [pc, #200]	; (8009148 <__swsetup_r+0xcc>)
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	681d      	ldr	r5, [r3, #0]
 8009082:	4606      	mov	r6, r0
 8009084:	460c      	mov	r4, r1
 8009086:	b125      	cbz	r5, 8009092 <__swsetup_r+0x16>
 8009088:	69ab      	ldr	r3, [r5, #24]
 800908a:	b913      	cbnz	r3, 8009092 <__swsetup_r+0x16>
 800908c:	4628      	mov	r0, r5
 800908e:	f000 f985 	bl	800939c <__sinit>
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <__swsetup_r+0xd0>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d10f      	bne.n	80090b8 <__swsetup_r+0x3c>
 8009098:	686c      	ldr	r4, [r5, #4]
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090a0:	0719      	lsls	r1, r3, #28
 80090a2:	d42c      	bmi.n	80090fe <__swsetup_r+0x82>
 80090a4:	06dd      	lsls	r5, r3, #27
 80090a6:	d411      	bmi.n	80090cc <__swsetup_r+0x50>
 80090a8:	2309      	movs	r3, #9
 80090aa:	6033      	str	r3, [r6, #0]
 80090ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	e03e      	b.n	8009136 <__swsetup_r+0xba>
 80090b8:	4b25      	ldr	r3, [pc, #148]	; (8009150 <__swsetup_r+0xd4>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d101      	bne.n	80090c2 <__swsetup_r+0x46>
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	e7eb      	b.n	800909a <__swsetup_r+0x1e>
 80090c2:	4b24      	ldr	r3, [pc, #144]	; (8009154 <__swsetup_r+0xd8>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	bf08      	it	eq
 80090c8:	68ec      	ldreq	r4, [r5, #12]
 80090ca:	e7e6      	b.n	800909a <__swsetup_r+0x1e>
 80090cc:	0758      	lsls	r0, r3, #29
 80090ce:	d512      	bpl.n	80090f6 <__swsetup_r+0x7a>
 80090d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d2:	b141      	cbz	r1, 80090e6 <__swsetup_r+0x6a>
 80090d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d8:	4299      	cmp	r1, r3
 80090da:	d002      	beq.n	80090e2 <__swsetup_r+0x66>
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff fd0b 	bl	8008af8 <_free_r>
 80090e2:	2300      	movs	r3, #0
 80090e4:	6363      	str	r3, [r4, #52]	; 0x34
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	2300      	movs	r3, #0
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f043 0308 	orr.w	r3, r3, #8
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	b94b      	cbnz	r3, 8009116 <__swsetup_r+0x9a>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910c:	d003      	beq.n	8009116 <__swsetup_r+0x9a>
 800910e:	4621      	mov	r1, r4
 8009110:	4630      	mov	r0, r6
 8009112:	f000 fa07 	bl	8009524 <__smakebuf_r>
 8009116:	89a0      	ldrh	r0, [r4, #12]
 8009118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800911c:	f010 0301 	ands.w	r3, r0, #1
 8009120:	d00a      	beq.n	8009138 <__swsetup_r+0xbc>
 8009122:	2300      	movs	r3, #0
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6963      	ldr	r3, [r4, #20]
 8009128:	425b      	negs	r3, r3
 800912a:	61a3      	str	r3, [r4, #24]
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	b943      	cbnz	r3, 8009142 <__swsetup_r+0xc6>
 8009130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009134:	d1ba      	bne.n	80090ac <__swsetup_r+0x30>
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	0781      	lsls	r1, r0, #30
 800913a:	bf58      	it	pl
 800913c:	6963      	ldrpl	r3, [r4, #20]
 800913e:	60a3      	str	r3, [r4, #8]
 8009140:	e7f4      	b.n	800912c <__swsetup_r+0xb0>
 8009142:	2000      	movs	r0, #0
 8009144:	e7f7      	b.n	8009136 <__swsetup_r+0xba>
 8009146:	bf00      	nop
 8009148:	20000188 	.word	0x20000188
 800914c:	08009bac 	.word	0x08009bac
 8009150:	08009bcc 	.word	0x08009bcc
 8009154:	08009b8c 	.word	0x08009b8c

08009158 <abort>:
 8009158:	b508      	push	{r3, lr}
 800915a:	2006      	movs	r0, #6
 800915c:	f000 fa4a 	bl	80095f4 <raise>
 8009160:	2001      	movs	r0, #1
 8009162:	f7f8 fc81 	bl	8001a68 <_exit>
	...

08009168 <__sflush_r>:
 8009168:	898a      	ldrh	r2, [r1, #12]
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	4605      	mov	r5, r0
 8009170:	0710      	lsls	r0, r2, #28
 8009172:	460c      	mov	r4, r1
 8009174:	d458      	bmi.n	8009228 <__sflush_r+0xc0>
 8009176:	684b      	ldr	r3, [r1, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc05      	bgt.n	8009188 <__sflush_r+0x20>
 800917c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	dc02      	bgt.n	8009188 <__sflush_r+0x20>
 8009182:	2000      	movs	r0, #0
 8009184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918a:	2e00      	cmp	r6, #0
 800918c:	d0f9      	beq.n	8009182 <__sflush_r+0x1a>
 800918e:	2300      	movs	r3, #0
 8009190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009194:	682f      	ldr	r7, [r5, #0]
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	d032      	beq.n	8009200 <__sflush_r+0x98>
 800919a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	075a      	lsls	r2, r3, #29
 80091a0:	d505      	bpl.n	80091ae <__sflush_r+0x46>
 80091a2:	6863      	ldr	r3, [r4, #4]
 80091a4:	1ac0      	subs	r0, r0, r3
 80091a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091a8:	b10b      	cbz	r3, 80091ae <__sflush_r+0x46>
 80091aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ac:	1ac0      	subs	r0, r0, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	4602      	mov	r2, r0
 80091b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091b4:	6a21      	ldr	r1, [r4, #32]
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b0      	blx	r6
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	d106      	bne.n	80091ce <__sflush_r+0x66>
 80091c0:	6829      	ldr	r1, [r5, #0]
 80091c2:	291d      	cmp	r1, #29
 80091c4:	d82c      	bhi.n	8009220 <__sflush_r+0xb8>
 80091c6:	4a2a      	ldr	r2, [pc, #168]	; (8009270 <__sflush_r+0x108>)
 80091c8:	40ca      	lsrs	r2, r1
 80091ca:	07d6      	lsls	r6, r2, #31
 80091cc:	d528      	bpl.n	8009220 <__sflush_r+0xb8>
 80091ce:	2200      	movs	r2, #0
 80091d0:	6062      	str	r2, [r4, #4]
 80091d2:	04d9      	lsls	r1, r3, #19
 80091d4:	6922      	ldr	r2, [r4, #16]
 80091d6:	6022      	str	r2, [r4, #0]
 80091d8:	d504      	bpl.n	80091e4 <__sflush_r+0x7c>
 80091da:	1c42      	adds	r2, r0, #1
 80091dc:	d101      	bne.n	80091e2 <__sflush_r+0x7a>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b903      	cbnz	r3, 80091e4 <__sflush_r+0x7c>
 80091e2:	6560      	str	r0, [r4, #84]	; 0x54
 80091e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e6:	602f      	str	r7, [r5, #0]
 80091e8:	2900      	cmp	r1, #0
 80091ea:	d0ca      	beq.n	8009182 <__sflush_r+0x1a>
 80091ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091f0:	4299      	cmp	r1, r3
 80091f2:	d002      	beq.n	80091fa <__sflush_r+0x92>
 80091f4:	4628      	mov	r0, r5
 80091f6:	f7ff fc7f 	bl	8008af8 <_free_r>
 80091fa:	2000      	movs	r0, #0
 80091fc:	6360      	str	r0, [r4, #52]	; 0x34
 80091fe:	e7c1      	b.n	8009184 <__sflush_r+0x1c>
 8009200:	6a21      	ldr	r1, [r4, #32]
 8009202:	2301      	movs	r3, #1
 8009204:	4628      	mov	r0, r5
 8009206:	47b0      	blx	r6
 8009208:	1c41      	adds	r1, r0, #1
 800920a:	d1c7      	bne.n	800919c <__sflush_r+0x34>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0c4      	beq.n	800919c <__sflush_r+0x34>
 8009212:	2b1d      	cmp	r3, #29
 8009214:	d001      	beq.n	800921a <__sflush_r+0xb2>
 8009216:	2b16      	cmp	r3, #22
 8009218:	d101      	bne.n	800921e <__sflush_r+0xb6>
 800921a:	602f      	str	r7, [r5, #0]
 800921c:	e7b1      	b.n	8009182 <__sflush_r+0x1a>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	e7ad      	b.n	8009184 <__sflush_r+0x1c>
 8009228:	690f      	ldr	r7, [r1, #16]
 800922a:	2f00      	cmp	r7, #0
 800922c:	d0a9      	beq.n	8009182 <__sflush_r+0x1a>
 800922e:	0793      	lsls	r3, r2, #30
 8009230:	680e      	ldr	r6, [r1, #0]
 8009232:	bf08      	it	eq
 8009234:	694b      	ldreq	r3, [r1, #20]
 8009236:	600f      	str	r7, [r1, #0]
 8009238:	bf18      	it	ne
 800923a:	2300      	movne	r3, #0
 800923c:	eba6 0807 	sub.w	r8, r6, r7
 8009240:	608b      	str	r3, [r1, #8]
 8009242:	f1b8 0f00 	cmp.w	r8, #0
 8009246:	dd9c      	ble.n	8009182 <__sflush_r+0x1a>
 8009248:	6a21      	ldr	r1, [r4, #32]
 800924a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800924c:	4643      	mov	r3, r8
 800924e:	463a      	mov	r2, r7
 8009250:	4628      	mov	r0, r5
 8009252:	47b0      	blx	r6
 8009254:	2800      	cmp	r0, #0
 8009256:	dc06      	bgt.n	8009266 <__sflush_r+0xfe>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	e78e      	b.n	8009184 <__sflush_r+0x1c>
 8009266:	4407      	add	r7, r0
 8009268:	eba8 0800 	sub.w	r8, r8, r0
 800926c:	e7e9      	b.n	8009242 <__sflush_r+0xda>
 800926e:	bf00      	nop
 8009270:	20400001 	.word	0x20400001

08009274 <_fflush_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	690b      	ldr	r3, [r1, #16]
 8009278:	4605      	mov	r5, r0
 800927a:	460c      	mov	r4, r1
 800927c:	b913      	cbnz	r3, 8009284 <_fflush_r+0x10>
 800927e:	2500      	movs	r5, #0
 8009280:	4628      	mov	r0, r5
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	b118      	cbz	r0, 800928e <_fflush_r+0x1a>
 8009286:	6983      	ldr	r3, [r0, #24]
 8009288:	b90b      	cbnz	r3, 800928e <_fflush_r+0x1a>
 800928a:	f000 f887 	bl	800939c <__sinit>
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <_fflush_r+0x6c>)
 8009290:	429c      	cmp	r4, r3
 8009292:	d11b      	bne.n	80092cc <_fflush_r+0x58>
 8009294:	686c      	ldr	r4, [r5, #4]
 8009296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0ef      	beq.n	800927e <_fflush_r+0xa>
 800929e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092a0:	07d0      	lsls	r0, r2, #31
 80092a2:	d404      	bmi.n	80092ae <_fflush_r+0x3a>
 80092a4:	0599      	lsls	r1, r3, #22
 80092a6:	d402      	bmi.n	80092ae <_fflush_r+0x3a>
 80092a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092aa:	f000 f915 	bl	80094d8 <__retarget_lock_acquire_recursive>
 80092ae:	4628      	mov	r0, r5
 80092b0:	4621      	mov	r1, r4
 80092b2:	f7ff ff59 	bl	8009168 <__sflush_r>
 80092b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092b8:	07da      	lsls	r2, r3, #31
 80092ba:	4605      	mov	r5, r0
 80092bc:	d4e0      	bmi.n	8009280 <_fflush_r+0xc>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	059b      	lsls	r3, r3, #22
 80092c2:	d4dd      	bmi.n	8009280 <_fflush_r+0xc>
 80092c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092c6:	f000 f908 	bl	80094da <__retarget_lock_release_recursive>
 80092ca:	e7d9      	b.n	8009280 <_fflush_r+0xc>
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <_fflush_r+0x70>)
 80092ce:	429c      	cmp	r4, r3
 80092d0:	d101      	bne.n	80092d6 <_fflush_r+0x62>
 80092d2:	68ac      	ldr	r4, [r5, #8]
 80092d4:	e7df      	b.n	8009296 <_fflush_r+0x22>
 80092d6:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <_fflush_r+0x74>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	bf08      	it	eq
 80092dc:	68ec      	ldreq	r4, [r5, #12]
 80092de:	e7da      	b.n	8009296 <_fflush_r+0x22>
 80092e0:	08009bac 	.word	0x08009bac
 80092e4:	08009bcc 	.word	0x08009bcc
 80092e8:	08009b8c 	.word	0x08009b8c

080092ec <std>:
 80092ec:	2300      	movs	r3, #0
 80092ee:	b510      	push	{r4, lr}
 80092f0:	4604      	mov	r4, r0
 80092f2:	e9c0 3300 	strd	r3, r3, [r0]
 80092f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092fa:	6083      	str	r3, [r0, #8]
 80092fc:	8181      	strh	r1, [r0, #12]
 80092fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009300:	81c2      	strh	r2, [r0, #14]
 8009302:	6183      	str	r3, [r0, #24]
 8009304:	4619      	mov	r1, r3
 8009306:	2208      	movs	r2, #8
 8009308:	305c      	adds	r0, #92	; 0x5c
 800930a:	f7fd fd63 	bl	8006dd4 <memset>
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <std+0x38>)
 8009310:	6263      	str	r3, [r4, #36]	; 0x24
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <std+0x3c>)
 8009314:	62a3      	str	r3, [r4, #40]	; 0x28
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <std+0x40>)
 8009318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <std+0x44>)
 800931c:	6224      	str	r4, [r4, #32]
 800931e:	6323      	str	r3, [r4, #48]	; 0x30
 8009320:	bd10      	pop	{r4, pc}
 8009322:	bf00      	nop
 8009324:	0800962d 	.word	0x0800962d
 8009328:	0800964f 	.word	0x0800964f
 800932c:	08009687 	.word	0x08009687
 8009330:	080096ab 	.word	0x080096ab

08009334 <_cleanup_r>:
 8009334:	4901      	ldr	r1, [pc, #4]	; (800933c <_cleanup_r+0x8>)
 8009336:	f000 b8af 	b.w	8009498 <_fwalk_reent>
 800933a:	bf00      	nop
 800933c:	08009275 	.word	0x08009275

08009340 <__sfmoreglue>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	1e4a      	subs	r2, r1, #1
 8009344:	2568      	movs	r5, #104	; 0x68
 8009346:	4355      	muls	r5, r2
 8009348:	460e      	mov	r6, r1
 800934a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800934e:	f7ff fc23 	bl	8008b98 <_malloc_r>
 8009352:	4604      	mov	r4, r0
 8009354:	b140      	cbz	r0, 8009368 <__sfmoreglue+0x28>
 8009356:	2100      	movs	r1, #0
 8009358:	e9c0 1600 	strd	r1, r6, [r0]
 800935c:	300c      	adds	r0, #12
 800935e:	60a0      	str	r0, [r4, #8]
 8009360:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009364:	f7fd fd36 	bl	8006dd4 <memset>
 8009368:	4620      	mov	r0, r4
 800936a:	bd70      	pop	{r4, r5, r6, pc}

0800936c <__sfp_lock_acquire>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sfp_lock_acquire+0x8>)
 800936e:	f000 b8b3 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20002360 	.word	0x20002360

08009378 <__sfp_lock_release>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__sfp_lock_release+0x8>)
 800937a:	f000 b8ae 	b.w	80094da <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20002360 	.word	0x20002360

08009384 <__sinit_lock_acquire>:
 8009384:	4801      	ldr	r0, [pc, #4]	; (800938c <__sinit_lock_acquire+0x8>)
 8009386:	f000 b8a7 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 800938a:	bf00      	nop
 800938c:	2000235b 	.word	0x2000235b

08009390 <__sinit_lock_release>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__sinit_lock_release+0x8>)
 8009392:	f000 b8a2 	b.w	80094da <__retarget_lock_release_recursive>
 8009396:	bf00      	nop
 8009398:	2000235b 	.word	0x2000235b

0800939c <__sinit>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	f7ff fff0 	bl	8009384 <__sinit_lock_acquire>
 80093a4:	69a3      	ldr	r3, [r4, #24]
 80093a6:	b11b      	cbz	r3, 80093b0 <__sinit+0x14>
 80093a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ac:	f7ff bff0 	b.w	8009390 <__sinit_lock_release>
 80093b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093b4:	6523      	str	r3, [r4, #80]	; 0x50
 80093b6:	4b13      	ldr	r3, [pc, #76]	; (8009404 <__sinit+0x68>)
 80093b8:	4a13      	ldr	r2, [pc, #76]	; (8009408 <__sinit+0x6c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80093be:	42a3      	cmp	r3, r4
 80093c0:	bf04      	itt	eq
 80093c2:	2301      	moveq	r3, #1
 80093c4:	61a3      	streq	r3, [r4, #24]
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 f820 	bl	800940c <__sfp>
 80093cc:	6060      	str	r0, [r4, #4]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f81c 	bl	800940c <__sfp>
 80093d4:	60a0      	str	r0, [r4, #8]
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f818 	bl	800940c <__sfp>
 80093dc:	2200      	movs	r2, #0
 80093de:	60e0      	str	r0, [r4, #12]
 80093e0:	2104      	movs	r1, #4
 80093e2:	6860      	ldr	r0, [r4, #4]
 80093e4:	f7ff ff82 	bl	80092ec <std>
 80093e8:	68a0      	ldr	r0, [r4, #8]
 80093ea:	2201      	movs	r2, #1
 80093ec:	2109      	movs	r1, #9
 80093ee:	f7ff ff7d 	bl	80092ec <std>
 80093f2:	68e0      	ldr	r0, [r4, #12]
 80093f4:	2202      	movs	r2, #2
 80093f6:	2112      	movs	r1, #18
 80093f8:	f7ff ff78 	bl	80092ec <std>
 80093fc:	2301      	movs	r3, #1
 80093fe:	61a3      	str	r3, [r4, #24]
 8009400:	e7d2      	b.n	80093a8 <__sinit+0xc>
 8009402:	bf00      	nop
 8009404:	08009808 	.word	0x08009808
 8009408:	08009335 	.word	0x08009335

0800940c <__sfp>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	4607      	mov	r7, r0
 8009410:	f7ff ffac 	bl	800936c <__sfp_lock_acquire>
 8009414:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <__sfp+0x84>)
 8009416:	681e      	ldr	r6, [r3, #0]
 8009418:	69b3      	ldr	r3, [r6, #24]
 800941a:	b913      	cbnz	r3, 8009422 <__sfp+0x16>
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff ffbd 	bl	800939c <__sinit>
 8009422:	3648      	adds	r6, #72	; 0x48
 8009424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009428:	3b01      	subs	r3, #1
 800942a:	d503      	bpl.n	8009434 <__sfp+0x28>
 800942c:	6833      	ldr	r3, [r6, #0]
 800942e:	b30b      	cbz	r3, 8009474 <__sfp+0x68>
 8009430:	6836      	ldr	r6, [r6, #0]
 8009432:	e7f7      	b.n	8009424 <__sfp+0x18>
 8009434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009438:	b9d5      	cbnz	r5, 8009470 <__sfp+0x64>
 800943a:	4b16      	ldr	r3, [pc, #88]	; (8009494 <__sfp+0x88>)
 800943c:	60e3      	str	r3, [r4, #12]
 800943e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009442:	6665      	str	r5, [r4, #100]	; 0x64
 8009444:	f000 f847 	bl	80094d6 <__retarget_lock_init_recursive>
 8009448:	f7ff ff96 	bl	8009378 <__sfp_lock_release>
 800944c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009454:	6025      	str	r5, [r4, #0]
 8009456:	61a5      	str	r5, [r4, #24]
 8009458:	2208      	movs	r2, #8
 800945a:	4629      	mov	r1, r5
 800945c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009460:	f7fd fcb8 	bl	8006dd4 <memset>
 8009464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800946c:	4620      	mov	r0, r4
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009470:	3468      	adds	r4, #104	; 0x68
 8009472:	e7d9      	b.n	8009428 <__sfp+0x1c>
 8009474:	2104      	movs	r1, #4
 8009476:	4638      	mov	r0, r7
 8009478:	f7ff ff62 	bl	8009340 <__sfmoreglue>
 800947c:	4604      	mov	r4, r0
 800947e:	6030      	str	r0, [r6, #0]
 8009480:	2800      	cmp	r0, #0
 8009482:	d1d5      	bne.n	8009430 <__sfp+0x24>
 8009484:	f7ff ff78 	bl	8009378 <__sfp_lock_release>
 8009488:	230c      	movs	r3, #12
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	e7ee      	b.n	800946c <__sfp+0x60>
 800948e:	bf00      	nop
 8009490:	08009808 	.word	0x08009808
 8009494:	ffff0001 	.word	0xffff0001

08009498 <_fwalk_reent>:
 8009498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949c:	4606      	mov	r6, r0
 800949e:	4688      	mov	r8, r1
 80094a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094a4:	2700      	movs	r7, #0
 80094a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094aa:	f1b9 0901 	subs.w	r9, r9, #1
 80094ae:	d505      	bpl.n	80094bc <_fwalk_reent+0x24>
 80094b0:	6824      	ldr	r4, [r4, #0]
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	d1f7      	bne.n	80094a6 <_fwalk_reent+0xe>
 80094b6:	4638      	mov	r0, r7
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094bc:	89ab      	ldrh	r3, [r5, #12]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d907      	bls.n	80094d2 <_fwalk_reent+0x3a>
 80094c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094c6:	3301      	adds	r3, #1
 80094c8:	d003      	beq.n	80094d2 <_fwalk_reent+0x3a>
 80094ca:	4629      	mov	r1, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	47c0      	blx	r8
 80094d0:	4307      	orrs	r7, r0
 80094d2:	3568      	adds	r5, #104	; 0x68
 80094d4:	e7e9      	b.n	80094aa <_fwalk_reent+0x12>

080094d6 <__retarget_lock_init_recursive>:
 80094d6:	4770      	bx	lr

080094d8 <__retarget_lock_acquire_recursive>:
 80094d8:	4770      	bx	lr

080094da <__retarget_lock_release_recursive>:
 80094da:	4770      	bx	lr

080094dc <__swhatbuf_r>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	460e      	mov	r6, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	2900      	cmp	r1, #0
 80094e6:	b096      	sub	sp, #88	; 0x58
 80094e8:	4614      	mov	r4, r2
 80094ea:	461d      	mov	r5, r3
 80094ec:	da07      	bge.n	80094fe <__swhatbuf_r+0x22>
 80094ee:	2300      	movs	r3, #0
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	89b3      	ldrh	r3, [r6, #12]
 80094f4:	061a      	lsls	r2, r3, #24
 80094f6:	d410      	bmi.n	800951a <__swhatbuf_r+0x3e>
 80094f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094fc:	e00e      	b.n	800951c <__swhatbuf_r+0x40>
 80094fe:	466a      	mov	r2, sp
 8009500:	f000 f8fa 	bl	80096f8 <_fstat_r>
 8009504:	2800      	cmp	r0, #0
 8009506:	dbf2      	blt.n	80094ee <__swhatbuf_r+0x12>
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800950e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009512:	425a      	negs	r2, r3
 8009514:	415a      	adcs	r2, r3
 8009516:	602a      	str	r2, [r5, #0]
 8009518:	e7ee      	b.n	80094f8 <__swhatbuf_r+0x1c>
 800951a:	2340      	movs	r3, #64	; 0x40
 800951c:	2000      	movs	r0, #0
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	b016      	add	sp, #88	; 0x58
 8009522:	bd70      	pop	{r4, r5, r6, pc}

08009524 <__smakebuf_r>:
 8009524:	898b      	ldrh	r3, [r1, #12]
 8009526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009528:	079d      	lsls	r5, r3, #30
 800952a:	4606      	mov	r6, r0
 800952c:	460c      	mov	r4, r1
 800952e:	d507      	bpl.n	8009540 <__smakebuf_r+0x1c>
 8009530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	2301      	movs	r3, #1
 800953a:	6163      	str	r3, [r4, #20]
 800953c:	b002      	add	sp, #8
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	ab01      	add	r3, sp, #4
 8009542:	466a      	mov	r2, sp
 8009544:	f7ff ffca 	bl	80094dc <__swhatbuf_r>
 8009548:	9900      	ldr	r1, [sp, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fb23 	bl	8008b98 <_malloc_r>
 8009552:	b948      	cbnz	r0, 8009568 <__smakebuf_r+0x44>
 8009554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009558:	059a      	lsls	r2, r3, #22
 800955a:	d4ef      	bmi.n	800953c <__smakebuf_r+0x18>
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7e3      	b.n	8009530 <__smakebuf_r+0xc>
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <__smakebuf_r+0x7c>)
 800956a:	62b3      	str	r3, [r6, #40]	; 0x28
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	6163      	str	r3, [r4, #20]
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	6120      	str	r0, [r4, #16]
 800957e:	b15b      	cbz	r3, 8009598 <__smakebuf_r+0x74>
 8009580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009584:	4630      	mov	r0, r6
 8009586:	f000 f8c9 	bl	800971c <_isatty_r>
 800958a:	b128      	cbz	r0, 8009598 <__smakebuf_r+0x74>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f023 0303 	bic.w	r3, r3, #3
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	89a0      	ldrh	r0, [r4, #12]
 800959a:	4305      	orrs	r5, r0
 800959c:	81a5      	strh	r5, [r4, #12]
 800959e:	e7cd      	b.n	800953c <__smakebuf_r+0x18>
 80095a0:	08009335 	.word	0x08009335

080095a4 <_raise_r>:
 80095a4:	291f      	cmp	r1, #31
 80095a6:	b538      	push	{r3, r4, r5, lr}
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	d904      	bls.n	80095b8 <_raise_r+0x14>
 80095ae:	2316      	movs	r3, #22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095ba:	b112      	cbz	r2, 80095c2 <_raise_r+0x1e>
 80095bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095c0:	b94b      	cbnz	r3, 80095d6 <_raise_r+0x32>
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 f830 	bl	8009628 <_getpid_r>
 80095c8:	462a      	mov	r2, r5
 80095ca:	4601      	mov	r1, r0
 80095cc:	4620      	mov	r0, r4
 80095ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d2:	f000 b817 	b.w	8009604 <_kill_r>
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d00a      	beq.n	80095f0 <_raise_r+0x4c>
 80095da:	1c59      	adds	r1, r3, #1
 80095dc:	d103      	bne.n	80095e6 <_raise_r+0x42>
 80095de:	2316      	movs	r3, #22
 80095e0:	6003      	str	r3, [r0, #0]
 80095e2:	2001      	movs	r0, #1
 80095e4:	e7e7      	b.n	80095b6 <_raise_r+0x12>
 80095e6:	2400      	movs	r4, #0
 80095e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095ec:	4628      	mov	r0, r5
 80095ee:	4798      	blx	r3
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7e0      	b.n	80095b6 <_raise_r+0x12>

080095f4 <raise>:
 80095f4:	4b02      	ldr	r3, [pc, #8]	; (8009600 <raise+0xc>)
 80095f6:	4601      	mov	r1, r0
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	f7ff bfd3 	b.w	80095a4 <_raise_r>
 80095fe:	bf00      	nop
 8009600:	20000188 	.word	0x20000188

08009604 <_kill_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_kill_r+0x20>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f7f8 fa21 	bl	8001a58 <_kill>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d102      	bne.n	8009620 <_kill_r+0x1c>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	b103      	cbz	r3, 8009620 <_kill_r+0x1c>
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	20002354 	.word	0x20002354

08009628 <_getpid_r>:
 8009628:	f7f8 ba14 	b.w	8001a54 <_getpid>

0800962c <__sread>:
 800962c:	b510      	push	{r4, lr}
 800962e:	460c      	mov	r4, r1
 8009630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009634:	f000 f894 	bl	8009760 <_read_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	bfab      	itete	ge
 800963c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800963e:	89a3      	ldrhlt	r3, [r4, #12]
 8009640:	181b      	addge	r3, r3, r0
 8009642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009646:	bfac      	ite	ge
 8009648:	6563      	strge	r3, [r4, #84]	; 0x54
 800964a:	81a3      	strhlt	r3, [r4, #12]
 800964c:	bd10      	pop	{r4, pc}

0800964e <__swrite>:
 800964e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009652:	461f      	mov	r7, r3
 8009654:	898b      	ldrh	r3, [r1, #12]
 8009656:	05db      	lsls	r3, r3, #23
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	4616      	mov	r6, r2
 800965e:	d505      	bpl.n	800966c <__swrite+0x1e>
 8009660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009664:	2302      	movs	r3, #2
 8009666:	2200      	movs	r2, #0
 8009668:	f000 f868 	bl	800973c <_lseek_r>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	4632      	mov	r2, r6
 800967a:	463b      	mov	r3, r7
 800967c:	4628      	mov	r0, r5
 800967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	f000 b817 	b.w	80096b4 <_write_r>

08009686 <__sseek>:
 8009686:	b510      	push	{r4, lr}
 8009688:	460c      	mov	r4, r1
 800968a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968e:	f000 f855 	bl	800973c <_lseek_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	bf15      	itete	ne
 8009698:	6560      	strne	r0, [r4, #84]	; 0x54
 800969a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800969e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096a2:	81a3      	strheq	r3, [r4, #12]
 80096a4:	bf18      	it	ne
 80096a6:	81a3      	strhne	r3, [r4, #12]
 80096a8:	bd10      	pop	{r4, pc}

080096aa <__sclose>:
 80096aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ae:	f000 b813 	b.w	80096d8 <_close_r>
	...

080096b4 <_write_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	; (80096d4 <_write_r+0x20>)
 80096b8:	4604      	mov	r4, r0
 80096ba:	4608      	mov	r0, r1
 80096bc:	4611      	mov	r1, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f8 f9e6 	bl	8001a94 <_write>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_write_r+0x1e>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_write_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20002354 	.word	0x20002354

080096d8 <_close_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4d06      	ldr	r5, [pc, #24]	; (80096f4 <_close_r+0x1c>)
 80096dc:	2300      	movs	r3, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	602b      	str	r3, [r5, #0]
 80096e4:	f7f8 f9e4 	bl	8001ab0 <_close>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_close_r+0x1a>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_close_r+0x1a>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20002354 	.word	0x20002354

080096f8 <_fstat_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	; (8009718 <_fstat_r+0x20>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	f7f8 f9d6 	bl	8001ab6 <_fstat>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d102      	bne.n	8009714 <_fstat_r+0x1c>
 800970e:	682b      	ldr	r3, [r5, #0]
 8009710:	b103      	cbz	r3, 8009714 <_fstat_r+0x1c>
 8009712:	6023      	str	r3, [r4, #0]
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	bf00      	nop
 8009718:	20002354 	.word	0x20002354

0800971c <_isatty_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d06      	ldr	r5, [pc, #24]	; (8009738 <_isatty_r+0x1c>)
 8009720:	2300      	movs	r3, #0
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	602b      	str	r3, [r5, #0]
 8009728:	f7f8 f9ca 	bl	8001ac0 <_isatty>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_isatty_r+0x1a>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_isatty_r+0x1a>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20002354 	.word	0x20002354

0800973c <_lseek_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_lseek_r+0x20>)
 8009740:	4604      	mov	r4, r0
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	2200      	movs	r2, #0
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f8 f9ba 	bl	8001ac4 <_lseek>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_lseek_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_lseek_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20002354 	.word	0x20002354

08009760 <_read_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	; (8009780 <_read_r+0x20>)
 8009764:	4604      	mov	r4, r0
 8009766:	4608      	mov	r0, r1
 8009768:	4611      	mov	r1, r2
 800976a:	2200      	movs	r2, #0
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7f8 f980 	bl	8001a74 <_read>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_read_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_read_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	20002354 	.word	0x20002354

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
